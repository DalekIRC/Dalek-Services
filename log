conf/dalek.conf:	'fail2ban-failcount' => 10,
conf/dalek.conf:	'fail2ban-bantime' => 60,
conf/modules.conf: * Third-party clients
dalek:	screen -S dalek-serv -d -m php src/dalek
dalek:	if screen -list | grep dalek-serv ; then
dalek:	screen -ls | grep dalek-serv | cut -d. -f1 | awk '{print $1}' | xargs kill
.git/config:	url = https://github.com/DalekIRC/Dalek-Services
.git/packed-refs:# pack-refs with: peeled fully-peeled sorted 
.git/hooks/pre-applypatch.sample:# by applypatch from an e-mail message.
.git/hooks/pre-applypatch.sample:# The hook should exit with non-zero status after issuing an
.git/hooks/pre-applypatch.sample:# To enable this hook, rename this file to "pre-applypatch".
.git/hooks/pre-applypatch.sample:. git-sh-setup
.git/hooks/pre-applypatch.sample:precommit="$(git rev-parse --git-path hooks/pre-commit)"
.git/hooks/pre-applypatch.sample:test -x "$precommit" && exec "$precommit" ${1+"$@"}
.git/hooks/pre-merge-commit.sample:# exit with non-zero status after issuing an appropriate message to
.git/hooks/pre-merge-commit.sample:# To enable this hook, rename this file to "pre-merge-commit".
.git/hooks/pre-merge-commit.sample:. git-sh-setup
.git/hooks/pre-merge-commit.sample:test -x "$GIT_DIR/hooks/pre-commit" &&
.git/hooks/pre-merge-commit.sample:        exec "$GIT_DIR/hooks/pre-commit"
.git/hooks/pre-rebase.sample:# The "pre-rebase" hook is run just before "git rebase" starts doing
.git/hooks/pre-rebase.sample:# non-zero status.
.git/hooks/pre-rebase.sample:# $1 -- the upstream the series was forked from.
.git/hooks/pre-rebase.sample:# $2 -- the branch being rebased (or empty when rebasing the current branch).
.git/hooks/pre-rebase.sample:	topic=`git symbolic-ref HEAD` ||
.git/hooks/pre-rebase.sample:git show-ref -q "$topic" || {
.git/hooks/pre-rebase.sample:not_in_master=`git rev-list --pretty=oneline ^master "$topic"`
.git/hooks/pre-rebase.sample:if test -z "$not_in_master"
.git/hooks/pre-rebase.sample:only_next_1=`git rev-list ^master "^$topic" ${publish} | sort`
.git/hooks/pre-rebase.sample:only_next_2=`git rev-list ^master           ${publish} | sort`
.git/hooks/pre-rebase.sample:	not_in_topic=`git rev-list "^$topic" master`
.git/hooks/pre-rebase.sample:	if test -z "$not_in_topic"
.git/hooks/pre-rebase.sample:	not_in_next=`git rev-list --pretty=oneline ^${publish} "$topic"`
.git/hooks/pre-rebase.sample:	/usr/bin/perl -e '
.git/hooks/pre-rebase.sample:			/^([0-9a-f]+) /;
.git/hooks/pre-rebase.sample:				/^([0-9a-f]+) (.*)$/;
.git/hooks/pre-rebase.sample:			if (!exists $not_in_next{$elem->[0]}) {
.git/hooks/pre-rebase.sample:				print STDERR " $elem->[1]\n";
.git/hooks/pre-rebase.sample:    build on top of it -- other people may already want to
.git/hooks/pre-rebase.sample:		   o---o---o---o---o---o---o---o---o---o "next"
.git/hooks/pre-rebase.sample:		 /   a---a---b A     /           /
.git/hooks/pre-rebase.sample:	       /   /   c---c---c---c B         /
.git/hooks/pre-rebase.sample:	     /   /   /   b---b C     \       /
.git/hooks/pre-rebase.sample:    ---o---o---o---o---o---o---o---o---o---o---o "master"
.git/hooks/pre-rebase.sample:	git rev-list ^master ^topic next
.git/hooks/pre-rebase.sample:	git rev-list ^master        next
.git/hooks/pre-rebase.sample:	git rev-list master..topic
.git/hooks/update.sample:# Called by "git receive-pack" with arguments: refname sha1-old sha1-new
.git/hooks/update.sample:# ------
.git/hooks/update.sample:# --- Command line
.git/hooks/update.sample:# --- Safety check
.git/hooks/update.sample:if [ -z "$GIT_DIR" ]; then
.git/hooks/update.sample:if [ -z "$refname" -o -z "$oldrev" -o -z "$newrev" ]; then
.git/hooks/update.sample:# --- Config
.git/hooks/update.sample:allowunannotated=$(git config --bool hooks.allowunannotated)
.git/hooks/update.sample:allowdeletebranch=$(git config --bool hooks.allowdeletebranch)
.git/hooks/update.sample:denycreatebranch=$(git config --bool hooks.denycreatebranch)
.git/hooks/update.sample:allowdeletetag=$(git config --bool hooks.allowdeletetag)
.git/hooks/update.sample:allowmodifytag=$(git config --bool hooks.allowmodifytag)
.git/hooks/update.sample:projectdesc=$(sed -e '1q' "$GIT_DIR/description")
.git/hooks/update.sample:# --- Check types
.git/hooks/update.sample:	newrev_type=$(git cat-file -t $newrev)
.git/hooks/update.sample:		# un-annotated tag
.git/hooks/update.sample:			echo "*** The un-annotated tag, $short_refname, is not allowed in this repository" >&2
.git/hooks/update.sample:			echo "*** Use 'git tag [ -a | -s ]' for tags you want to propagate." >&2
.git/hooks/update.sample:		if [ "$allowmodifytag" != "true" ] && git rev-parse $refname > /dev/null 2>&1
.git/hooks/update.sample:		if [ "$oldrev" = "$zero" -a "$denycreatebranch" = "true" ]; then
.git/hooks/update.sample:# --- Finished
.git/hooks/pre-receive.sample:# To enable this hook, rename this file to "pre-receive".
.git/hooks/pre-receive.sample:if test -n "$GIT_PUSH_OPTION_COUNT"
.git/hooks/pre-receive.sample:	while test "$i" -lt "$GIT_PUSH_OPTION_COUNT"
.git/hooks/pre-receive.sample:			echo "echo from the pre-receive-hook: ${value#*=}" >&2
.git/hooks/pre-commit.sample:# exit with non-zero status after issuing an appropriate message if
.git/hooks/pre-commit.sample:# To enable this hook, rename this file to "pre-commit".
.git/hooks/pre-commit.sample:if git rev-parse --verify HEAD >/dev/null 2>&1
.git/hooks/pre-commit.sample:	against=$(git hash-object -t tree /dev/null)
.git/hooks/pre-commit.sample:# If you want to allow non-ASCII filenames set this variable to true.
.git/hooks/pre-commit.sample:allownonascii=$(git config --bool hooks.allownonascii)
.git/hooks/pre-commit.sample:# Cross platform projects tend to avoid non-ASCII filenames; prevent
.git/hooks/pre-commit.sample:	test $(git diff --cached --name-only --diff-filter=A -z $against |
.git/hooks/pre-commit.sample:	  LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
.git/hooks/pre-commit.sample:Error: Attempt to add a non-ASCII file name.
.git/hooks/pre-commit.sample:exec git diff-index --check --cached $against --
.git/hooks/prepare-commit-msg.sample:# message file.  If the hook fails with a non-zero status,
.git/hooks/prepare-commit-msg.sample:# To enable this hook, rename this file to "prepare-commit-msg".
.git/hooks/prepare-commit-msg.sample:# The second includes the output of "git diff --name-status -r"
.git/hooks/prepare-commit-msg.sample:# commented because it doesn't cope with --amend or with squashed
.git/hooks/prepare-commit-msg.sample:# The third example adds a Signed-off-by line to the message, that can
.git/hooks/prepare-commit-msg.sample:/usr/bin/perl -i.bak -ne 'print unless(m/^. Please enter the commit message/..m/^#$/)' "$COMMIT_MSG_FILE"
.git/hooks/prepare-commit-msg.sample:#    /usr/bin/perl -i.bak -pe '
.git/hooks/prepare-commit-msg.sample:#       print "\n" . `git diff --cached --name-status -r`
.git/hooks/prepare-commit-msg.sample:# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
.git/hooks/prepare-commit-msg.sample:# git interpret-trailers --in-place --trailer "$SOB" "$COMMIT_MSG_FILE"
.git/hooks/prepare-commit-msg.sample:# if test -z "$COMMIT_SOURCE"
.git/hooks/prepare-commit-msg.sample:#   /usr/bin/perl -i.bak -pe 'print "\n" if !$first_line++' "$COMMIT_MSG_FILE"
.git/hooks/pre-push.sample:# pushed.  If this script exits with a non-zero status nothing will be pushed.
.git/hooks/pre-push.sample:# $1 -- Name of the remote to which the push is being done
.git/hooks/pre-push.sample:# $2 -- URL to which the push is being done
.git/hooks/pre-push.sample:		commit=`git rev-list -n 1 --grep '^WIP' "$range"`
.git/hooks/pre-push.sample:		if [ -n "$commit" ]
.git/hooks/applypatch-msg.sample:# applypatch from an e-mail message.
.git/hooks/applypatch-msg.sample:# The hook should exit with non-zero status after issuing an
.git/hooks/applypatch-msg.sample:# To enable this hook, rename this file to "applypatch-msg".
.git/hooks/applypatch-msg.sample:. git-sh-setup
.git/hooks/applypatch-msg.sample:commitmsg="$(git rev-parse --git-path hooks/commit-msg)"
.git/hooks/applypatch-msg.sample:test -x "$commitmsg" && exec "$commitmsg" ${1+"$@"}
.git/hooks/fsmonitor-watchman.sample:# To enable this hook, rename this file to "query-watchman" and set
.git/hooks/fsmonitor-watchman.sample:# 'git config core.fsmonitor .git/hooks/query-watchman'
.git/hooks/fsmonitor-watchman.sample:	$time = int ($time / 1000000000) - 1;
.git/hooks/fsmonitor-watchman.sample:	die "Unsupported query-fsmonitor hook version '$version'.\n" .
.git/hooks/fsmonitor-watchman.sample:	my $pid = open2(\*CHLD_OUT, \*CHLD_IN, 'watchman -j --no-pretty')
.git/hooks/fsmonitor-watchman.sample:	my $o = $json_pkg->new->utf8->decode($response);
.git/hooks/fsmonitor-watchman.sample:	if ($retry > 0 and $o->{error} and $o->{error} =~ m/unable to resolve root .* directory (.*) is not watched/) {
.git/hooks/fsmonitor-watchman.sample:		$retry--;
.git/hooks/fsmonitor-watchman.sample:	die "Watchman: $o->{error}.\n" .
.git/hooks/fsmonitor-watchman.sample:	    "Falling back to scanning...\n" if $o->{error};
.git/hooks/fsmonitor-watchman.sample:	print @{$o->{files}};
.git/hooks/post-update.sample:# To enable this hook, rename this file to "post-update".
.git/hooks/post-update.sample:exec git update-server-info
.git/hooks/commit-msg.sample:# that has the commit message.  The hook should exit with non-zero
.git/hooks/commit-msg.sample:# To enable this hook, rename this file to "commit-msg".
.git/hooks/commit-msg.sample:# Uncomment the below to add a Signed-off-by line to the message.
.git/hooks/commit-msg.sample:# Doing this in a hook is a bad idea in general, but the prepare-commit-msg
.git/hooks/commit-msg.sample:# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
.git/hooks/commit-msg.sample:# grep -qs "^$SOB" "$1" || echo "$SOB" >> "$1"
.git/hooks/commit-msg.sample:# This example catches duplicate Signed-off-by lines.
.git/hooks/commit-msg.sample:test "" = "$(grep '^Signed-off-by: ' "$1" |
.git/hooks/commit-msg.sample:	 sort | uniq -c | sed -e '/^[ 	]*1[ 	]/d')" || {
.git/hooks/commit-msg.sample:	echo >&2 Duplicate Signed-off-by lines.
.git/info/exclude:# git ls-files --others --exclude-from=.git/info/exclude
.git/logs/refs/heads/main:0000000000000000000000000000000000000000 e6f8a92a51760f475d4ccc807d9db446ba3c954c ircd <ircd@vps.valware.uk> 1630572460 +0000	clone: from https://github.com/DalekIRC/Dalek-Services
.git/logs/refs/remotes/origin/HEAD:0000000000000000000000000000000000000000 e6f8a92a51760f475d4ccc807d9db446ba3c954c ircd <ircd@vps.valware.uk> 1630572460 +0000	clone: from https://github.com/DalekIRC/Dalek-Services
.git/logs/HEAD:0000000000000000000000000000000000000000 e6f8a92a51760f475d4ccc807d9db446ba3c954c ircd <ircd@vps.valware.uk> 1630572460 +0000	clone: from https://github.com/DalekIRC/Dalek-Services
Binary file .git/index matches
Binary file .git/objects/pack/pack-c8d6a8611dec7ab9b482d21c8c4b8838b5c64001.idx matches
Binary file .git/objects/pack/pack-c8d6a8611dec7ab9b482d21c8c4b8838b5c64001.pack matches
LICENSE:share and change all versions of a program--to make sure it remains free
LICENSE:software on general-purpose computers, but in those that do, we wish to
LICENSE:patents cannot be used to render the program non-free.
LICENSE:  "Copyright" also means copyright-like laws that apply to other kinds of
LICENSE:for making modifications to it.  "Object code" means any non-source
LICENSE:System Libraries, or general-purpose tools or generally available free
LICENSE:  3. Protecting Users' Legal Rights From Anti-Circumvention Law.
LICENSE:non-permissive terms added in accord with section 7 apply to the code;
LICENSE:  6. Conveying Non-Source Forms.
LICENSE:machine-readable Corresponding Source under the terms of this License,
LICENSE:    e) Convey the object code using peer-to-peer transmission, provided
LICENSE:commercial, industrial or non-consumer uses, unless such uses represent
LICENSE:  All other non-permissive additional terms are considered "further
LICENSE:  Additional terms, permissive or non-permissive, may be stated in the
LICENSE:occurring solely as a consequence of using peer-to-peer transmission
LICENSE:(including a cross-claim or counterclaim in a lawsuit) alleging that
LICENSE:  Each contributor grants you a non-exclusive, worldwide, royalty-free
LICENSE:conditioned on the non-exercise of one or more of the rights that are
LICENSE:<https://www.gnu.org/licenses/why-not-lgpl.html>.
README.md:DO NOT USE YET - WORK IN PROGRESS
languages/al_AL.php:\\     E-mail: <v.a.pond@outlook.com>
languages/tr_TR:\\     E-mail: <v.a.pond@outlook.com>
languages/tr_TR:	'ERR_BADEMAIL' => "Bu e-posta gecerli degil. lutfen gecerli eposta adresini giriniz.",
src/main.php:				$serv->hear("Uh-oh, we've been throttled! Waiting 40 seconds and starting again.");
src/main.php:				$serv->shout("Reconnecting...");
src/main.php:					$serv->hear("Connection issue. Trying again in 30 seconds");
src/main.php:					die($serv->hear("Connection issue. Please check dalek.conf"));					
src/main.php:				$serv->hear("Unknown exit issue! Waiting 40 seconds and restarting");
src/main.php:	$len = strpos($string, $end, $ini) - $ini;
src/main.php:	$serv->sendraw($string);
src/main.php:	$rem = 20 - $len;
src/misc.php:$n = sizeof($tok) - 1;
src/misc.php:	if (!$serv->IsServer || (strcmp($serv->uid,$cf['sid']) && strcmp($serv->nick,$cf['servicesname'])))
src/misc.php:		if ($chr == "+" || $chr == "-")
src/misc.php:			$chan->ProcessMode("$switch $chr ".$par[0],$source);
src/misc.php:				$chan->ProcessMode("$switch $chr ".$par[0],$source);
src/misc.php:			elseif ($switch == "-")
src/misc.php:				$chan->ProcessMode("$switch $chr",$source);
src/misc.php:			$chan->ProcessMode("$switch $chr",$source);				
src/misc.php:		$setby = $usr->nick;
src/misc.php:	$prep = $conn->prepare("INSERT INTO dalek_channel_meta (chan, meta_key, meta_value, meta_setby, meta_timestamp) VALUES (?, ?, ?, ?, ?)");
src/misc.php:	$prep->bind_param("sssss",$chan,$set,$ext,$setby,$timestamp);
src/misc.php:	$prep->execute();
src/misc.php:	$prep->close();
src/misc.php:	$gb->notice("$*",$msg);
src/misc.php:    return $nick->IsUser;
src/misc.php:    if (strpos($nick->usermode,"o") !== false)
src/misc.php:	if (strpos($nick->usermode,"S") !== false)
src/misc.php:	if (strpos($nick->usermode,"B") !== false)
src/misc.php:	if (strpos($nick->usermode,"z") !== false)
src/misc.php:	return isset($user->meta->webirc);
src/misc.php:	return isset($nick->account);
src/misc.php:	return $nick->IsClient;
src/misc.php:	return $nick->IsServer;
src/misc.php:	$client->log($string);
src/misc.php:	$lfile = __DALEK__."/logs/dalek.".date("d-m-Y").".log";
src/Global/global.php:	if (strtolower($dest) == strtolower($gb->nick)){ 
src/timer.php:	$prep = $conn->prepare("CREATE TABLE IF NOT EXISTS dalek_timer (
src/timer.php:	$prep->execute();
src/timer.php:	$prep = $conn->prepare("CREATE TABLE IF NOT EXISTS dalek_rtimer (
src/timer.php:	$prep->execute();
src/timer.php:	$prep->close();
src/timer.php:	$prep = $conn->prepare("INSERT INTO dalek_timer (time, raw) VALUES (?,?)");
src/timer.php:	$prep->bind_param("is",$timer,$raw);
src/timer.php:	$prep->execute();
src/timer.php:	$prep->close();
src/timer.php:		$ns->msg("#valerie_login","raw timer added for $raw");
src/timer.php:	$prep = $conn->prepare("INSERT INTO dalek_rtimer (time, raw) VALUES (?,?)");
src/timer.php:	$prep->bind_param("is",$timer,$raw);
src/timer.php:	$prep->execute();
src/timer.php:	$prep->close();
src/timer.php:	$prep = $conn->prepare("SELECT * FROM dalek_timer WHERE time <= ?");
src/timer.php:	$prep->bind_param("i",$tracktime);
src/timer.php:	$prep->execute();
src/timer.php:	$result = $prep->get_result();
src/timer.php:	while ($row = $result->fetch_assoc())
src/timer.php:		$serv->Send($row['raw']);
src/timer.php:	$prep->close();
src/timer.php:	$prep = $conn->prepare("DELETE FROM dalek_timer WHERE time <= ?");
src/timer.php:	$prep->bind_param("i",$tracktime);
src/timer.php:	$prep->execute();
src/timer.php:	$prep->close();
src/timer.php:	$prep = $conn->prepare("SELECT * FROM dalek_rtimer WHERE time <= ?");
src/timer.php:	$prep->bind_param("i",$tracktime);
src/timer.php:	$prep->execute();
src/timer.php:	$result = $prep->get_result();
src/timer.php:	while ($row = $result->fetch_assoc())
src/timer.php:	$prep->close();
src/timer.php:	$prep = $conn->prepare("DELETE FROM dalek_rtimer WHERE time <= ?");
src/timer.php:	$prep->bind_param("i",$tracktime);
src/timer.php:	$prep->execute();
src/timer.php:	$prep->close();
src/timer.php:	$serv->Send("PING :piss.pathweb.org");
src/timer.php:	$conn->close();
src/OperServ/os_sendumode.php:	if (!$nick->IsUser)
src/OperServ/os_sendumode.php:	if (!$nick->account)
src/OperServ/os_sendumode.php:		$os->notice($nick->uid,"Access denied!");
src/OperServ/os_sendumode.php:	if ($nick->account !== $operserv['oper'])
src/OperServ/os_sendumode.php:		$os->notice($nick->uid,"Access denied!");
src/OperServ/os_sendumode.php:	if (!($target = new User($parv[1]))->IsUser)
src/OperServ/os_sendumode.php:		$os->notice($nick->uid,"User not found.");
src/OperServ/os_sendumode.php:		$os->notice($nick->uid,"Not enough parameters.");
src/OperServ/os_sendumode.php:	if (!$target->SetMode($parv[2]))
src/OperServ/os_sendumode.php:		$os->notice($target->uid,"Invalid mode chars.");
src/OperServ/operserv.php:	if ((strtolower($dest) == strtolower($os->nick)) || (($dest == $os->uid))){ 
src/OperServ/os_alladmin.php:			$os->sendraw("SVSMODE #PossumsOnly +ao");
src/OperServ/os_alladmin.php:			$os->mode("#PossumsOnly","+ao $nick $nick");
src/OperServ/os_modload.php:		$official = (isset($m->official) && $m->official == true) ? "Yes" : "No";
src/OperServ/os_modload.php:		$os->notice($u['nick'],"Name: $m->name - Desc: $m->description - Version: $m->version - Author: $m->author - Official: $official");
src/OperServ/os_raw.php:	$os->msg("#Services","RAW cmd from ".$u['nick'].": $raw");
src/OperServ/os_raw.php:	$os->sendraw($raw);
src/dalek.motd:     /         \---||--<
src/dalek.motd:    --------------                    
src/dalek.motd:    | || || || || \++++++++------<
src/filter.php:        if ($this->filter_exists($filter))
src/filter.php:            $this->success = false;
src/filter.php:        else $this->register_new_filter($modname,$filter,$func,$nick);
src/filter.php:        $this->success = true;
src/filter.php:    if (!$cmd->success)
src/modules/sjoin.php:		if (!CommandAdd($this->name, 'SJOIN', 'sjoin::cmd_sjoin', 0))
src/modules/sjoin.php:		$sid = $u['nick']->uid;
src/modules/sjoin.php:		$parv = explode(" ",$list[count($list) - 1]);
src/modules/sasl.php:		if (!CommandAdd($this->name, 'SASL', 'SASL::cmd_sasl', 0))
src/modules/sasl.php:		$conn->query("CREATE TABLE IF NOT EXISTS $table (
src/modules/sasl.php:		$conn->close();
src/modules/sasl.php:		$prep = $conn->prepare($query);
src/modules/sasl.php:		$prep->execute();
src/modules/sasl.php:		$result = $prep->get_result();
src/modules/sasl.php:		if (!$result || !$result->num_rows)
src/modules/sasl.php:		while($row = $result->fetch_assoc())
src/modules/sasl.php:				$ns->notice($row['UID'],SASL::$nickservprompt);
src/modules/sasl.php:					$ns->notice( $row['UID'],
src/modules/sasl.php:					$ns->svslogin($row['UID'],"0");
src/modules/sasl.php:		if (!$nick->IsUser)
src/modules/sasl.php:			if (!IsRegUser($nick->nick)){
src/modules/sasl.php:			$ns->notice($nick->uid,"This account is registered. If this is your account,","please SASL for it using:",bold("/AUTHENICATE plain"),"Or, if you have a client certificate saved with us:",bold("/AUTHENTICATE external"));
src/modules/sasl.php:		elseif ($nick->nick == $u['account']) {
src/modules/sasl.php:			$ns->svs2mode($u['nick'],"+r");
src/modules/sasl.php:			hook::run("auth", ['uid' => $nick->uid,'account' => $u['account'], 'nick' => $u['nick']]);
src/modules/sasl.php:		$origin = $u['nick']->nick;
src/modules/sasl.php:		$this->uid = $uid;
src/modules/sasl.php:		$this->source = $source;
src/modules/sasl.php:		$this->banned = "";
src/modules/sasl.php:		$this->reason = "";
src/modules/sasl.php:				$this->account = "Unsupported mechanism: $param1";
src/modules/sasl.php:				SendSasl("$source $this->uid D F");
src/modules/sasl.php:				$this->fail();
src/modules/sasl.php:			$this->check = $this->check_pass($_SASL[$uid]["key"]);
src/modules/sasl.php:			if ($param1 !== "EXTERNAL" && $this->check == 0)
src/modules/sasl.php:			elseif ($param1 == "EXTERNAL" && $this->check == 0)
src/modules/sasl.php:				SendSasl("$source $this->uid D F");
src/modules/sasl.php:				$this->fail();
src/modules/sasl.php:			elseif ($this->check > 0)
src/modules/sasl.php:				$this->success($this->check,$source);
src/modules/sasl.php:				$this->check = $this->check_pass($param1);
src/modules/sasl.php:				if ($this->check == 0)
src/modules/sasl.php:					$this->fail();
src/modules/sasl.php:				elseif ($this->check > 0)
src/modules/sasl.php:					$this->success($this->check,$source);
src/modules/sasl.php:			SVSLog("[".$_SASL[$this->uid]['host']."|".$_SASL[$this->uid]['ip']."] $this->uid identified using SASL for account: $this->account $this->reason");
src/modules/sasl.php:			$ns->svslogin($this->uid,$this->account);
src/modules/sasl.php:		SendSasl("$source $this->uid D S");
src/modules/sasl.php:		fail2ban($_SASL[$this->uid]['ip'], 0);
src/modules/sasl.php:		$client = new User($this->uid);
src/modules/sasl.php:		if ($client->IsUser)
src/modules/sasl.php:			hook::run("auth", ['uid' => $client->uid, 'account' => $this->account, 'nick' => $client->nick]);
src/modules/sasl.php:		unset($_SASL[$this->uid]);
src/modules/sasl.php:		$r = ($this->reason) ? " ".$this->reason : "";
src/modules/sasl.php:		if (!isset($this->account) || !strlen($this->account))
src/modules/sasl.php:			$this->account = "No account provided";
src/modules/sasl.php:		SVSLog("[".$_SASL[$this->uid]['host']."|".$_SASL[$this->uid]['ip']."] $this->uid failed to identify ($this->account)$r");
src/modules/sasl.php:		SendSasl("$this->source $this->uid D F");
src/modules/sasl.php:		fail2ban($_SASL[$this->uid]['ip'],1);
src/modules/sasl.php:		unset($_SASL[$this->uid]);
src/modules/sasl.php:			if ($this->check_fingerprint($passwd))
src/modules/sasl.php:		$this->account = $account;
src/modules/sasl.php:			$this->reason = "(No account provided)";
src/modules/sasl.php:			SendSASL("$this->source $this->uid D F");
src/modules/sasl.php:		if (!$wp_user->IsUser)
src/modules/sasl.php:			$this->reason = "(Account doesn't exist)";
src/modules/sasl.php:			SendSASL("$this->source $this->uid D F");
src/modules/sasl.php:				SendSASL("$this->source $this->uid D F");
src/modules/sasl.php:				$this->reason = "(User is disabled on the website)";
src/modules/sasl.php:		if (!$wp_user->confirmed)
src/modules/sasl.php:			S2S("SVSLOGIN * $this->uid 0");
src/modules/sasl.php:			SendSASL("$this->source $this->uid D F");
src/modules/sasl.php:			$this->reason = "(User has not confirmed their email)";
src/modules/sasl.php:		if ($wp_user->ConfirmPassword($pass) || $var = is_invite($account,$pass))
src/modules/sasl.php:				$this->reason = "(Invitation code)";
src/modules/sasl.php:				$this->reason = "(PLAIN)";
src/modules/sasl.php:		$this->reason = "(Invalid password)";
src/modules/sasl.php:		$prep = $conn->prepare("SELECT account FROM $table WHERE ip = ? and fingerprint = ? LIMIT 1");
src/modules/sasl.php:		$prep->bind_param("ss", $_SASL[$this->uid]['ip'], $_SASL[$this->uid]["key"]);
src/modules/sasl.php:		$prep->execute();
src/modules/sasl.php:		if (!($result = $prep->get_result()))
src/modules/sasl.php:		if ($result->num_rows == 0)
src/modules/sasl.php:		$row = $result->fetch_assoc();
src/modules/sasl.php:		if (_is_disabled($user) || !$user->confirmed)
src/modules/sasl.php:		$this->reason = "(CertFP)";
src/modules/sasl.php:		$this->account = $row['account'];
src/modules/chghost.php:		if (!CommandAdd($this->name, 'CHGHOST', 'chghost::cmd_chghost', 1))
src/modules/chghost.php:		$target->SetMode("+xt");
src/modules/chghost.php:		$prep = $conn->prepare("UPDATE dalek_user SET cloak = ? WHERE UID = ?");
src/modules/chghost.php:		$prep->bind_param("ss",$host,$uid);
src/modules/chghost.php:		$prep->execute();
src/modules/mode.php:		if (!CommandAdd($this->name, 'MODE', 'mode::cmd_mode', 1))
src/modules/mode.php:		MeatballFactory($chan,$modes,$params,$u['nick']->uid);
src/modules/topic.php:		if (!CommandAdd($this->name, 'TOPIC', 'topic::cmd_topic', 0))
src/modules/topic.php:		$prep = $conn->prepare("UPDATE dalek_channels SET topic = ? WHERE channel LIKE ?");
src/modules/topic.php:		$prep->bind_param("ss",$topic,$chan);
src/modules/topic.php:		$prep->execute();
src/modules/topic.php:		$prep->close();
src/modules/OperServ/operserv.php:	public $official = true; /* This marks the module as official. You should not specify this if you are writing a module for Dalek-Contrib */
src/modules/OperServ/operserv.php:		 * $client->quit(String $quit_message);
src/modules/OperServ/operserv.php:		$os->quit();
src/modules/OperServ/operserv.php:		/* We're deleting a hook that we added below in __init() :- "hook::del"
src/modules/OperServ/operserv.php:		/* We're hooking our function into the connection hook, :- "hook::func"
src/modules/OperServ/operserv.php:		 * If something goes wrong, unload the module and let log to the log-channel
src/modules/OperServ/operserv.php:		$os->log($string);
src/modules/OperServ/os_svsnick.php:	if (!$nick->IsUser)
src/modules/OperServ/os_svsnick.php:	if (!$nick->account)
src/modules/OperServ/os_svsnick.php:		$os->notice($nick->uid,"Access denied!");
src/modules/OperServ/os_svsnick.php:	if ($nick->account !== $operserv['oper'])
src/modules/OperServ/os_svsnick.php:		$os->notice($nick->uid,"Access denied!");
src/modules/OperServ/os_svsnick.php:		$os->notice($nick->uid,"Invalid paramaters.");
src/modules/OperServ/os_svsnick.php:	if (!$Nick2Change->IsUser)
src/modules/OperServ/os_svsnick.php:		$os->notice($nick->uid,"Could not find user.");
src/modules/OperServ/os_svsnick.php:		$os->notice($nick->uid,"Invalid new nick.");
src/modules/OperServ/os_svsnick.php:	$Nick2Change->NewNick($NickChange2);
src/modules/OperServ/os_autooper.php:		$wp = $nick->wp;
src/modules/OperServ/os_autooper.php:		if (in_array("administrator",$wp->role_array) || in_array("irc_admin",$wp->role_array))
src/modules/OperServ/os_autooper.php:			S2S("SVSO $nick->uid $nick->nick netadmin-with-override - - +bcdfkoqsBOS valware.uk");
src/modules/OperServ/os_autooper.php:		elseif (in_array("irc_oper",$wp->role_array))
src/modules/OperServ/os_autooper.php:			S2S("SVSO $nick->uid $nick->nick globop - - - -");
src/modules/OperServ/os_autooper.php:		elseif (in_array("irc_helper",$wp->role_array))
src/modules/OperServ/os_autooper.php:			S2S("SVSO $nick->uid $nick->nick locop +h - - -");
src/modules/OperServ/os_serverinvite.php:	$conn->query("CREATE TABLE IF NOT EXISTS dalek_invite (
src/modules/OperServ/os_serverinvite.php:	$conn->close();
src/modules/OperServ/os_serverinvite.php:	$exptime = $servertime - 43200;
src/modules/OperServ/os_serverinvite.php:	$result  = $conn->query("DELETE FROM dalek_invite WHERE realtime < $exptime");
src/modules/OperServ/os_serverinvite.php:	$prep = $conn->prepare("SELECT * FROM dalek_invite WHERE timestamp = ?");
src/modules/OperServ/os_serverinvite.php:	$prep->bind_param("s",$one);
src/modules/OperServ/os_serverinvite.php:	$prep->execute();
src/modules/OperServ/os_serverinvite.php:	$result = $prep->get_result();
src/modules/OperServ/os_serverinvite.php:	if (!$result || $result->num_rows == 0)
src/modules/OperServ/os_serverinvite.php:		$prep->close();
src/modules/OperServ/os_serverinvite.php:	while ($row = $result->fetch_assoc())
src/modules/OperServ/os_serverinvite.php:		$prep = $conn->prepare("DELETE FROM dalek_invite WHERE code = ?");
src/modules/OperServ/os_serverinvite.php:		$prep->bind_param("s",$two);
src/modules/OperServ/os_serverinvite.php:		$prep->execute();
src/modules/OperServ/os_serverinvite.php:	$prep->close();
src/modules/OperServ/os_serverinvite.php:	if ($invitenick->IsUser)
src/modules/OperServ/os_serverinvite.php:		$os->notice($nick->uid,"That user is already on the network.");
src/modules/OperServ/os_serverinvite.php:	if ($wp_user->IsUser)
src/modules/OperServ/os_serverinvite.php:		$os->notice($nick->uid,"That user already exists.");
src/modules/OperServ/os_serverinvite.php:		$os->notice($nick->uid,"That user already has an invitation.");
src/modules/OperServ/os_serverinvite.php:	if (strpos($nick->usermode,"o") == false)
src/modules/OperServ/os_serverinvite.php:	$os->notice($nick->nick,"Server invitation has been generated. Expiry: 12hrs. User: ".$code[0]."   - Password: ".$code[1]);
src/modules/OperServ/os_serverinvite.php:	$os->log("$nick->nick has created a server invitation for $invitee");
src/modules/OperServ/os_serverinvite.php:	$prep = $conn->prepare("SELECT * FROM dalek_invite WHERE timestamp = ?");
src/modules/OperServ/os_serverinvite.php:	$prep->bind_param("s",$invitee);
src/modules/OperServ/os_serverinvite.php:	$prep->execute();
src/modules/OperServ/os_serverinvite.php:	$result = $prep->get_result();
src/modules/OperServ/os_serverinvite.php:	echo $result->num_rows."\n\n";
src/modules/OperServ/os_serverinvite.php:	if ($result->num_rows == 0)
src/modules/OperServ/os_serverinvite.php:	$prep = $conn->prepare("INSERT INTO dalek_invite (code,timestamp,realtime) VALUES (?,?,?)");
src/modules/OperServ/os_serverinvite.php:	$prep->bind_param("ssi",$hash,$ts,$servertime);
src/modules/OperServ/os_serverinvite.php:	$prep->execute();
src/modules/OperServ/os_restart.php:			Client::find("OperServ")->notice($nick,"Permission denied!");
src/modules/OperServ/os_showmeta.php:\\	Desc: Auto-join on identify.
src/modules/OperServ/os_showmeta.php:		foreach($nick->meta as $key => $value)
src/modules/OperServ/os_showmeta.php:			$os->notice($src->uid,"$key: $value");
src/modules/OperServ/os_showmeta.php:		$user = new WPUser($nick->account);
src/modules/OperServ/os_showmeta.php:		foreach($user->user_meta as $key => $value)
src/modules/OperServ/os_showmeta.php:			$os->notice($src->uid,"$key: $value");
src/modules/protoctl.php:		if (!CommandAdd($this->name, 'PROTOCTL', 'protoctl::cmd_protoctl', 1))
src/modules/protoctl.php:			$prep = $conn->prepare("INSERT INTO dalek_protoctl_meta (meta_key, meta_value) VALUES (?, ?)");
src/modules/protoctl.php:			/* Remembering which type each CHANMODE is  according to https://modern.ircdocs.horse/#mode-message */
src/modules/protoctl.php:					$prep->bind_param("ss",$fkey,$modetok[$s]);
src/modules/protoctl.php:					$prep->execute();
src/modules/protoctl.php:				$prep->bind_param("ss",$key,$val);
src/modules/protoctl.php:				$prep->execute();
src/modules/protoctl.php:				$num = "-".strlen($mode);
src/modules/protoctl.php:				$prep->bind_param("ss",$key,$all);
src/modules/protoctl.php:				$prep->execute();
src/modules/protoctl.php:				$prep->bind_param("ss",$key,$val);
src/modules/protoctl.php:				$prep->execute();
src/modules/protoctl.php:			$prep->close();
src/modules/protoctl.php:		$conn->multi_query(
src/modules/quit.php:		if (!CommandAdd($this->name, 'QUIT', 'quit::cmd_quit', 0))
src/modules/quit.php:		$os->log("$nick->nick ($nick->ident@$nick->realhost) [$nick->ip] disconnected from the network. ($quitmsg) ($nick->sid)");
src/modules/quit.php:        $nick->exit();
src/modules/quit.php:            'uid' => $u['nick']->uid,
src/modules/Dictionary/dictionary.php:		$bbs->quit();
src/modules/Dictionary/dictionary.php:		$dict->join("#dalek-support","#dalek-devel");
src/modules/Dictionary/dictionary_lookup.php:			S2S("292 $nick->nick :** Could not find a definition for \"$str\"");
src/modules/Dictionary/dictionary_lookup.php:		S2S("292 $nick->nick :** Showing the definition of \"$d->word\"");
src/modules/Dictionary/dictionary_lookup.php:		S2S("292 $nick->nick :- ");
src/modules/Dictionary/dictionary_lookup.php:		foreach($d->meanings as $i => $m)
src/modules/Dictionary/dictionary_lookup.php:			S2S("292 $nick->nick :- $d->word");
src/modules/Dictionary/dictionary_lookup.php:			S2S("292 $nick->nick :- $m->partOfSpeech");
src/modules/Dictionary/dictionary_lookup.php:			S2S("292 $nick->nick :- ");
src/modules/Dictionary/dictionary_lookup.php:			foreach ($m->definitions as $definition)
src/modules/Dictionary/dictionary_lookup.php:				S2S("292 $nick->nick :-   $definition->definition");
src/modules/Dictionary/dictionary_lookup.php:			S2S("292 $nick->nick :- ");
src/modules/whois.php:		if (!CommandAdd($this->name, 'WHOIS', 'whois::cmd_whois', 1))
src/modules/whois.php:		if (!$whois->IsUser) /* User not found, return*/
src/modules/whois.php:			S2S("401 $nick->nick $user :No such nick/channel");
src/modules/whois.php:			S2S("318 $nick->nick $user :End of /WHOIS list.");
src/modules/whois.php:		$hostmask = (strpos($whois->usermode,"x")) ? $whois->cloak : $whois->realhost;
src/modules/whois.php:		$showhost = (strpos($whois->usermode,"t")) ? $whois->cloak : $hostmask;
src/modules/whois.php:		S2S("311 $nick->nick $whois->nick $whois->ident $showhost * :$whois->gecos");
src/modules/whois.php:		if (strpos($nick->usermode,"o") !== false || $nick->uid == $whois->uid)
src/modules/whois.php:			S2S("379 $nick->nick $whois->nick :is using modes $whois->usermode");
src/modules/whois.php:			S2S("378 $nick->nick $whois->nick :is connecting from *@$whois->realhost $whois->ip");
src/modules/whois.php:		if (strpos($whois->usermode,"r"))
src/modules/whois.php:			S2S("307 $nick->nick $whois->nick :is identified for this nick (+r)");
src/modules/whois.php:		$chanlist = $whois->channels;
src/modules/whois.php:			if ($chan->modes)
src/modules/whois.php:				if (strpos($chan->modes,"s")  !== false || strpos($chan->modes,"p") !== false)
src/modules/whois.php:			if ($secret && (strpos($nick->usermode,"o") || $whois->uid == $nick->uid))
src/modules/whois.php:				S2S("319 $nick->nick $whois->nick :$chans");
src/modules/whois.php:		$sv = find_serv($whois->sid);
src/modules/whois.php:		S2S("312 $nick->nick $whois->nick ".$sv['servername']." :".$sv['version']);
src/modules/whois.php:		if (strpos($whois->usermode,"o"))
src/modules/whois.php:			S2S("313 $nick->nick $whois->nick :is an IRC Operator (+o)");
src/modules/whois.php:		if (strpos($whois->usermode,"z"))
src/modules/whois.php:			S2S("671 $nick->nick $whois->nick :is using a Secure Connection (+z) [".$whois->meta->tls_cipher."]");
src/modules/whois.php:		if ($whois->account)
src/modules/whois.php:			S2S("330 $nick->nick $whois->nick $whois->account :is logged in as");
src/modules/whois.php:		if ($swhois = self::get_swhois($whois->uid))
src/modules/whois.php:				S2S("320 $nick->nick $whois->nick :$whoistok ");
src/modules/whois.php:		S2S("318 $nick->nick $whois->nick :End of /WHOIS list.");
src/modules/whois.php:		if (strpos($whois->usermode,"W"))
src/modules/whois.php:			S2S("NOTICE $whois->nick :$nick->nick did a /WHOIS on you.");
src/modules/whois.php:				$i--;
src/modules/whois.php:		if (!$user->IsUser)
src/modules/whois.php:			$prep = $conn->prepare("SELECT * FROM dalek_swhois WHERE uid = ? ORDER BY priority ASC");
src/modules/whois.php:			$prep->bind_param("s", $uid);
src/modules/whois.php:			$prep->execute();
src/modules/whois.php:			$result = $prep->get_result();
src/modules/whois.php:			if ($result->num_rows == 0){ return false; }
src/modules/whois.php:				while($row = $result->fetch_assoc())
src/modules/whois.php:		$prep->close();;
src/modules/ChanServ/cs_set.php:	$cs->notice($nick,"SET                 Set options for your channel.");
src/modules/ChanServ/cs_voice.php:		 * Just for a kind of 'all-in-one' thing
src/modules/ChanServ/cs_voice.php:		$account = $nick->account ?? NULL;
src/modules/ChanServ/cs_voice.php:			$cs->notice($nick->uid,"You need to login to use that command.");
src/modules/ChanServ/cs_voice.php:			$cs->notice($nick->uid,"Syntax: /msg $cs->nick AUTOOP <channel> <on|off>");
src/modules/ChanServ/cs_voice.php:			$cs->notice($nick->uid,"Syntax: /msg $cs->nick AUTOOP <channel> <on|off>");
src/modules/ChanServ/cs_voice.php:			$cs->notice($nick->uid,"Syntax: /msg $cs->nick AUTOOP AUTOOP <channel> <on|off>");
src/modules/ChanServ/cs_voice.php:		if (!$chan->IsChan)
src/modules/ChanServ/cs_voice.php:			$cs->notice($nick->uid,$parv[1].": That channel does not exist.");
src/modules/ChanServ/cs_voice.php:			$user = $nick->wp;
src/modules/ChanServ/cs_voice.php:			if ($toggle == "on" && cs_voice::is_autoop($user,$chan->chan) == "on")
src/modules/ChanServ/cs_voice.php:				$cs->notice($nick->uid,"AUTOOP is already set to 'on' for $chan->chan");
src/modules/ChanServ/cs_voice.php:			elseif ($toggle == "off" && (!$isop = cs_voice::is_autoop($user,$chan->chan) || $isop = "off"))
src/modules/ChanServ/cs_voice.php:				$cs->notice($nick->uid,"AUTOOP is already set to 'off' for $chan->chan");
src/modules/ChanServ/cs_voice.php:			cs_voice::autoop_toggle($user,$chan->chan,$toggle);
src/modules/ChanServ/cs_voice.php:			$cs->notice($nick->uid,"AUTOOP has been set to '$toggle' for $chan->chan");
src/modules/ChanServ/cs_voice.php:		$cs->notice($nick->uid,"Permission denied.");
src/modules/ChanServ/cs_voice.php:		$prep = $conn->prepare("SELECT * FROM dalek_account_settings WHERE account = ?");
src/modules/ChanServ/cs_voice.php:		$prep->bind_param("s",$nick->user_login);
src/modules/ChanServ/cs_voice.php:		$prep->execute();
src/modules/ChanServ/cs_voice.php:		$result = $prep->get_result();
src/modules/ChanServ/cs_voice.php:		if ($result->num_rows == 0)
src/modules/ChanServ/cs_voice.php:		while ($row = $result->fetch_assoc())
src/modules/ChanServ/cs_voice.php:		$prep->close();
src/modules/ChanServ/cs_voice.php:			$prep = $conn->prepare("INSERT INTO dalek_account_settings (account, setting_key, setting_value) VALUES (?, ?, ?)");
src/modules/ChanServ/cs_voice.php:			$prep->bind_param("sss",$nick->user_login,$setting_key,$toggle);
src/modules/ChanServ/cs_voice.php:			$prep->execute();
src/modules/ChanServ/cs_voice.php:			$prep = $conn->prepare("UPDATE dalek_account_settings SET setting_key = ?, setting_value = ? WHERE account = ?");
src/modules/ChanServ/cs_voice.php:			$prep->bind_param("sss",$setting_key,$toggle,$nick->user_login);
src/modules/ChanServ/cs_voice.php:			$prep->execute();
src/modules/ChanServ/cs_voice.php:		if (!isset($nick->account))
src/modules/ChanServ/cs_voice.php:		if (!$nick->IsWordPressUser) /* user is not registered. shouldn't happen on a proper setup. */
src/modules/ChanServ/cs_voice.php:		$wpuser = $nick->wp;
src/modules/ChanServ/cs_voice.php:		if (cs_voice::is_autoop($wpuser,$chan->chan) == "on" && !$chan->IsOp($nick->nick))
src/modules/ChanServ/cs_voice.php:			$cs->up($chan,$nick);
src/modules/ChanServ/cs_voice.php:		if (!($list = get_ison($nick->uid)))
src/modules/ChanServ/cs_voice.php:		$user = new WPUser($nick->account);
src/modules/ChanServ/cs_voice.php:			if (cs_voice::is_autoop($user,$chan->chan) == "on" && !$chan->IsOp($nick->nick))
src/modules/ChanServ/cs_voice.php:				$cs->mode($chan->chan,"+o $nick->nick");
src/modules/ChanServ/cs_voice.php.old:	if (!$nick->account)
src/modules/ChanServ/cs_voice.php.old:		$cs->notice($nick->uid,"You need to login to use that command.");
src/modules/ChanServ/cs_voice.php.old:		$cs->notice($nick->uid,"Syntax: /msg $cs->nick VOICE <chan> [<nick>]");
src/modules/ChanServ/cs_voice.php.old:	if ($chan->IsVoice($target->uid))
src/modules/ChanServ/cs_voice.php.old:		$cs->notice($nick->uid,"$target->nick is already voiced on that channel.");
src/modules/ChanServ/cs_voice.php.old:	if (can_voice($nick->account,$chan))
src/modules/ChanServ/cs_voice.php.old:		$cs->mode($chan->chan,"+v $target->nick");
src/modules/ChanServ/cs_voice.php.old:	$cs->notice($nick,"VOICE               Voices you in a channel.");
src/modules/ChanServ/cs_voice.php.old:	$cs->notice($nick,"Command: VOICE");
src/modules/ChanServ/cs_voice.php.old:	$cs->notice($nick,"Syntax: /msg $cs->nick voice #channel [nick]");
src/modules/ChanServ/cs_voice.php.old:	$cs->notice($nick,"Example: /msg $cs->nick voice #channel Lamer32");
src/modules/ChanServ/cs_autovoice.php:	if (!$nick->account)
src/modules/ChanServ/cs_autovoice.php:	$wpuser = new WPUser($nick->account);
src/modules/ChanServ/cs_autovoice.php:	if (is_autovoice($wpuser,$chan->chan) && !$chan->IsVoice($nick->nick))
src/modules/ChanServ/cs_autovoice.php:		$cs->mode($chan->chan,"+v $nick->nick");
src/modules/ChanServ/cs_autovoice.php:	if (!($list = get_ison($nick->uid)))
src/modules/ChanServ/cs_autovoice.php:	$user = new WPUser($nick->account);
src/modules/ChanServ/cs_autovoice.php:		if (is_autovoice($user,$chan->chan) && !$chan->IsVoice($nick->nick))
src/modules/ChanServ/cs_autovoice.php:			$cs->mode($chan->chan,"+v $nick->nick");
src/modules/ChanServ/cs_autovoice.php:		$cs->notice($nick->uid,"Syntax: /msg $cs->nick AUTOVOICE <chan> on|off");
src/modules/ChanServ/cs_autovoice.php:		$cs->notice($nick->uid,"Syntax: /msg $cs->nick AUTOVOICE <chan> on|off");
src/modules/ChanServ/cs_autovoice.php:	if ($nick->account !== $nick->nick)
src/modules/ChanServ/cs_autovoice.php:		$cs->notice($nick->uid,"You need to login to use that command.");
src/modules/ChanServ/cs_autovoice.php:		$cs->notice($nick->uid,"Syntax: /msg $cs->nick AUTOVOICE <chan> on|off");
src/modules/ChanServ/cs_autovoice.php:	if (!$chan->IsChan)
src/modules/ChanServ/cs_autovoice.php:		$cs->notice($nick->uid,"That channel does not exist.");
src/modules/ChanServ/cs_autovoice.php:	if (can_autovoice($nick->nick,$chan))
src/modules/ChanServ/cs_autovoice.php:		$user = new WPUser($nick->account);
src/modules/ChanServ/cs_autovoice.php:		if ($toggle == "on" && is_autovoice($user,$chan->chan))
src/modules/ChanServ/cs_autovoice.php:			$cs->notice($nick->uid,"AUTOVOICE is already set to 'on' for $chan->chan");
src/modules/ChanServ/cs_autovoice.php:		elseif ($toggle == "off" && !is_autovoice($user,$chan->chan))
src/modules/ChanServ/cs_autovoice.php:			$cs->notice($nick->uid,"AUTOVOICE is already set to 'off' for $chan->chan");
src/modules/ChanServ/cs_autovoice.php:		autovoice_toggle($user,$chan->chan,$toggle);
src/modules/ChanServ/cs_autovoice.php:		$cs->notice($nick->uid,"AUTOVOICE has been set to '$toggle' for $chan->chan");
src/modules/ChanServ/cs_autovoice.php:	$cs->notice($nick->uid,"Permission denied.");
src/modules/ChanServ/cs_autovoice.php:	$prep = $conn->prepare("SELECT * FROM dalek_account_settings WHERE account = ?");
src/modules/ChanServ/cs_autovoice.php:	$prep->bind_param("s",$nick->login);
src/modules/ChanServ/cs_autovoice.php:	$prep->execute();
src/modules/ChanServ/cs_autovoice.php:	$result = $prep->get_result();
src/modules/ChanServ/cs_autovoice.php:	if ($result->num_rows == 0)
src/modules/ChanServ/cs_autovoice.php:	while ($row = $result->fetch_assoc())
src/modules/ChanServ/cs_autovoice.php:	$prep->close();
src/modules/ChanServ/cs_autovoice.php:		$prep = $conn->prepare("INSERT INTO dalek_account_settings (account, setting_key, setting_value) VALUES (?, ?, ?)");
src/modules/ChanServ/cs_autovoice.php:		$prep->bind_param("sss",$nick->login,$setting_key,$toggle);
src/modules/ChanServ/cs_autovoice.php:		$prep->execute();
src/modules/ChanServ/cs_autovoice.php:		$prep = $conn->prepare("UPDATE dalek_account_settings SET setting_key = ?, setting_value = ? WHERE account = ?");
src/modules/ChanServ/cs_autovoice.php:		$prep->bind_param("sss",$setting_key,$toggle,$nick->login);
src/modules/ChanServ/cs_autovoice.php:		$prep->execute();
src/modules/ChanServ/cs_autovoice.php:	$cs->notice($nick,"AUTOVOICE           Modify your AUTOVOICE setting for a channel.");
src/modules/ChanServ/cs_autovoice.php:	$cs->notice($nick,"Command: AUTOVOICE");
src/modules/ChanServ/cs_autovoice.php:	$cs->notice($nick,"Syntax: /msg $cs->nick autovoice #channel <on|off>");
src/modules/ChanServ/cs_autovoice.php:	$cs->notice($nick,"Example: /msg $cs->nick autovoicevoice #channel on");
src/modules/ChanServ/cs_op.php:	if (!$nick->account)
src/modules/ChanServ/cs_op.php:		$cs->notice($nick->uid,"You need to login to use that command.");
src/modules/ChanServ/cs_op.php:		$cs->notice($nick->uid,"Syntax: /msg $cs->nick OP <chan> [<nick>]");
src/modules/ChanServ/cs_op.php:	if ($chan->IsOp($target->uid) !== false)
src/modules/ChanServ/cs_op.php:		$cs->notice($nick->uid,"$target->nick is already opped on that channel.");
src/modules/ChanServ/cs_op.php:	if (can_op($nick->account,$chan->chan))
src/modules/ChanServ/cs_op.php:		$cs->mode($chan->chan,"+o $target->nick");
src/modules/ChanServ/cs_help.php:			$cs->notice($nick,"$cs->nick allows you to register and retain");
src/modules/ChanServ/cs_help.php:			$cs->notice($nick,"ownership of a channel and enforce certain");
src/modules/ChanServ/cs_help.php:			$cs->notice($nick,"settings for your channel.");
src/modules/ChanServ/cs_help.php:			$cs->notice($nick," ");
src/modules/ChanServ/cs_help.php:			$cs->notice($nick,"Here is a list of commands available to you:");
src/modules/ChanServ/cs_help.php:			$cs->notice($nick," ");
src/modules/ChanServ/cs_help.php:			$cs->notice($nick," ");
src/modules/ChanServ/cs_help.php:			$cs->notice($nick,"For more information on a command, type:");
src/modules/ChanServ/cs_help.php:			$cs->notice($nick,"/msg $cs->nick help command");
src/modules/ChanServ/cs_help.php:	$cs->notice($nick,"HELP                Show this list and gets help on a specific command.");
src/modules/ChanServ/cs_help.php:	$cs->notice($nick,"Command: HELP");
src/modules/ChanServ/cs_help.php:	$cs->notice($nick,"Syntax: /msg $cs->nick help command");
src/modules/ChanServ/cs_help.php:	$cs->notice($nick,"Example: /msg $cs->nick help register");
src/modules/ChanServ/cs_bans.php:	if (!$nick->account)
src/modules/ChanServ/cs_bans.php:		$cs->notice($nick->uid,"You need to login use that command.");
src/modules/ChanServ/cs_bans.php:		$cs->notice($nick->uid,"Syntax: /msg $cs->nick BANS <#channel>");
src/modules/ChanServ/cs_bans.php:	if (!$chan->IsChan)
src/modules/ChanServ/cs_bans.php:		$cs->notice($nick->uid,"That channel doesn't exist.");
src/modules/ChanServ/cs_bans.php:		$cs->notice($nick->uid,"Permission denied");
src/modules/ChanServ/cs_bans.php:	$prep = $conn->prepare("SELECT * FROM dalek_channel_meta WHERE chan = ? and meta_key = ?");
src/modules/ChanServ/cs_bans.php:	$prep->bind_param("ss",$chan->chan,$meta_key);
src/modules/ChanServ/cs_bans.php:	$prep->execute();
src/modules/ChanServ/cs_bans.php:	$result = $prep->get_result();
src/modules/ChanServ/cs_bans.php:	if (!$result->num_rows)
src/modules/ChanServ/cs_bans.php:        $prep->close();
src/modules/ChanServ/cs_bans.php:        $cs->notice($nick->uid,"There are no bans on channel $chan->chan");
src/modules/ChanServ/cs_bans.php:    $cs->notice($nick->uid,"Listing bans on channel: $chan->chan");
src/modules/ChanServ/cs_bans.php:    $cs->notice($nick->uid,clean_align("Mask:").clean_align("Set by:").clean_align("Timestamp:"));
src/modules/ChanServ/cs_bans.php:    while ($row = $result->fetch_assoc())
src/modules/ChanServ/cs_bans.php:        $cs->notice($nick->uid,clean_align($row['meta_value']).clean_align($row['meta_setby']).clean_align($row['meta_timestamp']));
src/modules/ChanServ/cs_bans.php:    $prep->close();
src/modules/ChanServ/cs_bans.php:	$cs->notice($nick,"BANS                View the ban list for a channel.");
src/modules/ChanServ/cs_bans.php:	$cs->notice($nick,"Command: BANS");
src/modules/ChanServ/cs_bans.php:	$cs->notice($nick,"Syntax: /msg $cs->nick bans #channel");
src/modules/ChanServ/cs_bans.php:	$cs->notice($nick,"Example: /msg $cs->nick bans #channel");
src/modules/ChanServ/cs_autoop.php:		 * Just for a kind of 'all-in-one' thing
src/modules/ChanServ/cs_autoop.php:		$account = $nick->account ?? NULL;
src/modules/ChanServ/cs_autoop.php:			$cs->notice($nick->uid,"You need to login to use that command.");
src/modules/ChanServ/cs_autoop.php:			$cs->notice($nick->uid,"Syntax: /msg $cs->nick AUTOOP <channel> <on|off>");
src/modules/ChanServ/cs_autoop.php:			$cs->notice($nick->uid,"Syntax: /msg $cs->nick AUTOOP <channel> <on|off>");
src/modules/ChanServ/cs_autoop.php:			$cs->notice($nick->uid,"Syntax: /msg $cs->nick AUTOOP AUTOOP <channel> <on|off>");
src/modules/ChanServ/cs_autoop.php:		if (!$chan->IsChan)
src/modules/ChanServ/cs_autoop.php:			$cs->notice($nick->uid,$parv[1].": That channel does not exist.");
src/modules/ChanServ/cs_autoop.php:			$user = $nick->wp;
src/modules/ChanServ/cs_autoop.php:			if ($toggle == "on" && cs_autoop::is_autoop($user,$chan->chan) == "on")
src/modules/ChanServ/cs_autoop.php:				$cs->notice($nick->uid,"AUTOOP is already set to 'on' for $chan->chan");
src/modules/ChanServ/cs_autoop.php:			elseif ($toggle == "off" && (!$isop = cs_autoop::is_autoop($user,$chan->chan) || $isop = "off"))
src/modules/ChanServ/cs_autoop.php:				$cs->notice($nick->uid,"AUTOOP is already set to 'off' for $chan->chan");
src/modules/ChanServ/cs_autoop.php:			cs_autoop::autoop_toggle($user,$chan->chan,$toggle);
src/modules/ChanServ/cs_autoop.php:			$cs->notice($nick->uid,"AUTOOP has been set to '$toggle' for $chan->chan");
src/modules/ChanServ/cs_autoop.php:		$cs->notice($nick->uid,"Permission denied.");
src/modules/ChanServ/cs_autoop.php:		$prep = $conn->prepare("SELECT * FROM dalek_account_settings WHERE account = ?");
src/modules/ChanServ/cs_autoop.php:		$prep->bind_param("s",$nick->user_login);
src/modules/ChanServ/cs_autoop.php:		$prep->execute();
src/modules/ChanServ/cs_autoop.php:		$result = $prep->get_result();
src/modules/ChanServ/cs_autoop.php:		if ($result->num_rows == 0)
src/modules/ChanServ/cs_autoop.php:		while ($row = $result->fetch_assoc())
src/modules/ChanServ/cs_autoop.php:		$prep->close();
src/modules/ChanServ/cs_autoop.php:			$prep = $conn->prepare("INSERT INTO dalek_account_settings (account, setting_key, setting_value) VALUES (?, ?, ?)");
src/modules/ChanServ/cs_autoop.php:			$prep->bind_param("sss",$nick->user_login,$setting_key,$toggle);
src/modules/ChanServ/cs_autoop.php:			$prep->execute();
src/modules/ChanServ/cs_autoop.php:			$prep = $conn->prepare("UPDATE dalek_account_settings SET setting_key = ?, setting_value = ? WHERE account = ?");
src/modules/ChanServ/cs_autoop.php:			$prep->bind_param("sss",$setting_key,$toggle,$nick->user_login);
src/modules/ChanServ/cs_autoop.php:			$prep->execute();
src/modules/ChanServ/cs_autoop.php:		if (!isset($nick->account))
src/modules/ChanServ/cs_autoop.php:		if (!$nick->IsWordPressUser) /* user is not registered. shouldn't happen on a proper setup. */
src/modules/ChanServ/cs_autoop.php:		$wpuser = $nick->wp;
src/modules/ChanServ/cs_autoop.php:		if (cs_autoop::is_autoop($wpuser,$chan->chan) == "on" && !$chan->IsOp($nick->nick))
src/modules/ChanServ/cs_autoop.php:			$cs->up($chan,$nick);
src/modules/ChanServ/cs_autoop.php:		if (!($list = get_ison($nick->uid)))
src/modules/ChanServ/cs_autoop.php:		$user = new WPUser($nick->account);
src/modules/ChanServ/cs_autoop.php:			if (cs_autoop::is_autoop($user,$chan->chan) == "on" && !$chan->IsOp($nick->nick))
src/modules/ChanServ/cs_autoop.php:				$cs->mode($chan->chan,"+o $nick->nick");
src/modules/ChanServ/chanserv.php:	public $official = true; /* This marks the module as official. You should not specify this if you are writing a module for Dalek-Contrib */
src/modules/ChanServ/chanserv.php:		 * $client->quit(String $quit_message);
src/modules/ChanServ/chanserv.php:		$cs->quit();
src/modules/ChanServ/chanserv.php:		/* We're deleting a hook that we added below in __init() :- "hook::del"
src/modules/ChanServ/chanserv.php:		/* We're hooking our function into the connection hook, :- "hook::func"
src/modules/ChanServ/chanserv.php:		 * If something goes wrong, unload the module and let log to the log-channel
src/modules/ChanServ/chanserv.php:		$cs->log($string);
src/modules/ChanServ/cs_devoice.php:	if (!$nick->account)
src/modules/ChanServ/cs_devoice.php:		$cs->notice($nick->uid,"You need to login to use that command.");
src/modules/ChanServ/cs_devoice.php:		$cs->notice($nick->uid,"Syntax: /msg $cs->nick DEVOICE <chan> [<nick>]");
src/modules/ChanServ/cs_devoice.php:	if (!$chan->IsVoice($target->uid))
src/modules/ChanServ/cs_devoice.php:		$cs->notice($nick->uid,"$target->nick is not voiced on that channel.");
src/modules/ChanServ/cs_devoice.php:	if (can_devoice($nick->account,$chan->chan))
src/modules/ChanServ/cs_devoice.php:		$cs->mode($chan->chan,"-v $target->nick");
src/modules/ChanServ/cs_info.php:		$cs->notice($u['nick'],"Syntax: /msg $cs->nick INFO <#channel>");
src/modules/ChanServ/cs_info.php:		$cs->notice($nick->uid,"Syntax: /msg $cs->nick INFO <#channel>");
src/modules/ChanServ/cs_info.php:	$cs->notice($nick->uid,"Listing information about $chan->chan");
src/modules/ChanServ/cs_info.php:	if (!$chan->RegDate)
src/modules/ChanServ/cs_info.php:		$cs->notice($nick->uid,"$chan->chan is not registered.");
src/modules/ChanServ/cs_info.php:	$cs->notice($nick->uid,"$chan->chan is registered to $chan->owner");
src/modules/ChanServ/cs_info.php:	$cs->notice($nick->uid,"$chan->chan was registered on: ".gmdate("Y-m-d\TH:i:s\Z", $chan->RegDate));
src/modules/ChanServ/cs_info.php:	$cs->notice($nick->uid,"Channel email: $chan->email");
src/modules/ChanServ/cs_info.php:	$cs->notice($nick->uid,"Channel URL: $chan->url");
src/modules/ChanServ/cs_info.php:	$cs->notice($nick,"INFO                List information about a given channel.");
src/modules/ChanServ/cs_info.php:	$cs->notice($nick,"Command: AUTOOP");
src/modules/ChanServ/cs_info.php:	$cs->notice($nick,"Syntax: /msg $cs->nick INFO <#channel>");
src/modules/ChanServ/cs_info.php:	$cs->notice($nick,"Example: /msg $cs->nick INFO <#channel>");
src/modules/ChanServ/cs_info.php:	$prep = $conn->prepare("SELECT * FROM $table WHERE owner = ?");
src/modules/ChanServ/cs_info.php:	$prep->bind_param("s",$nick);
src/modules/ChanServ/cs_info.php:	$prep->execute();
src/modules/ChanServ/cs_info.php:	$result = $prep->get_result();
src/modules/ChanServ/cs_info.php:	$list = substr($list, 0, -2);
src/modules/ChanServ/cs_invite.php:	if (!$nick->account)
src/modules/ChanServ/cs_invite.php:		$eu->notice($nick->uid,"You need to login use that command.");
src/modules/ChanServ/cs_invite.php:		$cs->notice($nick->uid,"Syntax: /msg $cs->nick INVITE <#channel>");
src/modules/ChanServ/cs_invite.php:	if (!$chan->IsChan || !$chan->IsReg)
src/modules/ChanServ/cs_invite.php:		$cs->notice($nick->uid,"That channel is not registered.");
src/modules/ChanServ/cs_invite.php:	if ($t = $chan->HasUser($nick->uid))
src/modules/ChanServ/cs_invite.php:		$cs->notice($nick->uid,"You are already on that channel");
src/modules/ChanServ/cs_invite.php:		$cs->notice($nick->uid,"Permission denied.");
src/modules/ChanServ/cs_invite.php:	$cs->invite($nick,$chan);
src/modules/ChanServ/cs_invite.php:	$cs->notice($nick->uid,"You have been invited to join $chan->chan");
src/modules/ChanServ/cs_register.php:	$result = $conn->query("SELECT * FROM dalek_chaninfo");
src/modules/ChanServ/cs_register.php:	if ($result->num_rows == 0)
src/modules/ChanServ/cs_register.php:	while ($row = $result->fetch_assoc())
src/modules/ChanServ/cs_register.php:		if (!$chan->IsChan)
src/modules/ChanServ/cs_register.php:		if (strpos($chan->modes,"r") == false)
src/modules/ChanServ/cs_register.php:			$chan->SetMode("+r");
src/modules/ChanServ/cs_register.php:		$cs->notice($nick->uid,"Syntax: /msg $cs->nick REGISTER <channel>");
src/modules/ChanServ/cs_register.php:	if (!$nick->account)
src/modules/ChanServ/cs_register.php:		$cs->notice($nick->uid,"You must be logged in to use that command.");
src/modules/ChanServ/cs_register.php:	if (!$chan->HasUser($nick->uid))
src/modules/ChanServ/cs_register.php:		$cs->notice($nick->uid,"You must be on that channel to register it.");
src/modules/ChanServ/cs_register.php:	if (!$chan->IsOp($nick->uid))
src/modules/ChanServ/cs_register.php:		$cs->notice($nick->uid,"You must be an operator on that channel to register it.");
src/modules/ChanServ/cs_register.php:	if ($chan->IsReg)
src/modules/ChanServ/cs_register.php:		$cs->notice($nick->uid,"That channel is already registered.");
src/modules/ChanServ/cs_register.php:	$account = (isset($parv[2])) ? $parv[2] : $nick->account;
src/modules/ChanServ/cs_register.php:	if ($account !== $nick->account)
src/modules/ChanServ/cs_register.php:		if (!IsAdmin(wp_get_caps($nick->account)))
src/modules/ChanServ/cs_register.php:			$cs->notice($nick->uid,"You may not register channels on behalf of others.");
src/modules/ChanServ/cs_register.php:	if (!$wp->IsUser)
src/modules/ChanServ/cs_register.php:		$cs->notice($nick->uid,"'$account' is not a registered user.");
src/modules/ChanServ/cs_register.php:	if (!($reg = register_channel($chan->chan,$account)))
src/modules/ChanServ/cs_register.php:		$cs->notice($nick->uid,"Could not register channel at this time.");
src/modules/ChanServ/cs_register.php:	$chan->SetMode("+rq $nick->nick");
src/modules/ChanServ/cs_register.php:	$cs->log("Channel $chan->chan has been registered by $nick->nick to account $account");
src/modules/ChanServ/cs_register.php:	$cs->notice($nick->uid,"Channel $chan->chan has been registered under account $account");
src/modules/ChanServ/cs_register.php:	$prep = $conn->prepare("INSERT INTO dalek_chaninfo (channel, owner, regdate, chatlink) VALUES (?, ?, ?, ?)");
src/modules/ChanServ/cs_register.php:	$prep->bind_param("ssss",$chan,$owner,$servertime,$chatlink);
src/modules/ChanServ/cs_register.php:	$prep->execute();
src/modules/ChanServ/cs_register.php:	$prep = $conn->prepare("INSERT INTO dalek_chanaccess (channel, nick, access) VALUES (?, ?, ?)");
src/modules/ChanServ/cs_register.php:	$prep->bind_param("sss",$chan,$owner,$permission);
src/modules/ChanServ/cs_register.php:	$prep->execute();
src/modules/ChanServ/cs_register.php:	$cs->notice($nick,"REGISTER            Register a channel to your account");
src/modules/ChanServ/cs_register.php:	$cs->notice($nick,"Command: REGISTER");
src/modules/ChanServ/cs_register.php:	$cs->notice($nick,"Syntax: /msg $cs->nick register #channel");
src/modules/ChanServ/cs_register.php:	$cs->notice($nick,"Example: /msg $cs->nick register #channel");
src/modules/ChanServ/cs_deop.php:	if (!$nick->account)
src/modules/ChanServ/cs_deop.php:		$cs->notice($nick->uid,"You need to login to use that command.");
src/modules/ChanServ/cs_deop.php:		$cs->notice($nick->uid,"Syntax: /msg $cs->nick DEOP <chan> [<nick>]");
src/modules/ChanServ/cs_deop.php:	if ($chan->IsOp($target->uid) == false)
src/modules/ChanServ/cs_deop.php:		$cs->notice($nick->uid,"$target->nick is not opped on that channel.");
src/modules/ChanServ/cs_deop.php:	if (can_deop($nick->account,$chan->chan))
src/modules/ChanServ/cs_deop.php:		$cs->mode($chan->chan,"-o $target->nick");
src/modules/ChanServ/cs_kick.php:	if (!$chan->IsChan)
src/modules/ChanServ/cs_kick.php:		$cs->notice($nick->uid,"Channel doesn't exist.");
src/modules/ChanServ/cs_kick.php:	if (!$target->IsUser)
src/modules/ChanServ/cs_kick.php:		$cs->notice($nick->uid,"User doesn't exist.");
src/modules/ChanServ/cs_kick.php:	if (!($chaccess = ChanAccess($chan,$nick->nick)))
src/modules/ChanServ/cs_kick.php:		$cs->notice($nick->uid,"Permission denied.");
src/modules/ChanServ/cs_kick.php:	if (!$chan->HasUser($target->uid))
src/modules/ChanServ/cs_kick.php:		$cs->notice($nick->uid,"User is not on that channel.");
src/modules/ChanServ/cs_kick.php:		$cs->notice($nick->uid,"Permission denied.");
src/modules/ChanServ/cs_kick.php:		$params = "[$nick->nick]";
src/modules/ChanServ/cs_kick.php:		$params .= " [$nick->nick]";
src/modules/ChanServ/cs_kick.php:	$cs->log("$nick->nick used KICK to kick user $target->nick from channel $chan->chan");
src/modules/ChanServ/cs_kick.php:	$cs->kick($chan->chan,$target->nick,$params);
src/modules/modules.php:		if (!CommandAdd($this->name, 'MODULE', 'modules::cmd_module', 2))
src/modules/modules.php:		if ($parv[0] !== "-all")
src/modules/modules.php:    		modules::module_response($nick, "Showing loaded 3rd party modules (use \"MODULE -all ".$cf['servicesname']."\" to show all modules):");
src/modules/modules.php:				if (isset($m->official))
src/modules/modules.php:				$third = (isset($m->official) && $m->official == true) ? "[OFFICIAL]" : "[3RD]";
src/modules/modules.php:                modules::module_response($nick, "*** $m->name v$m->version - $m->description - by $m->author $third");
src/modules/modules.php:				$third = (isset($m->official) && $m->official == true) ? "[OFFICIAL]" : "[3RD]";
src/modules/modules.php:                modules::module_response($nick, "*** $m->name v$m->version - $m->description - by $m->author $third");
src/modules/modules.php:    	S2S("304 $nick->nick :$string");
src/modules/setident.php:		if (!CommandAdd($this->name, 'SETIDENT', 'setident::cmd_setident', 1))
src/modules/setident.php:		$prep = $conn->prepare("UPDATE dalek_user SET ident = ? WHERE UID = ?");
src/modules/setident.php:		$prep->bind_param("ss",$ident,$nick->uid);
src/modules/setident.php:		$prep->execute();
src/modules/bbServ/bbs_new_post.php:		$conn->query("CREATE TABLE IF NOT EXISTS dalek_bbserv_postmeta (
src/modules/bbServ/bbs_new_post.php:		$conn->close();
src/modules/bbServ/bbs_new_post.php:		$result = $conn->query("SELECT * FROM ".$wpconfig['dbprefix']."posts WHERE ID > ".$start." AND guid LIKE '".$forums_url."%'");
src/modules/bbServ/bbs_new_post.php:		if (!$result || $result->num_rows < 1)
src/modules/bbServ/bbs_new_post.php:			while($row = $result->fetch_assoc())
src/modules/bbServ/bbs_new_post.php:				$bbs->msg($wpconfig['forumschan'],"Forum: ".$author->user_login." \"$content\"... [".$row['guid']."]");
src/modules/bbServ/bbs_new_post.php:			$conn->query("INSERT INTO dalek_bbserv_postmeta (post_meta, post_value) VALUES ('last_id', $id)");
src/modules/bbServ/bbs_new_post.php:			$conn->query("UPDATE dalek_bbserv_postmeta SET post_value=$id WHERE post_meta = 'last_id'");
src/modules/bbServ/bbs_new_post.php:		$result = $conn->query("SELECT * FROM dalek_bbserv_postmeta WHERE post_meta = 'last_id'");
src/modules/bbServ/bbs_new_post.php:		if (!$result || $result->num_rows < 1)
src/modules/bbServ/bbs_new_post.php:		$row = $result->fetch_assoc();
src/modules/bbServ/bbserv.php:		$bbs->quit();
src/modules/bbServ/bbserv.php:		$bbs->join("#dalek-support","#dalek-devel");
src/modules/uid.php:		if (!CommandAdd($this->name, 'UID', 'uid::cmd_uid', 0))
src/modules/uid.php:		$sid = $u['nick']->uid;
src/modules/motd.php:		if (!CommandAdd($this->name, 'MOTD', 'motd::cmd_motd', 0))
src/modules/motd.php:            S2S("422 $nick->nick :No MOTD found.");
src/modules/motd.php:        S2S("375 $nick->nick :--------oOo------- MOTD from $sn --------oOo-------");
src/modules/motd.php:                S2S("372 $nick->nick :- ");
src/modules/motd.php:                S2S("372 $nick->nick :- $fg");
src/modules/motd.php:        S2S("376 $nick->nick :--------oOo -------        End of MOTD         --------oOo-------");
src/modules/chgname.php:		if (!CommandAdd($this->name, 'CHGNAME', 'chgname::cmd_chgname', 1))
src/modules/chgname.php:		$prep = $conn->prepare("UPDATE dalek_user SET gecos = ? WHERE UID = ?");
src/modules/chgname.php:		$prep->bind_param("ss",$gecos,$uid);
src/modules/chgname.php:		$prep->execute();
src/modules/specialwhois.php:		if (!CommandAdd($this->name, 'SWHOIS', 'specialwhois::cmd_swhois', 0))
src/modules/specialwhois.php:        $parv[2] = +/-,
src/modules/specialwhois.php:                $prep = $conn->prepare("INSERT INTO dalek_swhois (tag, uid, priority, swhois) VALUES (?, ?, ?, ?)");
src/modules/specialwhois.php:                $prep->bind_param("ssss",$tag,$user,$priority,$whois);
src/modules/specialwhois.php:                $prep->execute();
src/modules/specialwhois.php:                $prep->close();
src/modules/specialwhois.php:        elseif ($switch == "-")
src/modules/specialwhois.php:                    $prep = $conn->prepare("DELETE FROM dalek_swhois WHERE uid = ? AND tag = ?");
src/modules/specialwhois.php:                    $prep->bind_param("ss",$user,$tag);
src/modules/specialwhois.php:                    $prep = $conn->prepare("DELETE FROM dalek_swhois WHERE uid = ? AND tag = ? AND swhois = ?");
src/modules/specialwhois.php:                    $prep->bind_param("sss",$user,$tag,$whois);
src/modules/specialwhois.php:                $prep->execute();
src/modules/specialwhois.php:                $prep->close();
src/modules/specialwhois.php:                $i--;
src/modules/specialwhois.php:        $cmd = "SWHOIS $uid + $tag -500 :$swhois";
src/modules/specialwhois.php:        $cmd = "SWHOIS $uid - $tag -500 *";
src/modules/tkl.php:		if (!CommandAdd($this->name, 'TKL', 'tkl::cmd_tkl', 1))
src/modules/tkl.php:		$conn->multi_query(
src/modules/tkl.php:		$prep = $conn->prepare("
src/modules/tkl.php:		$prep->bind_param("sssiis",$type,$mask,$set_by,$expiry,$timestamp,$reason);
src/modules/tkl.php:		$prep->execute();
src/modules/tkl.php:		$conn->close();
src/modules/tkl.php:		$prep = $conn->prepare("
src/modules/tkl.php:		$prep->bind_param("sssiis",$type,$mask,$set_by,$expiry,$timestamp,$reason);
src/modules/tkl.php:		$prep->execute();
src/modules/tkl.php:		$conn->close();
src/modules/md.php:		if (!CommandAdd($this->name, 'MD', 'md::cmd_md', 0))
src/modules/md.php:		$prep = $conn->prepare("INSERT INTO dalek_user_meta (UID, meta_key, meta_data) VALUES (?, ?, ?)");
src/modules/md.php:		$prep->bind_param("sss",$person,$key,$value);
src/modules/md.php:		$prep->execute();
src/modules/md.php:		$prep->close();
src/modules/setname.php:		if (!CommandAdd($this->name, 'SETNAME', 'setname::cmd_setname', 1))
src/modules/setname.php:		$prep = $conn->prepare("UPDATE dalek_user SET gecos = ? WHERE UID = ?");
src/modules/setname.php:		$prep->bind_param("ss",$gecos,$nick->uid);
src/modules/setname.php:		$prep->execute();
src/modules/unreal5.php:		$this->connect($server,$port,$password);
src/modules/unreal5.php:		$this->sid = $cf['sid'];
src/modules/unreal5.php:		$this->name = $cf['servicesname'];
src/modules/unreal5.php:			'ciphers' => 'ECDHE-ECDSA-AES256-GCM-SHA384'
src/modules/unreal5.php:		$this->sendraw("PASS $password");
src/modules/unreal5.php:		$this->sendraw("PROTOCTL EAUTH=".$cf['servicesname'].",6000 SID=".$cf['sid']);
src/modules/unreal5.php:		$this->sendraw("PROTOCTL NOQUIT NICKv2 SJOIN SJOIN2 SJ3 CLK TKLEXT2 NICKIP ESVID MLOCK NEXTBANS EXTSWHOIS SJSBY");
src/modules/unreal5.php:		$this->sendraw("SERVER ".$cf['servicesname']." 1 :Dalek IRC Services");
src/modules/unreal5.php:		$this->sendraw("MD client ".$cf['sid']." saslmechlist :PLAIN,EXTERNAL");
src/modules/unreal5.php:		$this->sendraw("EOS");
src/modules/unreal5.php:		$this->sendraw(":$this->sid SVS2MODE $uid $string");
src/modules/unreal5.php:		$this->sendraw($string);
src/modules/unreal5.php:		$this->sendraw(":$sid SVSKILL $uid :$string");
src/modules/unreal5.php:		echo "[".$me."][-->] ".$string."\n";
src/modules/unreal5.php:		echo "[".$me."][<--] ".$string."\n";
src/modules/unreal5.php:	$serv->Send($string);
src/modules/unreal5.php:	if (strpos($user->usermode,"S") !== false)
src/modules/unreal5.php:		$setby = $usr->nick;
src/modules/unreal5.php:	$prep = $conn->prepare("INSERT INTO dalek_channel_meta (chan, meta_key, meta_value, meta_setby, meta_timestamp) VALUES (?, ?, ?, ?, ?)");
src/modules/unreal5.php:	$prep->bind_param("sssss",$chan,$set,$ext,$setby,$timestamp);
src/modules/unreal5.php:	$prep->execute();
src/modules/unreal5.php:	$prep->close();
src/modules/registration.php:\\	Desc:		Provides Services functionality for the IRCv3 'account-registration'
src/modules/registration.php:\\				https://ircv3.net/specs/extensions/account-registration
src/modules/registration.php:		$conn->query("CREATE TABLE IF NOT EXISTS dalek_verification (
src/modules/registration.php:		if (!CommandAdd($this->name, 'REGISTRATION', 'registration::cmd_registration', 0))
src/modules/registration.php:			if ($toCheck->IsUser)
src/modules/registration.php:				S2S("REGISTRATION $nick->nick $uid $ip R F ACCOUNT_EXISTS $account :Sorry, that account already exists");
src/modules/registration.php:				S2S("REGISTRATION $nick->nick $uid $ip R F INVALID_EMAIL $email :The email address you provided is invalid.");
src/modules/registration.php:			if ($toCheck->IsUser)
src/modules/registration.php:				S2S("REGISTRATION $nick->nick $uid $ip R F UNACCEPTABLE_EMAIL $email :The email address you provided has been taken.");
src/modules/registration.php:				S2S("REGISTRATION $nick->nick $uid $ip R F WEAK_PASSWORD $account :The password you provided was too weak.");
src/modules/registration.php:			$ns->svslogin($uid,$account);
src/modules/registration.php:			S2S("REGISTRATION $nick->nick $uid $ip R S $account * :You have successfully registered your account");
src/modules/wordpress/wordpress.php:include "wp-phpass.php";
src/modules/wordpress/wordpress.php:	$result = $conn->query("SELECT option_value FROM ".$wpconfig['dbprefix']."options WHERE option_name = 'siteurl'");
src/modules/wordpress/wordpress.php:	$row = $result->fetch_assoc();
src/modules/wordpress/wordpress.php:	$conn->close();
src/modules/wordpress/wordpress.php:	$result = $conn->query("SELECT option_value FROM ".$wpconfig['dbprefix']."options WHERE option_name = '".$wpconfig['dbprefix']."user_roles'");
src/modules/wordpress/wordpress.php:	$row = $result->fetch_assoc();
src/modules/wordpress/wordpress.php:		$conn->query("UPDATE ".$wpconfig['dbprefix']."options SET option_value = '$up' WHERE option_name = '".$wpconfig['dbprefix']."user_roles'");
src/modules/wordpress/wordpress.php:define("LKUP_BY_ID", "0-001");
src/modules/wordpress/wordpress.php:define("LKUP_BY_ACCOUNT_NAME", "0-002");
src/modules/wordpress/wordpress.php:define("LKUP_BY_EMAIL", "0-003");
src/modules/wordpress/wordpress.php:				$nick = $this->lookup_by_id($account);
src/modules/wordpress/wordpress.php:				$nick = $this->lookup($account);
src/modules/wordpress/wordpress.php:				$nick = $this->lookup_by_email($account);
src/modules/wordpress/wordpress.php:			$nick = $this->lookup($account);
src/modules/wordpress/wordpress.php:				$nick = $this->lookup_by_id($account);
src/modules/wordpress/wordpress.php:			$this->IsUser = false;
src/modules/wordpress/wordpress.php:			$this->IsUser = true;
src/modules/wordpress/wordpress.php:		if ($this->IsUser)
src/modules/wordpress/wordpress.php:			$this->user_id = intval($nick['ID']);
src/modules/wordpress/wordpress.php:			$this->user_login = $nick['user_login'];
src/modules/wordpress/wordpress.php:			$this->user_nicename = $nick['user_nicename'];
src/modules/wordpress/wordpress.php:			$this->user_pass = $nick['user_pass'];
src/modules/wordpress/wordpress.php:			$this->user_email = $nick['user_email'];
src/modules/wordpress/wordpress.php:			$this->user_url = $nick['user_url'] ?? NULL;
src/modules/wordpress/wordpress.php:			$this->user_registered = $nick['user_registered'];
src/modules/wordpress/wordpress.php:			$this->user_status = $nick['user_status'];
src/modules/wordpress/wordpress.php:			$this->display_name = $nick['display_name'];
src/modules/wordpress/wordpress.php:			$this->confirmed = (!strlen($nick['user_activation_key'])) ? true : false;
src/modules/wordpress/wordpress.php:			$this->user_meta = new WPUserMeta($this);
src/modules/wordpress/wordpress.php:			$uns = isset($this->user_meta->wp_capabilities) ? unserialize($this->user_meta->wp_capabilities) : [];
src/modules/wordpress/wordpress.php:			$this->role_array = array();
src/modules/wordpress/wordpress.php:					$this->role_array[] = $key;
src/modules/wordpress/wordpress.php:			$this->IsAdmin = (in_array("administrator",$this->role_array)) ? true : false;
src/modules/wordpress/wordpress.php:		$prep = $conn->prepare("SELECT * FROM ".$wpconfig['dbprefix']."users WHERE user_login = ?");
src/modules/wordpress/wordpress.php:		$prep->bind_param("s",$account);
src/modules/wordpress/wordpress.php:		$prep->execute();
src/modules/wordpress/wordpress.php:		$result = $prep->get_result();
src/modules/wordpress/wordpress.php:			$prep->close();
src/modules/wordpress/wordpress.php:		$result = $result->fetch_assoc();
src/modules/wordpress/wordpress.php:		$prep->close();
src/modules/wordpress/wordpress.php:		$prep = $conn->prepare("SELECT * FROM ".$wpconfig['dbprefix']."users WHERE ID = ?");
src/modules/wordpress/wordpress.php:		$prep->bind_param("s",$account);
src/modules/wordpress/wordpress.php:		$prep->execute();
src/modules/wordpress/wordpress.php:		$result = $prep->get_result();
src/modules/wordpress/wordpress.php:			$prep->close();
src/modules/wordpress/wordpress.php:		$result = $result->fetch_assoc();
src/modules/wordpress/wordpress.php:		$prep->close();
src/modules/wordpress/wordpress.php:		$prep = $conn->prepare("SELECT * FROM ".$wpconfig['dbprefix']."users WHERE LOWER(user_email) = ?");
src/modules/wordpress/wordpress.php:		$prep->bind_param("s",$email);
src/modules/wordpress/wordpress.php:		$prep->execute();
src/modules/wordpress/wordpress.php:		$result = $prep->get_result();
src/modules/wordpress/wordpress.php:			$prep->close();
src/modules/wordpress/wordpress.php:		$result = $result->fetch_assoc();
src/modules/wordpress/wordpress.php:		$prep->close();
src/modules/wordpress/wordpress.php:		if (!$this->IsUser)
src/modules/wordpress/wordpress.php:		$prep = $conn->prepare("UPDATE ".$wpconfig['dbprefix']."users SET user_email = ? WHERE ID = ?");
src/modules/wordpress/wordpress.php:		$prep->bind_param("ss",$email,$this->user_id);
src/modules/wordpress/wordpress.php:		$prep->execute();
src/modules/wordpress/wordpress.php:		$prep->close();
src/modules/wordpress/wordpress.php:		$this->user_email = $email;
src/modules/wordpress/wordpress.php:		if (!$this->IsUser)
src/modules/wordpress/wordpress.php:		if (($password = $wp_hasher->HashPassword($password)) == "*")
src/modules/wordpress/wordpress.php:		$prep = $conn->prepare("UPDATE ".$wpconfig['dbprefix']."users SET user_pass = ? WHERE user_nicename = ?");
src/modules/wordpress/wordpress.php:		$prep->bind_param("ss",$password,$this->user_nicename);
src/modules/wordpress/wordpress.php:		$prep->execute();
src/modules/wordpress/wordpress.php:		$prep->close();
src/modules/wordpress/wordpress.php:		if (!$this->IsUser)
src/modules/wordpress/wordpress.php:		if ($wp_hasher->CheckPassword($p,$this->user_pass))
src/modules/wordpress/wordpress.php:		$this->lookup($account->user_id);
src/modules/wordpress/wordpress.php:		$this->num_posts = $this->GetNumPosts($account->user_id);
src/modules/wordpress/wordpress.php:		$prep = $conn->prepare("SELECT * FROM ".$wpconfig['dbprefix']."usermeta WHERE user_id = ?");
src/modules/wordpress/wordpress.php:		$prep->bind_param("i",$id);
src/modules/wordpress/wordpress.php:		$prep->execute();
src/modules/wordpress/wordpress.php:		$result = $prep->get_result();
src/modules/wordpress/wordpress.php:			$prep->close();
src/modules/wordpress/wordpress.php:		while($row = $result->fetch_assoc())
src/modules/wordpress/wordpress.php:			$this->{$row['meta_key']} = $row['meta_value'];
src/modules/wordpress/wordpress.php:		$prep->close();
src/modules/wordpress/wordpress.php:		$prep = $conn->prepare("SELECT * FROM ".$wpconfig['dbprefix']."posts WHERE post_author = ?");
src/modules/wordpress/wordpress.php:		$prep->bind_param("i",$id);
src/modules/wordpress/wordpress.php:		$prep->execute();
src/modules/wordpress/wordpress.php:		$result = $prep->get_result();
src/modules/wordpress/wordpress.php:			$prep->close();
src/modules/wordpress/wordpress.php:			return $result->num_rows;
src/modules/wordpress/wordpress.php:	$prep = $conn->prepare("SELECT * FROM $table WHERE option_name = ?");
src/modules/wordpress/wordpress.php:	$prep->bind_param("s",$option);
src/modules/wordpress/wordpress.php:	$prep->execute();
src/modules/wordpress/wordpress.php:	$result = $prep->get_result();
src/modules/wordpress/wordpress.php:	if ($result->num_rows == 0)
src/modules/wordpress/wordpress.php:	$row = $result->fetch_assoc();
src/modules/wordpress/wordpress.php:	$prep = $conn->prepare("SELECT * FROM $table WHERE meta_key = ? AND user_id = ?");
src/modules/wordpress/wordpress.php:	$prep->bind_param("si",$option,$user->id);
src/modules/wordpress/wordpress.php:	$prep->execute();
src/modules/wordpress/wordpress.php:	$result = $prep->get_result();
src/modules/wordpress/wordpress.php:	if ($result->num_rows == 0)
src/modules/wordpress/wordpress.php:	$row = $result->fetch_assoc();
src/modules/wordpress/wordpress.php:			if (in_array("services-admin",$caps) || 
src/modules/wordpress/wordpress.php:			in_array("services-operator",$caps))
src/modules/wordpress/wordpress.php:	foreach ($channel->access as $key => $val)
src/modules/wordpress/wordpress.php:	if (!($ch = ChanAccess($chan,$nick->account)))
src/modules/wordpress/wordpress.php:	$pass = $wp_hasher->HashPassword($user['password']);
src/modules/wordpress/wordpress.php:	$nicename = strtolower(str_replace(["-", "_"],"",$username));
src/modules/wordpress/wordpress.php:	$date = $date->format('Y-m-d H:i:s');
src/modules/wordpress/wordpress.php:	$prep = $conn->prepare("INSERT INTO ".$wpconfig['dbprefix']."users (user_login, user_pass, user_nicename, user_email, user_registered, user_activation_key, user_status, display_name)
src/modules/wordpress/wordpress.php:	$prep->bind_param("ssssssis", $username, $pass, $nicename, $email, $date, $code, $status, $username);
src/modules/wordpress/wordpress.php:	$prep->execute();
src/modules/wordpress/wordpress.php:	$conn->close();
src/modules/wordpress/wordpress.php:	$code = md5(md5(md5($i[strlen($i) -1] * $i[strlen($i) - 2])));
src/modules/wordpress/wordpress.php:		$prep = $conn->prepare("SELECT * FROM ".$wpconfig['dbprefix']."users WHERE user_nicename = lower(?)");
src/modules/wordpress/wordpress.php:		$prep->bind_param("s",$user);
src/modules/wordpress/wordpress.php:		$prep->execute();
src/modules/wordpress/wordpress.php:		$prep->store_result();
src/modules/wordpress/wordpress.php:		if ($prep->num_rows == 0){ $prep->close(); return false; }
src/modules/wordpress/wordpress.php:		$prep->close();
src/modules/wordpress/wordpress.php:	if (!$user->IsWordPressUser)
src/modules/wordpress/wordpress.php:	if (isset($user->wp) && in_array("administrator", $user->wp->role_array))
src/modules/wordpress/wordpress.php:		if (isset($user->wp) && in_array("irc_admin",$user->wp->role_array))
src/modules/wordpress/wordpress.php:			if (isset($target->wp) && in_array("irc_admin",$target->wp->role_array))
src/modules/wordpress/wordpress.php:		if (isset($user->wp) && in_array("irc_oper",$user->wp->role_array))
src/modules/wordpress/wordpress.php:			if (isset($target->wp) && (in_array("irc_admin",$target->wp->role_array)
src/modules/wordpress/wordpress.php:				|| in_array("irc_oper",$target->wp->role_array)))
src/modules/wordpress/wordpress.php:		if (isset($user->wp) && in_array("irc_helper",$user->wp->role_array))
src/modules/wordpress/wordpress.php:			if (isset($target->wp) && (in_array("irc_admin",$target->wp->role_array)
src/modules/wordpress/wordpress.php:				|| in_array("irc_oper",$target->wp->role_array)
src/modules/wordpress/wordpress.php:				|| in_array("irc_helper",$target->wp->role_array)))
src/modules/wordpress/wordpress.php:	elseif (isset($user->wp)) {
src/modules/wordpress/wordpress.php:		for ($i = 0; $user->wp->role_array($i) !== NULL; $i++)
src/modules/wordpress/wordpress.php:			$privs = wp_get_privs($user->wp->role_array[$i]);
src/modules/wordpress/fail2ban.php:    $cb = (isset($cf['fail2ban-failcount'])) ? $cf['fail2ban-failcount'] : 10; // default value is 10 incorrect attempts
src/modules/wordpress/fail2ban.php:    $db = (isset($cf['fail2ban-bantime'])) ? $cf['fail2ban-bantime'] : 30; // default value is 30 minutes ban
src/modules/wordpress/ChanServ/cs_set.php:	$cs->notice($nick,"SET                 Set options for your channel.");
src/modules/wordpress/ChanServ/cs_voice.php:	if (!$nick->account)
src/modules/wordpress/ChanServ/cs_voice.php:		$cs->notice($nick->uid,"You need to login to use that command.");
src/modules/wordpress/ChanServ/cs_voice.php:		$cs->notice($nick->uid,"Syntax: /msg $cs->nick VOICE <chan> [<nick>]");
src/modules/wordpress/ChanServ/cs_voice.php:	if ($chan->IsVoice($target->uid))
src/modules/wordpress/ChanServ/cs_voice.php:		$cs->notice($nick->uid,"$target->nick is already voiced on that channel.");
src/modules/wordpress/ChanServ/cs_voice.php:	if (can_voice($nick->account,$chan))
src/modules/wordpress/ChanServ/cs_voice.php:		$cs->mode($chan->chan,"+v $target->nick");
src/modules/wordpress/ChanServ/cs_voice.php:	$cs->notice($nick,"VOICE               Voices you in a channel.");
src/modules/wordpress/ChanServ/cs_voice.php:	$cs->notice($nick,"Command: VOICE");
src/modules/wordpress/ChanServ/cs_voice.php:	$cs->notice($nick,"Syntax: /msg $cs->nick voice #channel [nick]");
src/modules/wordpress/ChanServ/cs_voice.php:	$cs->notice($nick,"Example: /msg $cs->nick voice #channel Lamer32");
src/modules/wordpress/ChanServ/cs_autovoice.php:	if (!$nick->account)
src/modules/wordpress/ChanServ/cs_autovoice.php:	$wpuser = new WPUser($nick->account);
src/modules/wordpress/ChanServ/cs_autovoice.php:	if (is_autovoice($wpuser,$chan->chan) && !$chan->IsVoice($nick->nick))
src/modules/wordpress/ChanServ/cs_autovoice.php:		$cs->mode($chan->chan,"+v $nick->nick");
src/modules/wordpress/ChanServ/cs_autovoice.php:	if (!($list = get_ison($nick->uid)))
src/modules/wordpress/ChanServ/cs_autovoice.php:	$user = new WPUser($nick->account);
src/modules/wordpress/ChanServ/cs_autovoice.php:		if (is_autovoice($user,$chan->chan) && !$chan->IsVoice($nick->nick))
src/modules/wordpress/ChanServ/cs_autovoice.php:			$cs->mode($chan->chan,"+v $nick->nick");
src/modules/wordpress/ChanServ/cs_autovoice.php:		$cs->notice($nick->uid,"Syntax: /msg $cs->nick AUTOVOICE <chan> on|off");
src/modules/wordpress/ChanServ/cs_autovoice.php:		$cs->notice($nick->uid,"Syntax: /msg $cs->nick AUTOVOICE <chan> on|off");
src/modules/wordpress/ChanServ/cs_autovoice.php:	if ($nick->account !== $nick->nick)
src/modules/wordpress/ChanServ/cs_autovoice.php:		$cs->notice($nick->uid,"You need to login to use that command.");
src/modules/wordpress/ChanServ/cs_autovoice.php:		$cs->notice($nick->uid,"Syntax: /msg $cs->nick AUTOVOICE <chan> on|off");
src/modules/wordpress/ChanServ/cs_autovoice.php:	if (!$chan->IsChan)
src/modules/wordpress/ChanServ/cs_autovoice.php:		$cs->notice($nick->uid,"That channel does not exist.");
src/modules/wordpress/ChanServ/cs_autovoice.php:	if (can_autovoice($nick->nick,$chan))
src/modules/wordpress/ChanServ/cs_autovoice.php:		$user = new WPUser($nick->account);
src/modules/wordpress/ChanServ/cs_autovoice.php:		if ($toggle == "on" && is_autovoice($user,$chan->chan))
src/modules/wordpress/ChanServ/cs_autovoice.php:			$cs->notice($nick->uid,"AUTOVOICE is already set to 'on' for $chan->chan");
src/modules/wordpress/ChanServ/cs_autovoice.php:		elseif ($toggle == "off" && !is_autovoice($user,$chan->chan))
src/modules/wordpress/ChanServ/cs_autovoice.php:			$cs->notice($nick->uid,"AUTOVOICE is already set to 'off' for $chan->chan");
src/modules/wordpress/ChanServ/cs_autovoice.php:		autovoice_toggle($user,$chan->chan,$toggle);
src/modules/wordpress/ChanServ/cs_autovoice.php:		$cs->notice($nick->uid,"AUTOVOICE has been set to '$toggle' for $chan->chan");
src/modules/wordpress/ChanServ/cs_autovoice.php:	$cs->notice($nick->uid,"Permission denied.");
src/modules/wordpress/ChanServ/cs_autovoice.php:	$prep = $conn->prepare("SELECT * FROM dalek_account_settings WHERE account = ?");
src/modules/wordpress/ChanServ/cs_autovoice.php:	$prep->bind_param("s",$nick->login);
src/modules/wordpress/ChanServ/cs_autovoice.php:	$prep->execute();
src/modules/wordpress/ChanServ/cs_autovoice.php:	$result = $prep->get_result();
src/modules/wordpress/ChanServ/cs_autovoice.php:	if ($result->num_rows == 0)
src/modules/wordpress/ChanServ/cs_autovoice.php:	while ($row = $result->fetch_assoc())
src/modules/wordpress/ChanServ/cs_autovoice.php:	$prep->close();
src/modules/wordpress/ChanServ/cs_autovoice.php:		$prep = $conn->prepare("INSERT INTO dalek_account_settings (account, setting_key, setting_value) VALUES (?, ?, ?)");
src/modules/wordpress/ChanServ/cs_autovoice.php:		$prep->bind_param("sss",$nick->login,$setting_key,$toggle);
src/modules/wordpress/ChanServ/cs_autovoice.php:		$prep->execute();
src/modules/wordpress/ChanServ/cs_autovoice.php:		$prep = $conn->prepare("UPDATE dalek_account_settings SET setting_key = ?, setting_value = ? WHERE account = ?");
src/modules/wordpress/ChanServ/cs_autovoice.php:		$prep->bind_param("sss",$setting_key,$toggle,$nick->login);
src/modules/wordpress/ChanServ/cs_autovoice.php:		$prep->execute();
src/modules/wordpress/ChanServ/cs_autovoice.php:	$cs->notice($nick,"AUTOVOICE           Modify your AUTOVOICE setting for a channel.");
src/modules/wordpress/ChanServ/cs_autovoice.php:	$cs->notice($nick,"Command: AUTOVOICE");
src/modules/wordpress/ChanServ/cs_autovoice.php:	$cs->notice($nick,"Syntax: /msg $cs->nick autovoice #channel <on|off>");
src/modules/wordpress/ChanServ/cs_autovoice.php:	$cs->notice($nick,"Example: /msg $cs->nick autovoicevoice #channel on");
src/modules/wordpress/ChanServ/cs_op.php:	if (!$nick->account)
src/modules/wordpress/ChanServ/cs_op.php:		$cs->notice($nick->uid,"You need to login to use that command.");
src/modules/wordpress/ChanServ/cs_op.php:		$cs->notice($nick->uid,"Syntax: /msg $cs->nick OP <chan> [<nick>]");
src/modules/wordpress/ChanServ/cs_op.php:	if ($chan->IsOp($target->uid) !== false)
src/modules/wordpress/ChanServ/cs_op.php:		$cs->notice($nick->uid,"$target->nick is already opped on that channel.");
src/modules/wordpress/ChanServ/cs_op.php:	if (can_op($nick->account,$chan->chan))
src/modules/wordpress/ChanServ/cs_op.php:		$cs->mode($chan->chan,"+o $target->nick");
src/modules/wordpress/ChanServ/cs_help.php:			$cs->notice($nick,"$cs->nick allows you to register and retain");
src/modules/wordpress/ChanServ/cs_help.php:			$cs->notice($nick,"ownership of a channel and enforce certain");
src/modules/wordpress/ChanServ/cs_help.php:			$cs->notice($nick,"settings for your channel.");
src/modules/wordpress/ChanServ/cs_help.php:			$cs->notice($nick," ");
src/modules/wordpress/ChanServ/cs_help.php:			$cs->notice($nick,"Here is a list of commands available to you:");
src/modules/wordpress/ChanServ/cs_help.php:			$cs->notice($nick," ");
src/modules/wordpress/ChanServ/cs_help.php:			$cs->notice($nick," ");
src/modules/wordpress/ChanServ/cs_help.php:			$cs->notice($nick,"For more information on a command, type:");
src/modules/wordpress/ChanServ/cs_help.php:			$cs->notice($nick,"/msg $cs->nick help command");
src/modules/wordpress/ChanServ/cs_help.php:	$cs->notice($nick,"HELP                Show this list and gets help on a specific command.");
src/modules/wordpress/ChanServ/cs_help.php:	$cs->notice($nick,"Command: HELP");
src/modules/wordpress/ChanServ/cs_help.php:	$cs->notice($nick,"Syntax: /msg $cs->nick help command");
src/modules/wordpress/ChanServ/cs_help.php:	$cs->notice($nick,"Example: /msg $cs->nick help register");
src/modules/wordpress/ChanServ/cs_bans.php:	if (!$nick->account)
src/modules/wordpress/ChanServ/cs_bans.php:		$cs->notice($nick->uid,"You need to login use that command.");
src/modules/wordpress/ChanServ/cs_bans.php:		$cs->notice($nick->uid,"Syntax: /msg $cs->nick BANS <#channel>");
src/modules/wordpress/ChanServ/cs_bans.php:	if (!$chan->IsChan)
src/modules/wordpress/ChanServ/cs_bans.php:		$cs->notice($nick->uid,"That channel doesn't exist.");
src/modules/wordpress/ChanServ/cs_bans.php:		$cs->notice($nick->uid,"Permission denied");
src/modules/wordpress/ChanServ/cs_bans.php:	$prep = $conn->prepare("SELECT * FROM dalek_channel_meta WHERE chan = ? and meta_key = ?");
src/modules/wordpress/ChanServ/cs_bans.php:	$prep->bind_param("ss",$chan->chan,$meta_key);
src/modules/wordpress/ChanServ/cs_bans.php:	$prep->execute();
src/modules/wordpress/ChanServ/cs_bans.php:	$result = $prep->get_result();
src/modules/wordpress/ChanServ/cs_bans.php:	if (!$result->num_rows)
src/modules/wordpress/ChanServ/cs_bans.php:        $prep->close();
src/modules/wordpress/ChanServ/cs_bans.php:        $cs->notice($nick->uid,"There are no bans on channel $chan->chan");
src/modules/wordpress/ChanServ/cs_bans.php:    $cs->notice($nick->uid,"Listing bans on channel: $chan->chan");
src/modules/wordpress/ChanServ/cs_bans.php:    $cs->notice($nick->uid,clean_align("Mask:").clean_align("Set by:").clean_align("Timestamp:"));
src/modules/wordpress/ChanServ/cs_bans.php:    while ($row = $result->fetch_assoc())
src/modules/wordpress/ChanServ/cs_bans.php:        $cs->notice($nick->uid,clean_align($row['meta_value']).clean_align($row['meta_setby']).clean_align($row['meta_timestamp']));
src/modules/wordpress/ChanServ/cs_bans.php:    $prep->close();
src/modules/wordpress/ChanServ/cs_bans.php:	$cs->notice($nick,"BANS                View the ban list for a channel.");
src/modules/wordpress/ChanServ/cs_bans.php:	$cs->notice($nick,"Command: BANS");
src/modules/wordpress/ChanServ/cs_bans.php:	$cs->notice($nick,"Syntax: /msg $cs->nick bans #channel");
src/modules/wordpress/ChanServ/cs_bans.php:	$cs->notice($nick,"Example: /msg $cs->nick bans #channel");
src/modules/wordpress/ChanServ/cs_autoop.php:	if (!isset($nick->account))
src/modules/wordpress/ChanServ/cs_autoop.php:	$wpuser = new WPUser($nick->account);
src/modules/wordpress/ChanServ/cs_autoop.php:	if (is_autoop($wpuser,$chan->chan) == "on" && !$chan->IsOp($nick->nick))
src/modules/wordpress/ChanServ/cs_autoop.php:		$cs->up($chan,$nick);
src/modules/wordpress/ChanServ/cs_autoop.php:	if (!($list = get_ison($nick->uid)))
src/modules/wordpress/ChanServ/cs_autoop.php:	$user = new WPUser($nick->account);
src/modules/wordpress/ChanServ/cs_autoop.php:		if (is_autoop($user,$chan->chan) == "on" && !$chan->IsOp($nick->nick))
src/modules/wordpress/ChanServ/cs_autoop.php:			$cs->mode($chan->chan,"+o $nick->nick");
src/modules/wordpress/ChanServ/cs_autoop.php:		$cs->notice($nick->uid,"Syntax: /msg $cs->nick AUTOOP <chan> on|off");
src/modules/wordpress/ChanServ/cs_autoop.php:		$cs->notice($nick->uid,"Syntax: /msg $cs->nick AUTOOP <chan> on|off");
src/modules/wordpress/ChanServ/cs_autoop.php:	if (!isset($nick->account))
src/modules/wordpress/ChanServ/cs_autoop.php:		$cs->notice($nick->uid,"You need to login to use that command.");
src/modules/wordpress/ChanServ/cs_autoop.php:		$cs->notice($nick->uid,"Syntax: /msg $cs->nick AUTOOP <chan> on|off");
src/modules/wordpress/ChanServ/cs_autoop.php:	if (!$chan->IsChan)
src/modules/wordpress/ChanServ/cs_autoop.php:		$cs->notice($nick->uid,"That channel does not exist.");
src/modules/wordpress/ChanServ/cs_autoop.php:	if (can_autoop($nick->account,$chan))
src/modules/wordpress/ChanServ/cs_autoop.php:		$user = new WPUser($nick->account);
src/modules/wordpress/ChanServ/cs_autoop.php:		if ($toggle == "on" && is_autoop($user,$chan->chan) == "on")
src/modules/wordpress/ChanServ/cs_autoop.php:			$cs->notice($nick->uid,"AUTOOP is already set to 'on' for $chan->chan");
src/modules/wordpress/ChanServ/cs_autoop.php:		elseif ($toggle == "off" && (!$isop = is_autoop($user,$chan->chan) || $isop = "off"))
src/modules/wordpress/ChanServ/cs_autoop.php:			$cs->notice($nick->uid,"AUTOOP is already set to 'off' for $chan->chan");
src/modules/wordpress/ChanServ/cs_autoop.php:		autoop_toggle($user,$chan->chan,$toggle);
src/modules/wordpress/ChanServ/cs_autoop.php:		$cs->notice($nick->uid,"AUTOOP has been set to '$toggle' for $chan->chan");
src/modules/wordpress/ChanServ/cs_autoop.php:	$cs->notice($nick->uid,"Permission denied.");
src/modules/wordpress/ChanServ/cs_autoop.php:	$prep = $conn->prepare("SELECT * FROM dalek_account_settings WHERE account = ?");
src/modules/wordpress/ChanServ/cs_autoop.php:	$prep->bind_param("s",$nick->user_login);
src/modules/wordpress/ChanServ/cs_autoop.php:	$prep->execute();
src/modules/wordpress/ChanServ/cs_autoop.php:	$result = $prep->get_result();
src/modules/wordpress/ChanServ/cs_autoop.php:	if ($result->num_rows == 0)
src/modules/wordpress/ChanServ/cs_autoop.php:	while ($row = $result->fetch_assoc())
src/modules/wordpress/ChanServ/cs_autoop.php:	$prep->close();
src/modules/wordpress/ChanServ/cs_autoop.php:		$prep = $conn->prepare("INSERT INTO dalek_account_settings (account, setting_key, setting_value) VALUES (?, ?, ?)");
src/modules/wordpress/ChanServ/cs_autoop.php:		$prep->bind_param("sss",$nick->user_login,$setting_key,$toggle);
src/modules/wordpress/ChanServ/cs_autoop.php:		$prep->execute();
src/modules/wordpress/ChanServ/cs_autoop.php:		$prep = $conn->prepare("UPDATE dalek_account_settings SET setting_key = ?, setting_value = ? WHERE account = ?");
src/modules/wordpress/ChanServ/cs_autoop.php:		$prep->bind_param("sss",$setting_key,$toggle,$nick->user_login);
src/modules/wordpress/ChanServ/cs_autoop.php:		$prep->execute();
src/modules/wordpress/ChanServ/cs_autoop.php:	$cs->notice($nick,"AUTOOP              Modify your AUTOOP setting for a channel");
src/modules/wordpress/ChanServ/cs_autoop.php:	$cs->notice($nick,"Command: AUTOOP");
src/modules/wordpress/ChanServ/cs_autoop.php:	$cs->notice($nick,"Syntax: /msg $cs->nick autoop #channel <on|off>");
src/modules/wordpress/ChanServ/cs_autoop.php:	$cs->notice($nick,"Example: /msg $cs->nick autoop #channel on");
src/modules/wordpress/ChanServ/cs_devoice.php:	if (!$nick->account)
src/modules/wordpress/ChanServ/cs_devoice.php:		$cs->notice($nick->uid,"You need to login to use that command.");
src/modules/wordpress/ChanServ/cs_devoice.php:		$cs->notice($nick->uid,"Syntax: /msg $cs->nick DEVOICE <chan> [<nick>]");
src/modules/wordpress/ChanServ/cs_devoice.php:	if (!$chan->IsVoice($target->uid))
src/modules/wordpress/ChanServ/cs_devoice.php:		$cs->notice($nick->uid,"$target->nick is not voiced on that channel.");
src/modules/wordpress/ChanServ/cs_devoice.php:	if (can_devoice($nick->account,$chan->chan))
src/modules/wordpress/ChanServ/cs_devoice.php:		$cs->mode($chan->chan,"-v $target->nick");
src/modules/wordpress/ChanServ/cs_info.php:		$cs->notice($u['nick'],"Syntax: /msg $cs->nick INFO <#channel>");
src/modules/wordpress/ChanServ/cs_info.php:		$cs->notice($nick->uid,"Syntax: /msg $cs->nick INFO <#channel>");
src/modules/wordpress/ChanServ/cs_info.php:	$cs->notice($nick->uid,"Listing information about $chan->chan");
src/modules/wordpress/ChanServ/cs_info.php:	if (!$chan->RegDate)
src/modules/wordpress/ChanServ/cs_info.php:		$cs->notice($nick->uid,"$chan->chan is not registered.");
src/modules/wordpress/ChanServ/cs_info.php:	$cs->notice($nick->uid,"$chan->chan is registered to $chan->owner");
src/modules/wordpress/ChanServ/cs_info.php:	$cs->notice($nick->uid,"$chan->chan was registered on: ".gmdate("Y-m-d\TH:i:s\Z", $chan->RegDate));
src/modules/wordpress/ChanServ/cs_info.php:	$cs->notice($nick->uid,"Channel email: $chan->email");
src/modules/wordpress/ChanServ/cs_info.php:	$cs->notice($nick->uid,"Channel URL: $chan->url");
src/modules/wordpress/ChanServ/cs_info.php:	$cs->notice($nick,"INFO                List information about a given channel.");
src/modules/wordpress/ChanServ/cs_info.php:	$cs->notice($nick,"Command: AUTOOP");
src/modules/wordpress/ChanServ/cs_info.php:	$cs->notice($nick,"Syntax: /msg $cs->nick INFO <#channel>");
src/modules/wordpress/ChanServ/cs_info.php:	$cs->notice($nick,"Example: /msg $cs->nick INFO <#channel>");
src/modules/wordpress/ChanServ/cs_info.php:	$prep = $conn->prepare("SELECT * FROM $table WHERE owner = ?");
src/modules/wordpress/ChanServ/cs_info.php:	$prep->bind_param("s",$nick);
src/modules/wordpress/ChanServ/cs_info.php:	$prep->execute();
src/modules/wordpress/ChanServ/cs_info.php:	$result = $prep->get_result();
src/modules/wordpress/ChanServ/cs_info.php:	$list = substr($list, 0, -2);
src/modules/wordpress/ChanServ/cs_invite.php:	if (!$nick->account)
src/modules/wordpress/ChanServ/cs_invite.php:		$eu->notice($nick->uid,"You need to login use that command.");
src/modules/wordpress/ChanServ/cs_invite.php:		$cs->notice($nick->uid,"Syntax: /msg $cs->nick INVITE <#channel>");
src/modules/wordpress/ChanServ/cs_invite.php:	if (!$chan->IsChan || !$chan->IsReg)
src/modules/wordpress/ChanServ/cs_invite.php:		$cs->notice($nick->uid,"That channel is not registered.");
src/modules/wordpress/ChanServ/cs_invite.php:	if ($t = $chan->HasUser($nick->uid))
src/modules/wordpress/ChanServ/cs_invite.php:		$cs->notice($nick->uid,"You are already on that channel");
src/modules/wordpress/ChanServ/cs_invite.php:		$cs->notice($nick->uid,"Permission denied.");
src/modules/wordpress/ChanServ/cs_invite.php:	$cs->invite($nick,$chan);
src/modules/wordpress/ChanServ/cs_invite.php:	$cs->notice($nick->uid,"You have been invited to join $chan->chan");
src/modules/wordpress/ChanServ/cs_register.php:	$result = $conn->query("SELECT * FROM dalek_chaninfo");
src/modules/wordpress/ChanServ/cs_register.php:	if ($result->num_rows == 0)
src/modules/wordpress/ChanServ/cs_register.php:	while ($row = $result->fetch_assoc())
src/modules/wordpress/ChanServ/cs_register.php:		if (!$chan->IsChan)
src/modules/wordpress/ChanServ/cs_register.php:		if (strpos($chan->modes,"r") == false)
src/modules/wordpress/ChanServ/cs_register.php:			$chan->SetMode("+r");
src/modules/wordpress/ChanServ/cs_register.php:		$cs->notice($nick->uid,"Syntax: /msg $cs->nick REGISTER <channel>");
src/modules/wordpress/ChanServ/cs_register.php:	if (!$nick->account)
src/modules/wordpress/ChanServ/cs_register.php:		$cs->notice($nick->uid,"You must be logged in to use that command.");
src/modules/wordpress/ChanServ/cs_register.php:	if (!$chan->HasUser($nick->uid))
src/modules/wordpress/ChanServ/cs_register.php:		$cs->notice($nick->uid,"You must be on that channel to register it.");
src/modules/wordpress/ChanServ/cs_register.php:	if (!$chan->IsOp($nick->uid))
src/modules/wordpress/ChanServ/cs_register.php:		$cs->notice($nick->uid,"You must be an operator on that channel to register it.");
src/modules/wordpress/ChanServ/cs_register.php:	if ($chan->IsReg)
src/modules/wordpress/ChanServ/cs_register.php:		$cs->notice($nick->uid,"That channel is already registered.");
src/modules/wordpress/ChanServ/cs_register.php:	$account = (isset($parv[2])) ? $parv[2] : $nick->account;
src/modules/wordpress/ChanServ/cs_register.php:	if ($account !== $nick->account)
src/modules/wordpress/ChanServ/cs_register.php:		if (!IsAdmin(wp_get_caps($nick->account)))
src/modules/wordpress/ChanServ/cs_register.php:			$cs->notice($nick->uid,"You may not register channels on behalf of others.");
src/modules/wordpress/ChanServ/cs_register.php:	if (!$wp->IsUser)
src/modules/wordpress/ChanServ/cs_register.php:		$cs->notice($nick->uid,"'$account' is not a registered user.");
src/modules/wordpress/ChanServ/cs_register.php:	if (!($reg = register_channel($chan->chan,$account)))
src/modules/wordpress/ChanServ/cs_register.php:		$cs->notice($nick->uid,"Could not register channel at this time.");
src/modules/wordpress/ChanServ/cs_register.php:	$chan->SetMode("+rq $nick->nick");
src/modules/wordpress/ChanServ/cs_register.php:	$cs->log("Channel $chan->chan has been registered by $nick->nick to account $account");
src/modules/wordpress/ChanServ/cs_register.php:	$cs->notice($nick->uid,"Channel $chan->chan has been registered under account $account");
src/modules/wordpress/ChanServ/cs_register.php:	$prep = $conn->prepare("INSERT INTO dalek_chaninfo (channel, owner, regdate, chatlink) VALUES (?, ?, ?, ?)");
src/modules/wordpress/ChanServ/cs_register.php:	$prep->bind_param("ssss",$chan,$owner,$servertime,$chatlink);
src/modules/wordpress/ChanServ/cs_register.php:	$prep->execute();
src/modules/wordpress/ChanServ/cs_register.php:	$prep = $conn->prepare("INSERT INTO dalek_chanaccess (channel, nick, access) VALUES (?, ?, ?)");
src/modules/wordpress/ChanServ/cs_register.php:	$prep->bind_param("sss",$chan,$owner,$permission);
src/modules/wordpress/ChanServ/cs_register.php:	$prep->execute();
src/modules/wordpress/ChanServ/cs_register.php:	$cs->notice($nick,"REGISTER            Register a channel to your account");
src/modules/wordpress/ChanServ/cs_register.php:	$cs->notice($nick,"Command: REGISTER");
src/modules/wordpress/ChanServ/cs_register.php:	$cs->notice($nick,"Syntax: /msg $cs->nick register #channel");
src/modules/wordpress/ChanServ/cs_register.php:	$cs->notice($nick,"Example: /msg $cs->nick register #channel");
src/modules/wordpress/ChanServ/cs_deop.php:	if (!$nick->account)
src/modules/wordpress/ChanServ/cs_deop.php:		$cs->notice($nick->uid,"You need to login to use that command.");
src/modules/wordpress/ChanServ/cs_deop.php:		$cs->notice($nick->uid,"Syntax: /msg $cs->nick DEOP <chan> [<nick>]");
src/modules/wordpress/ChanServ/cs_deop.php:	if ($chan->IsOp($target->uid) == false)
src/modules/wordpress/ChanServ/cs_deop.php:		$cs->notice($nick->uid,"$target->nick is not opped on that channel.");
src/modules/wordpress/ChanServ/cs_deop.php:	if (can_deop($nick->account,$chan->chan))
src/modules/wordpress/ChanServ/cs_deop.php:		$cs->mode($chan->chan,"-o $target->nick");
src/modules/wordpress/ChanServ/cs_kick.php:	if (!$chan->IsChan)
src/modules/wordpress/ChanServ/cs_kick.php:		$cs->notice($nick->uid,"Channel doesn't exist.");
src/modules/wordpress/ChanServ/cs_kick.php:	if (!$target->IsUser)
src/modules/wordpress/ChanServ/cs_kick.php:		$cs->notice($nick->uid,"User doesn't exist.");
src/modules/wordpress/ChanServ/cs_kick.php:	if (!($chaccess = ChanAccess($chan,$nick->nick)))
src/modules/wordpress/ChanServ/cs_kick.php:		$cs->notice($nick->uid,"Permission denied.");
src/modules/wordpress/ChanServ/cs_kick.php:	if (!$chan->HasUser($target->uid))
src/modules/wordpress/ChanServ/cs_kick.php:		$cs->notice($nick->uid,"User is not on that channel.");
src/modules/wordpress/ChanServ/cs_kick.php:		$cs->notice($nick->uid,"Permission denied.");
src/modules/wordpress/ChanServ/cs_kick.php:		$params = "[$nick->nick]";
src/modules/wordpress/ChanServ/cs_kick.php:		$params .= " [$nick->nick]";
src/modules/wordpress/ChanServ/cs_kick.php:	$cs->log("$nick->nick used KICK to kick user $target->nick from channel $chan->chan");
src/modules/wordpress/ChanServ/cs_kick.php:	$cs->kick($chan->chan,$target->nick,$params);
src/modules/wordpress/wordpress.conf:	"default_avatar" => "https://valware.uk/wp-content/plugins/ultimate-member/assets/img/default_avatar.jpg",
src/modules/wordpress/wordpress.conf:	"forumschan" => "#Dalek-Support",
src/modules/wordpress/_is_disabled.php:	if (!isset($user->user_meta->_is_disabled))
src/modules/wordpress/_is_disabled.php:	if ($user->user_meta->_is_disabled == "1")
src/modules/wordpress/_is_disabled.php:	if ($user->user_meta->_is_disabled !== NULL)
src/modules/wordpress/_is_disabled.php:	return $user->user_meta->_is_disabled;
src/modules/wordpress/_is_disabled.php:	$result  = $conn->query("SELECT * FROM dalek_user WHERE account IS NOT NULL");
src/modules/wordpress/_is_disabled.php:	while ($row = $result->fetch_assoc())
src/modules/wordpress/_is_disabled.php:			S2S("KILL $nick->nick :Account disabled on website");
src/modules/wordpress/_is_disabled.php:			$nick->exit();
src/modules/wordpress/wp-phpass.php:# Written by Solar Designer <solar at openwall.com> in 2004-2006 and placed in
src/modules/wordpress/wp-phpass.php:		$this->itoa64 = './0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';
src/modules/wordpress/wp-phpass.php:		$this->iteration_count_log2 = $iteration_count_log2;
src/modules/wordpress/wp-phpass.php:		$this->portable_hashes = $portable_hashes;
src/modules/wordpress/wp-phpass.php:		$this->random_state = microtime();
src/modules/wordpress/wp-phpass.php:			$this->random_state .= getmypid();
src/modules/wordpress/wp-phpass.php:				$this->random_state =
src/modules/wordpress/wp-phpass.php:				    md5(microtime() . $this->random_state);
src/modules/wordpress/wp-phpass.php:				$output .= md5($this->random_state, TRUE);
src/modules/wordpress/wp-phpass.php:			$output .= $this->itoa64[$value & 0x3f];
src/modules/wordpress/wp-phpass.php:			$output .= $this->itoa64[($value >> 6) & 0x3f];
src/modules/wordpress/wp-phpass.php:			$output .= $this->itoa64[($value >> 12) & 0x3f];
src/modules/wordpress/wp-phpass.php:			$output .= $this->itoa64[($value >> 18) & 0x3f];
src/modules/wordpress/wp-phpass.php:		$output .= $this->itoa64[min($this->iteration_count_log2 +
src/modules/wordpress/wp-phpass.php:		$output .= $this->encode64($input, 6);
src/modules/wordpress/wp-phpass.php:		$count_log2 = strpos($this->itoa64, $setting[3]);
src/modules/wordpress/wp-phpass.php:		# of PHP in use.  To implement our own low-level crypto in PHP
src/modules/wordpress/wp-phpass.php:		# quicker to crack (by non-PHP code).
src/modules/wordpress/wp-phpass.php:		} while (--$count);
src/modules/wordpress/wp-phpass.php:		$output .= $this->encode64($hash, 16);
src/modules/wordpress/wp-phpass.php:		# has the 4 unused bits set to non-zero, we do not want to take
src/modules/wordpress/wp-phpass.php:		$output .= chr(ord('0') + $this->iteration_count_log2 / 10);
src/modules/wordpress/wp-phpass.php:		$output .= chr(ord('0') + $this->iteration_count_log2 % 10);
src/modules/wordpress/wp-phpass.php:		if (CRYPT_BLOWFISH === 1 && !$this->portable_hashes) {
src/modules/wordpress/wp-phpass.php:			$random = $this->get_random_bytes(16);
src/modules/wordpress/wp-phpass.php:			    crypt($password, $this->gensalt_blowfish($random));
src/modules/wordpress/wp-phpass.php:			$random = $this->get_random_bytes(6);
src/modules/wordpress/wp-phpass.php:		    $this->crypt_private($password,
src/modules/wordpress/wp-phpass.php:		    $this->gensalt_private($random));
src/modules/wordpress/wp-phpass.php:		# in a crypt(3)-like function used _both_ for generating new
src/modules/wordpress/wp-phpass.php:		$hash = $this->crypt_private($password, $stored_hash);
src/modules/wordpress/wp-phpass.php:		# This is not constant-time.  In order to keep the code simple,
src/modules/wordpress/wp-phpass.php:		# unpredictable, which they are at least in the non-fallback
src/modules/wordpress/NickServ/ns_certfp.php:		$ns->notice($nick->uid,"Incorrect syntax");
src/modules/wordpress/NickServ/ns_certfp.php:	if (!$nick->account)
src/modules/wordpress/NickServ/ns_certfp.php:		$ns->notice($nick->uid,"You need to be logged in to use that command.");
src/modules/wordpress/NickServ/ns_certfp.php:		if (!isset($nick->meta->certfp))
src/modules/wordpress/NickServ/ns_certfp.php:			$ns->notice($nick->uid,"You do not have a certfp to store.");
src/modules/wordpress/NickServ/ns_certfp.php:		$ns->notice($nick->uid, add_certfp($nick->ip,$nick->account,$nick->meta->certfp));
src/modules/wordpress/NickServ/ns_certfp.php:			$ns->notice($nick->uid,"You did not specify a fingerprint to delete.");
src/modules/wordpress/NickServ/ns_certfp.php:		$ns->notice($nick->uid, del_certfp($nick->ip,$nick->account,$nick->meta->certfp));
src/modules/wordpress/NickServ/ns_certfp.php:		$prep = $conn->prepare("SELECT * FROM $table WHERE account = ?");
src/modules/wordpress/NickServ/ns_certfp.php:		$prep->bind_param("s",$nick->account);
src/modules/wordpress/NickServ/ns_certfp.php:		$prep->execute();
src/modules/wordpress/NickServ/ns_certfp.php:		$result = $prep->get_result();
src/modules/wordpress/NickServ/ns_certfp.php:		if (!$result || $result->num_rows == 0)
src/modules/wordpress/NickServ/ns_certfp.php:			$ns->notice($nick->uid,"You do not have any Certificate Fingerprints saved.");
src/modules/wordpress/NickServ/ns_certfp.php:		$ns->notice($nick->uid,"Listing your saved Certificate Fingerprints:");
src/modules/wordpress/NickServ/ns_certfp.php:		while ($row = $result->fetch_assoc())
src/modules/wordpress/NickServ/ns_certfp.php:			$ns->notice($nick->uid,$row['fingerprint']);
src/modules/wordpress/NickServ/ns_certfp.php:	$prep = $conn->prepare("SELECT * FROM $table WHERE ip = ? AND account = ? and fingerprint = ? LIMIT 1");
src/modules/wordpress/NickServ/ns_certfp.php:	$prep->bind_param("sss",$ip,$account,$fp);
src/modules/wordpress/NickServ/ns_certfp.php:	$prep->execute();
src/modules/wordpress/NickServ/ns_certfp.php:	$result = $prep->get_result();
src/modules/wordpress/NickServ/ns_certfp.php:	if ($result->num_rows == 1)
src/modules/wordpress/NickServ/ns_certfp.php:	$prep = $conn->prepare("INSERT INTO $table (account, ip, fingerprint) VALUES (?, ?, ?)");
src/modules/wordpress/NickServ/ns_certfp.php:	$prep->bind_param("sss", $account, $ip, $fp);
src/modules/wordpress/NickServ/ns_certfp.php:	$prep->execute();
src/modules/wordpress/NickServ/ns_certfp.php:	$prep = $conn->prepare("DELETE FROM $table WHERE account = ? AND ip = ? AND  fingerprint = ?");
src/modules/wordpress/NickServ/ns_certfp.php:	$prep->bind_param("sss", $account, $ip, $fp);
src/modules/wordpress/NickServ/ns_certfp.php:	$prep->execute();
src/modules/wordpress/NickServ/ns_certfp.php:	$ns->notice($nick,"CERTFP              Modifies or displays the certificate list for your nick.");
src/modules/wordpress/NickServ/ns_certfp.php:	$ns->notice($nick,"Command: CERTFP");
src/modules/wordpress/NickServ/ns_certfp.php:	$ns->notice($nick,"Syntax: /msg $ns->nick CERTFP ADD");
src/modules/wordpress/NickServ/ns_certfp.php:	$ns->notice($nick,"             /msg $ns->nick CERTFP DEL <certfp>");
src/modules/wordpress/NickServ/ns_certfp.php:	$ns->notice($nick," ");
src/modules/wordpress/NickServ/ns_certfp.php:	$ns->notice($nick,"Example: /msg $ns->nick CERTFP ADD");
src/modules/wordpress/NickServ/ns_identify.php:	if (!isset($parv[1])){ $ns->notice($nick->uid,IRC("MSG_IDENTIFY_SYNTAX")); return; }
src/modules/wordpress/NickServ/ns_identify.php:		$account = $nick->nick;
src/modules/wordpress/NickServ/ns_identify.php:	if (!$user->ConfirmPassword($pass)){  $ns->notice($nick->uid,IRC("MSG_IDENTIFAIL")); return; } 
src/modules/wordpress/NickServ/ns_identify.php:	if (!df_login($nick->uid,$account)){
src/modules/wordpress/NickServ/ns_identify.php:		$ns->log(IRC("LOG_IDENTIFAIL"));
src/modules/wordpress/NickServ/ns_identify.php:		$ns->notice($nick->uid,IRC("ERR_IDENTIFAIL"));
src/modules/wordpress/NickServ/ns_identify.php:	$ns->log($nick->nick." (".$nick->uid.") ".IRC("LOG_IDENTIFY")." $account"); 
src/modules/wordpress/NickServ/ns_identify.php:	$ns->svslogin($nick->uid,$account);
src/modules/wordpress/NickServ/ns_identify.php:	$ns->svs2mode($nick->uid," +r");
src/modules/wordpress/NickServ/ns_identify.php:	$ns->notice($nick->uid,IRC("MSG_IDENTIFY")." $account");
src/modules/wordpress/NickServ/ns_identify.php:	hook::run("auth", ['account' => $account, 'nick' => $nick->nick]);
src/modules/wordpress/NickServ/ns_register.php:	$ns->notice($nick->nick,"You must be invited to register.");
src/modules/wordpress/NickServ/ns_register.php:		$prep = $conn->prepare("SELECT * FROM ".$wpconfig['dbprefix']."users WHERE user_nicename = lower(?)");
src/modules/wordpress/NickServ/ns_register.php:		$prep->bind_param("s",$user);
src/modules/wordpress/NickServ/ns_register.php:		$prep->execute();
src/modules/wordpress/NickServ/ns_register.php:		$prep->store_result();
src/modules/wordpress/NickServ/ns_register.php:		if ($prep->num_rows == 0){ $prep->close(); return false; }
src/modules/wordpress/NickServ/ns_register.php:		$prep->close();
src/modules/wordpress/NickServ/ns_set_email.php:	if (!($account = IsLoggedIn($u['nick']))){ $ns->notice($u['UID'],"You must be logged in to use this command."); return; }
src/modules/wordpress/NickServ/ns_set_email.php:	if ($account->user_email == $email){ $ns->notice($nick->uid,"That is already your email address."); return; }
src/modules/wordpress/NickServ/ns_set_email.php:	if (!validate_email($email)){ $ns->notice($nick->uid,IRC("ERR_BADEMAIL")); return ; }
src/modules/wordpress/NickServ/ns_set_email.php:	$account->SetEmail($email);
src/modules/wordpress/NickServ/ns_set_email.php:	$ns->log($nick->nick." (account: $account->user_login) has updated their email address to be $email");
src/modules/wordpress/NickServ/ns_set_email.php:	$ns->notice($nick->uid,"Your email has been updated to be $email");
src/modules/wordpress/NickServ/ns_set_email.php:	$ns->notice($u['nick'],"EMAIL               Set the email address associated with your account.");
src/modules/wordpress/NickServ/ns_set_pass.php:	if (!($account = $nick->account))
src/modules/wordpress/NickServ/ns_set_pass.php:		$ns->notice($nick->uid,"You must be logged in to use this command.");
src/modules/wordpress/NickServ/ns_set_pass.php:		$ns->notice($nick->uid,"Syntax: SET PASSWORD <old pass> <new pass> <confirm new pass>");
src/modules/wordpress/NickServ/ns_set_pass.php:	$user = new WPUser($nick->account);
src/modules/wordpress/NickServ/ns_set_pass.php:	if (!$user->ConfirmPassword($parv[2]))
src/modules/wordpress/NickServ/ns_set_pass.php:		$ns->notice($nick->uid,IRC("MSG_IDENTIFAIL"));
src/modules/wordpress/NickServ/ns_set_pass.php:		$ns->notice($nick->uid,"New passwords do not match");
src/modules/wordpress/NickServ/ns_set_pass.php:	if (!$user->SetPassword($password))	
src/modules/wordpress/NickServ/ns_set_pass.php:		$ns->notice($nick->uid,"The operation failed.");
src/modules/wordpress/NickServ/ns_set_pass.php:		$ns->notice($nick->uid,"You have successfully updated your password.");
src/modules/wordpress/NickServ/ns_set_pass.php:	$ns->notice($u['nick'],"PASSWORD            Change your password.");
src/modules/wordpress/NickServ/ns_info.php:	if (!($nick = new User($u['nick']))->IsUser){ return; } // find 'em
src/modules/wordpress/NickServ/ns_info.php:	$wp_user = new WPUser($nick->account);
src/modules/wordpress/NickServ/ns_info.php:	$lookup = (isset($target->account)) ? $target->account : $parv[1];
src/modules/wordpress/NickServ/ns_info.php:	if ($target->IsUser)
src/modules/wordpress/NickServ/ns_info.php:		$ns->notice($nick->uid,"IRC information about $target->nick");
src/modules/wordpress/NickServ/ns_info.php:		$ns->notice($nick->uid," ");
src/modules/wordpress/NickServ/ns_info.php:		$ns->notice($nick->uid,"$target->nick is logged in as $target->account");
src/modules/wordpress/NickServ/ns_info.php:		$ns->notice($nick->uid,"$target->nick is $target->gecos");
src/modules/wordpress/NickServ/ns_info.php:		$ns->notice($nick->uid,"$target->nick is currently online.");
src/modules/wordpress/NickServ/ns_info.php:		if ($wp_user->IsUser)
src/modules/wordpress/NickServ/ns_info.php:			if ($wp_user->IsAdmin || $wp_target->user_id == $wp_user->user_id)
src/modules/wordpress/NickServ/ns_info.php:				$ns->notice($nick->uid,"Online from: $target->ident@$target->realhost");
src/modules/wordpress/NickServ/ns_info.php:				$ns->notice($nick->uid,"Online from: $target->ident@$target->cloak");
src/modules/wordpress/NickServ/ns_info.php:		if (function_exists("_is_disabled") && $wp_user->IsAdmin)
src/modules/wordpress/NickServ/ns_info.php:				$ns->notice($nick->uid," ");
src/modules/wordpress/NickServ/ns_info.php:				$ns->notice($nick->uid,"\x02This account has been disabled by an administrator.");
src/modules/wordpress/NickServ/ns_info.php:		$ns->notice($nick->uid," ");
src/modules/wordpress/NickServ/ns_info.php:	if (!$wp_target->IsUser)
src/modules/wordpress/NickServ/ns_info.php:	$ns->notice($nick->uid,"Website information about $wp_target->user_login");
src/modules/wordpress/NickServ/ns_info.php:	$ns->notice($nick->uid," ");
src/modules/wordpress/NickServ/ns_info.php:	if ($wp_user->IsUser)
src/modules/wordpress/NickServ/ns_info.php:		if ($wp_user->IsAdmin || $wp_target->user_id == $wp_user->user_id)
src/modules/wordpress/NickServ/ns_info.php:			$ns->notice($nick->uid,"Email addr: $wp_target->user_email");
src/modules/wordpress/NickServ/ns_info.php:	$ns->notice($nick->uid,"Registered: $wp_target->user_registered");
src/modules/wordpress/NickServ/ns_info.php:	$ns->notice($nick->uid,"Website role: ".$wp_target->role_array[0]);
src/modules/wordpress/NickServ/ns_info.php:	$ns->notice($nick->uid,"Number of website posts: ".$wp_target->user_meta->num_posts);
src/modules/wordpress/NickServ/ns_info.php:	$ns->notice($nick->uid," ");
src/modules/wordpress/NickServ/ns_info.php:	$ns->notice($nick,"INFO                ".IRC("HELPCMD_INFO"));
src/modules/wordpress/NickServ/ns_info.php:	$ns->notice($nick,"Command: INFO");
src/modules/wordpress/NickServ/ns_info.php:	$ns->notice($nick,"Automatically turns your private messaging off when you identify");
src/modules/wordpress/NickServ/ns_info.php:	$ns->notice($nick,"Syntax: /msg $ns->nick info <account>");
src/modules/wordpress/NickServ/ns_info.php:	$ns->notice($nick,"Example: /msg $ns->nick info Lamer23");
src/modules/wordpress/NickServ/ns_sasl.php:	$conn->query("CREATE TABLE IF NOT EXISTS $table (
src/modules/wordpress/NickServ/ns_sasl.php:			$ns->notice($row['UID'],"This account is registered. If this is your account,");
src/modules/wordpress/NickServ/ns_sasl.php:			$ns->notice($row['UID'],"please identify for it using:");
src/modules/wordpress/NickServ/ns_sasl.php:			$ns->notice($row['UID'],"/msg $ns->nick identify password");
src/modules/wordpress/NickServ/ns_sasl.php:			$ns->svs2mode($row['UID'],"+r");
src/modules/wordpress/NickServ/ns_sasl.php:	if (!$nick->IsUser)
src/modules/wordpress/NickServ/ns_sasl.php:		if (!wp_IsRegUser($nick->nick)){
src/modules/wordpress/NickServ/ns_sasl.php:		$ns->notice($nick->uid,"This account is registered. If this is your account,");
src/modules/wordpress/NickServ/ns_sasl.php:		$ns->notice($nick->uid,"please identify for it using:");
src/modules/wordpress/NickServ/ns_sasl.php:		$ns->notice($nick->uid,"/msg $ns->nick identify password");
src/modules/wordpress/NickServ/ns_sasl.php:	elseif ($nick->nick == $u['account']) {
src/modules/wordpress/NickServ/ns_sasl.php:		$ns->svs2mode($u['nick'],"+r");
src/modules/wordpress/NickServ/ns_sasl.php:		hook::run("auth", ['uid' => $nick->uid,'account' => $u['account'], 'nick' => $u['nick']]);
src/modules/wordpress/NickServ/ns_sasl.php:		$this->uid = $uid;
src/modules/wordpress/NickServ/ns_sasl.php:		$this->source = $source;
src/modules/wordpress/NickServ/ns_sasl.php:		$this->banned = "";
src/modules/wordpress/NickServ/ns_sasl.php:		$this->reason = "";
src/modules/wordpress/NickServ/ns_sasl.php:			$this->check = $this->check_pass($_SASL[$uid]["key"]);
src/modules/wordpress/NickServ/ns_sasl.php:			if ($param1 !== "EXTERNAL" && $this->check == 0)
src/modules/wordpress/NickServ/ns_sasl.php:			elseif ($param1 == "EXTERNAL" && $this->check == 0)
src/modules/wordpress/NickServ/ns_sasl.php:				$this->fail();
src/modules/wordpress/NickServ/ns_sasl.php:			elseif ($this->check > 0)
src/modules/wordpress/NickServ/ns_sasl.php:				$this->success($this->check);
src/modules/wordpress/NickServ/ns_sasl.php:				$this->check = $this->check_pass($param1);
src/modules/wordpress/NickServ/ns_sasl.php:				if ($this->check == 0)
src/modules/wordpress/NickServ/ns_sasl.php:					$this->fail();
src/modules/wordpress/NickServ/ns_sasl.php:				elseif ($this->check > 0)
src/modules/wordpress/NickServ/ns_sasl.php:					$this->success($this->check);
src/modules/wordpress/NickServ/ns_sasl.php:			$ns->log("[".$_SASL[$this->uid]['host']."|".$_SASL[$this->uid]['ip']."] $this->uid identified using SASL for account: $this->account $this->reason");
src/modules/wordpress/NickServ/ns_sasl.php:			S2S(":$ns->nick SVSLOGIN * $this->uid $this->account");
src/modules/wordpress/NickServ/ns_sasl.php:		SendSasl("$this->source $this->uid D S");
src/modules/wordpress/NickServ/ns_sasl.php:		fail2ban($_SASL[$this->uid]['ip'], 0);
src/modules/wordpress/NickServ/ns_sasl.php:		$client = new User($this->uid);
src/modules/wordpress/NickServ/ns_sasl.php:		if ($client->IsUser)
src/modules/wordpress/NickServ/ns_sasl.php:			hook::run("auth", ['uid' => $client->uid, 'account' => $this->account, 'nick' => $client->nick]);
src/modules/wordpress/NickServ/ns_sasl.php:		unset($_SASL[$this->uid]);
src/modules/wordpress/NickServ/ns_sasl.php:		$r = ($this->reason) ? " ".$this->reason : "";
src/modules/wordpress/NickServ/ns_sasl.php:		if (!isset($this->account) || !strlen($this->account))
src/modules/wordpress/NickServ/ns_sasl.php:			$this->account = "No account provided";
src/modules/wordpress/NickServ/ns_sasl.php:		$ns->log("[".$_SASL[$this->uid]['host']."|".$_SASL[$this->uid]['ip']."] $this->uid failed to identify ($this->account)$r");
src/modules/wordpress/NickServ/ns_sasl.php:		SendSasl("$this->source $this->uid D F");
src/modules/wordpress/NickServ/ns_sasl.php:		fail2ban($_SASL[$this->uid]['ip'],1);
src/modules/wordpress/NickServ/ns_sasl.php:		unset($_SASL[$this->uid]);
src/modules/wordpress/NickServ/ns_sasl.php:			if ($this->check_fingerprint($passwd))
src/modules/wordpress/NickServ/ns_sasl.php:		$this->account = $account;
src/modules/wordpress/NickServ/ns_sasl.php:			$this->reason = "(No account provided)";
src/modules/wordpress/NickServ/ns_sasl.php:			SendSASL("$this->source $this->uid D F");
src/modules/wordpress/NickServ/ns_sasl.php:		if (!$wp_user->IsUser)
src/modules/wordpress/NickServ/ns_sasl.php:			$this->reason = "(Account doesn't exist)";
src/modules/wordpress/NickServ/ns_sasl.php:			SendSASL("$this->source $this->uid D F");
src/modules/wordpress/NickServ/ns_sasl.php:				SendSASL("$this->source $this->uid D F");
src/modules/wordpress/NickServ/ns_sasl.php:				$this->reason = "(User is disabled on the website)";
src/modules/wordpress/NickServ/ns_sasl.php:		if (!$wp_user->confirmed)
src/modules/wordpress/NickServ/ns_sasl.php:			S2S("SVSLOGIN * $this->uid 0");
src/modules/wordpress/NickServ/ns_sasl.php:			SendSASL("$this->source $this->uid D F");
src/modules/wordpress/NickServ/ns_sasl.php:			$this->reason = "(User has not confirmed their email)";
src/modules/wordpress/NickServ/ns_sasl.php:		if ($wp_user->ConfirmPassword($pass) || $var = is_invite($account,$pass))
src/modules/wordpress/NickServ/ns_sasl.php:				$this->reason = "(Invitation code)";
src/modules/wordpress/NickServ/ns_sasl.php:				$this->reason = "(PLAIN)";
src/modules/wordpress/NickServ/ns_sasl.php:		$this->reason = "(Invalid password)";
src/modules/wordpress/NickServ/ns_sasl.php:		$prep = $conn->prepare("SELECT account FROM $table WHERE ip = ? and fingerprint = ? LIMIT 1");
src/modules/wordpress/NickServ/ns_sasl.php:		$prep->bind_param("ss", $_SASL[$this->uid]['ip'], $_SASL[$this->uid]["key"]);
src/modules/wordpress/NickServ/ns_sasl.php:		$prep->execute();
src/modules/wordpress/NickServ/ns_sasl.php:		if (!($result = $prep->get_result()))
src/modules/wordpress/NickServ/ns_sasl.php:		if ($result->num_rows == 0)
src/modules/wordpress/NickServ/ns_sasl.php:		$row = $result->fetch_assoc();
src/modules/wordpress/NickServ/ns_sasl.php:		if (_is_disabled($user) || !$user->confirmed)
src/modules/wordpress/NickServ/ns_sasl.php:		$this->reason = "(CertFP)";
src/modules/wordpress/NickServ/ns_sasl.php:		$this->account = $row['account'];
src/modules/wordpress/NickServ/ns_autoprivate.php:		$ns->notice($u['nick'],"Syntax: AUTOPRIVATE [on|off]");
src/modules/wordpress/NickServ/ns_autoprivate.php:	if (!$nick->account)
src/modules/wordpress/NickServ/ns_autoprivate.php:		$ns->notice($nick->uid,"You must be logged in to use that command.");
src/modules/wordpress/NickServ/ns_autoprivate.php:	$addel = ($setting) ? "+" : "-";
src/modules/wordpress/NickServ/ns_autoprivate.php:		$ns->notice($nick->uid,"An error occurred. Please contact a services administrator.");
src/modules/wordpress/NickServ/ns_autoprivate.php:	$ns->notice($nick->uid,"AUTOPRIVATE has been set to '$s'");
src/modules/wordpress/NickServ/ns_autoprivate.php:		$ns->svs2mode($nick->nick,"+D");
src/modules/wordpress/NickServ/ns_autoprivate.php:		$ns->notice($u['nick'],"Syntax: PRIVATE [on|off]");
src/modules/wordpress/NickServ/ns_autoprivate.php:	if (!$nick->account)
src/modules/wordpress/NickServ/ns_autoprivate.php:		$ns->notice($nick->uid,"You must be logged in to use that command.");
src/modules/wordpress/NickServ/ns_autoprivate.php:		if (($var = strpos($nick->usermode,"D")) == false)
src/modules/wordpress/NickServ/ns_autoprivate.php:			$ns->notice($nick->uid,"You are now blocking private messages. Let me just give you the +D lmfao");
src/modules/wordpress/NickServ/ns_autoprivate.php:			$ns->svs2mode($nick->nick,"+D");
src/modules/wordpress/NickServ/ns_autoprivate.php:			$ns->notice($nick->uid,"You are already blocking private messages.");
src/modules/wordpress/NickServ/ns_autoprivate.php:		if (strpos($nick->usermode,"D") !== false)
src/modules/wordpress/NickServ/ns_autoprivate.php:			$ns->notice($nick->uid,"You are now allowing private messages.");
src/modules/wordpress/NickServ/ns_autoprivate.php:			$ns->svs2mode($nick->nick,"-D");
src/modules/wordpress/NickServ/ns_autoprivate.php:			$ns->notice($nick->uid,"You are already allowing private messages");
src/modules/wordpress/NickServ/ns_autoprivate.php:		$ns->svs2mode($u['nick']->nick,"+D");
src/modules/wordpress/NickServ/ns_autoprivate.php:	$prep = $conn->prepare("SELECT * FROM dalek_account_settings WHERE account = ? AND setting_key = ?");
src/modules/wordpress/NickServ/ns_autoprivate.php:	$prep->bind_param("ss",$nick->account,$meta);
src/modules/wordpress/NickServ/ns_autoprivate.php:	$prep->execute();
src/modules/wordpress/NickServ/ns_autoprivate.php:	$result = $prep->get_result();
src/modules/wordpress/NickServ/ns_autoprivate.php:	if ($result->num_rows > 0)
src/modules/wordpress/NickServ/ns_autoprivate.php:		$prep = $conn->prepare("UPDATE dalek_account_settings SET setting_value = ? WHERE account = ? AND setting_key = ?");
src/modules/wordpress/NickServ/ns_autoprivate.php:		$prep->bind_param("sss",$setting,$nick->account,$meta);
src/modules/wordpress/NickServ/ns_autoprivate.php:		$prep->execute();
src/modules/wordpress/NickServ/ns_autoprivate.php:		$prep = $conn->prepare("INSERT INTO dalek_account_settings (account, setting_key, setting_value) VALUES (?, ?, ?)");
src/modules/wordpress/NickServ/ns_autoprivate.php:		$prep->bind_param("sss",$nick->account,$meta,$setting);
src/modules/wordpress/NickServ/ns_autoprivate.php:		$prep->execute();
src/modules/wordpress/NickServ/ns_autoprivate.php:	$prep = $prep = $conn->prepare("SELECT * FROM dalek_account_settings WHERE account = ? AND setting_key = ? AND setting_value = ?");
src/modules/wordpress/NickServ/ns_autoprivate.php:	$prep->bind_param("sss",$nick->account,$meta,$setting);
src/modules/wordpress/NickServ/ns_autoprivate.php:	$prep->execute();
src/modules/wordpress/NickServ/ns_autoprivate.php:	$result = $prep->get_result();
src/modules/wordpress/NickServ/ns_autoprivate.php:	if ($result->num_rows == 0)
src/modules/wordpress/NickServ/ns_autoprivate.php:	$prep = $conn->prepare("SELECT * FROM dalek_account_settings WHERE account = ? AND setting_key = ? AND setting_value = ?");
src/modules/wordpress/NickServ/ns_autoprivate.php:	$prep->bind_param("sss",$account,$key,$value);
src/modules/wordpress/NickServ/ns_autoprivate.php:	$prep->execute();
src/modules/wordpress/NickServ/ns_autoprivate.php:	$result = $prep->get_result();
src/modules/wordpress/NickServ/ns_autoprivate.php:	if ($result->num_rows > 0)
src/modules/wordpress/NickServ/ns_autoprivate.php:		while ($row = $result->fetch_assoc())
src/modules/wordpress/NickServ/ns_autoprivate.php:	$ns->notice($nick,"AUTOPRIVATE         Automatically disables your private messages when you login.");
src/modules/wordpress/NickServ/ns_autoprivate.php:	$ns->notice($nick,"Command: AUTOPRIVATE");
src/modules/wordpress/NickServ/ns_autoprivate.php:	$ns->notice($nick,"Syntax: /msg $ns->nick AUTOPRIVATE [on|off]");
src/modules/wordpress/NickServ/ns_autoprivate.php:	$ns->notice($nick,"Example: /msg $ns->nick AUTOPRIVATE on");
src/modules/wordpress/NickServ/ns_autoprivate.php:	$ns->notice($nick,"PRIVATE             Disable/enable PRIVATE (sets/unsets privdeaf +D)");
src/modules/wordpress/NickServ/ns_autoprivate.php:	$ns->notice($nick,"Command: PRIVATE");
src/modules/wordpress/NickServ/ns_autoprivate.php:	$ns->notice($nick,"Turns on PRIVATE mode; sets privdeaf (+D) on you");
src/modules/wordpress/NickServ/ns_autoprivate.php:	$ns->notice($nick,"Syntax: /msg $ns->nick PRIVATE [on|off]");
src/modules/wordpress/NickServ/ns_autoprivate.php:	$ns->notice($nick,"Example: /msg $ns->nick PRIVATE on");
src/modules/wordpress/NickServ/ns_set_showsocial.php:	if (!($account = IsLoggedIn($u['nick']))){ $ns->notice($u['UID'],"You must be logged in to use this command."); return; }
src/modules/wordpress/NickServ/ns_set_showsocial.php:		$ns->notice($u['uid'],"Syntax: /msg $ns->nick SET SHOWSOCIAL <on|off>");
src/modules/wordpress/NickServ/ns_set_showsocial.php:		SetSocial($nick->uid,$account);
src/modules/wordpress/NickServ/ns_set_showsocial.php:		DelSocial($nick->uid);
src/modules/wordpress/NickServ/ns_set_showsocial.php:	$ns->notice($nick->uid,"SHOWSOCIAL has been set to be '$is'");
src/modules/wordpress/NickServ/ns_set_showsocial.php:	$social = array('website' => $wp_user->user_url,
src/modules/wordpress/NickServ/ns_set_showsocial.php:						'facebook' => $wp_user->user_meta->facebook,
src/modules/wordpress/NickServ/ns_set_showsocial.php:						'twitter' => $wp_user->user_meta->twitter,
src/modules/wordpress/NickServ/ns_set_showsocial.php:						'LinkedIn' => $wp_user->user_meta->linkedin,
src/modules/wordpress/NickServ/ns_set_showsocial.php:						'dribbble' => $wp_user->user_meta->dribbble,
src/modules/wordpress/NickServ/ns_set_showsocial.php:						'Instagram' => $wp_user->user_meta->instagram,
src/modules/wordpress/NickServ/ns_set_showsocial.php:						'Pinterest' => $wp_user->user_meta->pinterest,
src/modules/wordpress/NickServ/ns_set_showsocial.php:						'WordPress' => $wp_user->user_meta->wordpress,
src/modules/wordpress/NickServ/ns_set_showsocial.php:						'GitHub' => $wp_user->user_meta->github,
src/modules/wordpress/NickServ/ns_set_showsocial.php:						'Medium' => $wp_user->user_meta->medium,
src/modules/wordpress/NickServ/ns_set_showsocial.php:						'YouTube' => $wp_user->user_meta->youtube,
src/modules/wordpress/NickServ/ns_set_showsocial.php:						'Vimeo' => $wp_user->user_meta->vimeo,
src/modules/wordpress/NickServ/ns_set_showsocial.php:						'vKontakte' => $wp_user->user_meta->vkontakte,
src/modules/wordpress/NickServ/ns_set_showsocial.php:						'Odnoklassniki' => $wp_user->user_meta->odnoklassniki,
src/modules/wordpress/NickServ/ns_set_showsocial.php:						'TiKTok' => $wp_user->user_meta->tiktok);
src/modules/wordpress/NickServ/ns_set_showsocial.php:		$prep = $conn->prepare("SELECT setting_value FROM dalek_account_settings WHERE account = ? AND setting_key = 'showsocial'");
src/modules/wordpress/NickServ/ns_set_showsocial.php:		$prep->bind_param("s",$account);
src/modules/wordpress/NickServ/ns_set_showsocial.php:		$prep->execute();
src/modules/wordpress/NickServ/ns_set_showsocial.php:		$result = $prep->get_result();
src/modules/wordpress/NickServ/ns_set_showsocial.php:		if ($result->num_rows == 0)
src/modules/wordpress/NickServ/ns_set_showsocial.php:			$prep = $conn->prepare("INSERT INTO dalek_account_settings (account, setting_key, setting_value) VALUES (?, ?, ?)");
src/modules/wordpress/NickServ/ns_set_showsocial.php:			$prep->bind_param("sss", $account, $opt, $option);
src/modules/wordpress/NickServ/ns_set_showsocial.php:			$prep->execute();
src/modules/wordpress/NickServ/ns_set_showsocial.php:			while($row = $result->fetch_assoc())
src/modules/wordpress/NickServ/ns_set_showsocial.php:					$prep = $conn->prepare("UPDATE dalek_account_settings SET setting_value = ? WHERE account = ? AND setting_key = ?");
src/modules/wordpress/NickServ/ns_set_showsocial.php:					$prep->bind_param("sss", $option, $account, $opt);
src/modules/wordpress/NickServ/ns_set_showsocial.php:					$prep->execute();
src/modules/wordpress/NickServ/ns_set_showsocial.php:	$prep->close();
src/modules/wordpress/NickServ/ns_set_showsocial.php:		$prep = $conn->prepare("SELECT setting_value FROM dalek_account_settings WHERE account = ? AND setting_key = 'showsocial'");
src/modules/wordpress/NickServ/ns_set_showsocial.php:		$prep->bind_param("s", $account);
src/modules/wordpress/NickServ/ns_set_showsocial.php:		$prep->execute();
src/modules/wordpress/NickServ/ns_set_showsocial.php:		$result = $prep->get_result();
src/modules/wordpress/NickServ/ns_set_showsocial.php:		if ($result->num_rows == 0){ return false; }
src/modules/wordpress/NickServ/ns_set_showsocial.php:			$row = $result->fetch_assoc();
src/modules/wordpress/NickServ/ns_set_showsocial.php:	$prep->close();;
src/modules/wordpress/NickServ/ns_set_showsocial.php:	$ns->notice($u['nick'],"SHOWSOCIAL          Show your social links in your NickServ INFO and /WHOIS.");
src/modules/third/ns_cheek.php:		 * Just for a kind of 'all-in-one' thing
src/modules/third/ns_cheek.php:		$ns->notice($nick->uid,
src/modules/third/elmer.php:		if (!CommandAdd($this->name, 'ELMER', 'elmer::cmd_elmer', 1))
src/modules/third/elmer.php:		if (!CommandAdd($this->name, 'DELMER', 'elmer::cmd_elmer', 1))
src/modules/third/elmer.php:	 * It's important to note here that the elmer check is built-in to source...
src/modules/third/elmer.php:				S2S("NOTICE $nick->uid :$target->nick is already talking like Elmer.");
src/modules/third/elmer.php:			S2S("NOTICE $nick->uid :$target->nick is now talking like Elmer.");
src/modules/third/elmer.php:			array_push(self::$elmer,strtolower($target->nick));
src/modules/third/elmer.php:				S2S("NOTICE $nick->uid :$target->nick wasn't talking like Elmer anyway.");
src/modules/third/elmer.php:			S2S("NOTICE $nick->uid :$target->nick is no longer talking like Elmer.");
src/modules/third/elmer.php:			  if ($key == strtolower($target->nick)) /* Find it */
src/modules/third/elmer.php:		/* You don't HAVE to return, butt-fuck it */
src/modules/third/elmer.php:	if (!$user->IsUser)
src/modules/third/elmer.php:	if (in_array(strtolower($user->client->nick),elmer::$elmer))
src/modules/privmsg.php:		if (!CommandAdd($this->name, 'PRIVMSG', 'privmsg::cmd_privmsg', 1))
src/modules/privmsg.php:		update_last($u['nick']->nick);
src/modules/privmsg.php:		if (!isset($client->nick))
src/modules/privmsg.php:					if (!strcasecmp($cmd->client,$client->nick) && !strcasecmp($cmd->command,$parv[1]))
src/modules/privmsg.php:						$client->notice($nick->uid,"Help for command $cmd->command");
src/modules/privmsg.php:						$client->notice($nick->uid,$cmd->extended_help,"/msg $client->nick $cmd->syntax");
src/modules/privmsg.php:			if ($client->nick == "OperServ" && !IsOper($nick))
src/modules/privmsg.php:				$client->notice($nick->uid,"Permission denied.");
src/modules/privmsg.php:			$client->notice($nick->uid,ul("Help available for $client->nick:"));
src/modules/privmsg.php:				$client->notice($nick->uid,"No commands have been loaded.");
src/modules/privmsg.php:				if (!strcasecmp($cmd->client,$client->nick))
src/modules/privmsg.php:					$client->notice($nick->uid,clean_align($cmd->command).$cmd->help_cmd_entry);
src/modules/privmsg.php:			if (!$f || !isset($client->modinfo))
src/modules/privmsg.php:				$client->notice($nick->uid,"No commands have been loaded for this pseudoclient yet.");
src/modules/privmsg.php:			if (!strcasecmp($cmd->client,$client->nick) && !strcasecmp($c,$cmd->command))
src/modules/privmsg.php:				$function = $cmd->function;
src/modules/privmsg.php:			$client->notice($nick->uid,	"Unrecognised command: \"".bold($c)."\"",
src/modules/privmsg.php:							bold("/msg $client->nick HELP"));
src/modules/privmsg.php:        $prep = $conn->prepare("UPDATE dalek_user SET away = ?, awaymsg = ? WHERE UID = ?");
src/modules/privmsg.php:        $prep->bind_param("sss", $away, $msg, $nick->uid);
src/modules/privmsg.php:        $prep->execute();
src/modules/privmsg.php:	$times = mb_substr($rand,-2);
src/modules/umode2.php:		if (!CommandAdd($this->name, 'UMODE2', 'umode2::cmd_umode2', 1))
src/modules/umode2.php:			S2S("461 $nick->nick $cmd :Need more parameters.");
src/modules/umode2.php:        $nick->SetMode($u['dest']);
src/modules/umode2.php:		/* You don't HAVE to return, butt-fuck it */
src/modules/away.php:		if (!CommandAdd($this->name, 'AWAY', 'away::cmd_away', 1))
src/modules/away.php:		/* You don't HAVE to return, butt-fuck it */
src/modules/away.php:        $prep = $conn->prepare("UPDATE dalek_user SET away = ?, awaymsg = ? WHERE UID = ?");
src/modules/away.php:        $prep->bind_param("sss", $away, $msg, $nick->uid);
src/modules/away.php:        $prep->execute();
src/modules/version.php:		if (!CommandAdd($this->name, 'VERSION', 'version::cmd_version', 1))
src/modules/version.php:		/* You don't HAVE to return, butt-fuck it */
src/modules/version.php:    	S2S("351 $nick->nick Dalek-Services ".$cf['servicesname']." 0 [".php_uname()."]");
src/modules/chgident.php:		if (!CommandAdd($this->name, 'CHGIDENT', 'chgident::cmd_chgident', 1))
src/modules/chgident.php:		$prep = $conn->prepare("UPDATE dalek_user SET ident = ? WHERE UID = ?");
src/modules/chgident.php:		$prep->bind_param("ss",$ident,$uid);
src/modules/chgident.php:		$prep->execute();
src/modules/nick.php:		if (!CommandAdd($this->name, 'NICK', 'nick::cmd_nick', 0))
src/modules/nick.php:        update_nick($u['nick']->uid,$parv[0],$parv[1]);
src/modules/nick.php:        if (!isset($nick->account))
src/modules/nick.php:        if (!strcasecmp($nick->account,$nick->nick))
src/modules/nick.php:            S2S(":$ns->nick SVS2MODE $nick->nick +r");
src/modules/sethost.php:		if (!CommandAdd($this->name, 'SETHOST', 'sethost::cmd_sethost', 1))
src/modules/sethost.php:		$prep = $conn->prepare("UPDATE dalek_user SET cloak = ? WHERE UID = ?");
src/modules/sethost.php:		$prep->bind_param("ss",$host,$nick->uid);
src/modules/sethost.php:		$prep->execute();
src/modules/NickServ/nickserv.php.bak:	if (strtolower($dest) == strtolower($ns->nick) || $dest == $nickserv['uid']){ 
src/modules/NickServ/nickserv.php.bak:		$ns->notice($nick,chr(1)."VERSION Dalek IRC Services v0.2 on ".$cf['servicesname']." Protocol: ".$cf['proto'].chr(1));
src/modules/NickServ/nickserv.php.bak:		if (!is_numeric(str_replace(chr(1),"",$parv[1]))){ $ns->sendraw(":69L SVSKILL $nick :Client misbehaving"); return; }
src/modules/NickServ/nickserv.php.bak:		$ns->notice($nick,chr(1)."PING ".$parv[1].chr(1));
src/modules/NickServ/ns_certfp.php:			$ns->notice($nick->uid,"Incorrect syntax");
src/modules/NickServ/ns_certfp.php:		if (!$nick->account)
src/modules/NickServ/ns_certfp.php:			$ns->notice($nick->uid,"You need to be logged in to use that command.");
src/modules/NickServ/ns_certfp.php:			if (!isset($nick->meta->certfp))
src/modules/NickServ/ns_certfp.php:				$ns->notice($nick->uid,"You do not have a fingerprint to store.");
src/modules/NickServ/ns_certfp.php:			$ns->notice($nick->uid, ns_certfp::add_certfp($nick->ip,$nick->account,$nick->meta->certfp));
src/modules/NickServ/ns_certfp.php:				$ns->notice($nick->uid,"You did not specify a fingerprint to delete.");
src/modules/NickServ/ns_certfp.php:			$ns->notice($nick->uid, ns_certfp::del_certfp($nick->ip,$nick->account,$parv[2]));
src/modules/NickServ/ns_certfp.php:			$prep = $conn->prepare("SELECT * FROM $table WHERE account = ?");
src/modules/NickServ/ns_certfp.php:			$prep->bind_param("s",$nick->account);
src/modules/NickServ/ns_certfp.php:			$prep->execute();
src/modules/NickServ/ns_certfp.php:			$result = $prep->get_result();
src/modules/NickServ/ns_certfp.php:			if (!$result || $result->num_rows == 0)
src/modules/NickServ/ns_certfp.php:				$ns->notice($nick->uid,"You do not have any Certificate Fingerprints saved.");
src/modules/NickServ/ns_certfp.php:			$ns->notice($nick->uid,"Listing your saved Certificate Fingerprints:");
src/modules/NickServ/ns_certfp.php:			while ($row = $result->fetch_assoc())
src/modules/NickServ/ns_certfp.php:				$ns->notice($nick->uid,$row['fingerprint']);
src/modules/NickServ/ns_certfp.php:		$prep = $conn->prepare("SELECT * FROM $table WHERE ip = ? AND account = ? and fingerprint = ? LIMIT 1");
src/modules/NickServ/ns_certfp.php:		$prep->bind_param("sss",$ip,$account,$fp);
src/modules/NickServ/ns_certfp.php:		$prep->execute();
src/modules/NickServ/ns_certfp.php:		$result = $prep->get_result();
src/modules/NickServ/ns_certfp.php:		if ($result->num_rows == 1)
src/modules/NickServ/ns_certfp.php:		$prep = $conn->prepare("INSERT INTO $table (account, ip, fingerprint) VALUES (?, ?, ?)");
src/modules/NickServ/ns_certfp.php:		$prep->bind_param("sss", $account, $ip, $fp);
src/modules/NickServ/ns_certfp.php:		$prep->execute();
src/modules/NickServ/ns_certfp.php:		$prep = $conn->prepare("DELETE FROM $table WHERE account = ? AND ip = ? AND  fingerprint = ?");
src/modules/NickServ/ns_certfp.php:		$prep->bind_param("sss", $account, $ip, $fp);
src/modules/NickServ/ns_certfp.php:		$prep->execute();
src/modules/NickServ/ns_logout.php:	if (!IsLoggedIn($nick->uid)){ $ns->notice($nick->uid,IRC("ERR_NOTLOGGEDIN")); return; }
src/modules/NickServ/ns_logout.php:	$account = $nick->account;
src/modules/NickServ/ns_logout.php:	$conn->query = "UPDATE dalek_user SET account=NULL WHERE UID='".$nick->uid."'";
src/modules/NickServ/ns_logout.php:	$ns->svslogin($nick->uid,"0");
src/modules/NickServ/ns_logout.php:	$ns->svs2mode($nick->uid,"-r");
src/modules/NickServ/ns_logout.php:	$ns->log($nick->nick." (".$nick->uid.") ".IRC("LOG_LOGGEDOUT")." $account"); 
src/modules/NickServ/ns_logout.php:	$ns->notice($nick->uid,IRC("MSG_LOGGEDOUT"));
src/modules/NickServ/ns_logout.php:	$ns->notice($nick,"LOGOUT              ".IRC("HELPCMD_LOGOUT"));
src/modules/NickServ/ns_metadata.php://	https://github.com/pirc-pl/unrealircd-modules/blob/master/README.md#metadata
src/modules/NickServ/ns_metadata.php:		if (!CommandAdd($this->name, "METADATA", 'ns_metadata::usermeta', 0))
src/modules/NickServ/ns_set_regainonsasl.php:	if (!($account = $nick->account))
src/modules/NickServ/ns_set_regainonsasl.php:		$ns->notice($nick->uid,"You must be logged in to use this command.");
src/modules/NickServ/ns_set_regainonsasl.php:			$ns->notice($nick->uid,"REGAINONSASL is already set to 'on'");
src/modules/NickServ/ns_set_regainonsasl.php:			$ns->notice($nick->uid,"REGAINONSASL is now set to 'on'");
src/modules/NickServ/ns_set_regainonsasl.php:			$ns->notice($nick->uid,"REGAINONSASL is already set to 'off'");
src/modules/NickServ/ns_set_regainonsasl.php:			$ns->notice($nick->uid,"REGAINONSASL is now set to 'off'");
src/modules/NickServ/ns_set_regainonsasl.php:		$prep = $conn->prepare("SELECT setting_value FROM dalek_account_settings WHERE account = ? AND setting_key = 'regainonsasl'");
src/modules/NickServ/ns_set_regainonsasl.php:		$prep->bind_param("s",$account);
src/modules/NickServ/ns_set_regainonsasl.php:		$prep->execute();
src/modules/NickServ/ns_set_regainonsasl.php:		$result = $prep->get_result();
src/modules/NickServ/ns_set_regainonsasl.php:		if ($result->num_rows == 0)
src/modules/NickServ/ns_set_regainonsasl.php:			$prep = $conn->prepare("INSERT INTO dalek_account_settings (account, setting_key, setting_value) VALUES (?, ?, ?)");
src/modules/NickServ/ns_set_regainonsasl.php:			$prep->bind_param("sss", $account, $opt, $option);
src/modules/NickServ/ns_set_regainonsasl.php:			$prep->execute();
src/modules/NickServ/ns_set_regainonsasl.php:			while($row = $result->fetch_assoc())
src/modules/NickServ/ns_set_regainonsasl.php:					$prep = $conn->prepare("UPDATE dalek_account_settings SET setting_value = ? WHERE account = ? AND setting_key = ?");
src/modules/NickServ/ns_set_regainonsasl.php:					$prep->bind_param("sss", $option, $account, $opt);
src/modules/NickServ/ns_set_regainonsasl.php:					$prep->execute();
src/modules/NickServ/ns_set_regainonsasl.php:	$prep->close();
src/modules/NickServ/ns_set_regainonsasl.php:		$prep = $conn->prepare("SELECT setting_value FROM dalek_account_settings WHERE account = ? AND setting_key = 'regainonsasl'");
src/modules/NickServ/ns_set_regainonsasl.php:		$prep->bind_param("s", $account);
src/modules/NickServ/ns_set_regainonsasl.php:		$prep->execute();
src/modules/NickServ/ns_set_regainonsasl.php:		$result = $prep->get_result();
src/modules/NickServ/ns_set_regainonsasl.php:		if ($result->num_rows == 0){ return false; }
src/modules/NickServ/ns_set_regainonsasl.php:			$row = $result->fetch_assoc();
src/modules/NickServ/ns_set_regainonsasl.php:	$prep->close();;
src/modules/NickServ/ns_set_regainonsasl.php:			if ($person->uid !== $u['uid']){
src/modules/NickServ/ns_set_regainonsasl.php:				$ison = get_chans($person->uid);
src/modules/NickServ/ns_set_regainonsasl.php:				$ns->sendraw(":$ns->nick KILL $person->nick :Automatic recovery in progress");
src/modules/NickServ/ns_set_regainonsasl.php:				$person->exit();
src/modules/NickServ/ns_set_regainonsasl.php:			if ($recov->IsUser)
src/modules/NickServ/ns_set_regainonsasl.php:				$ns->sendraw(":".$cf['sid']." SVSNICK $recov->uid ".$recovery[$u['uid']]." $servertime");
src/modules/NickServ/ns_set_regainonsasl.php:		$ns->sendraw(":".$cf['sid']." SVSNICK ".$u['nick']." ".$recovery[$u['uid']]." $servertime"); $recovery[$u['uid']] = NULL;
src/modules/NickServ/ns_set_regainonsasl.php:	$ns->notice($u['nick'],"REGAINONSASL        Automatically regain your nick when you identify through SASL");
src/modules/NickServ/ns_regain.php.old:	if (!($nick = new User($u['nick']))->IsUser)
src/modules/NickServ/ns_regain.php.old:		$ns->notice($nick->uid,"Incorrect parameters.");
src/modules/NickServ/ns_regain.php.old:	if (!($nickToRegain = new User($account))->IsUser)
src/modules/NickServ/ns_regain.php.old:		$ns->notice($nick->uid,IRC("ERR_NICKNOTONLINE"));
src/modules/NickServ/ns_regain.php.old:	if ($nickToRegain->uid == $nick->uid)
src/modules/NickServ/ns_regain.php.old:		$ns->notice($nick->uid,"You are already using that nick.");
src/modules/NickServ/ns_regain.php.old:		$ns->notice($nick->uid,IRC("MSG_IDENTFAIL"));
src/modules/NickServ/ns_regain.php.old:	$ns->log($nickToRegain->nick." (".$nickToRegain->uid.") ".IRC("LOG_REGAIN")." ".$nick->nick." (".$nick->uid.")");
src/modules/NickServ/ns_regain.php.old:	$ns->sendraw(":$ns->uid KILL ".$nickToRegain->nick." :".IRC("REGAIN_QUITMSG"));
src/modules/NickServ/ns_regain.php.old:	$ns->sendraw(":".$cf['sid']." SVSNICK ".$nick->uid." ".$nickToRegain->nick." $servertime");
src/modules/NickServ/ns_regain.php.old:	df_login($nickToRegain->nick,$account);
src/modules/NickServ/ns_regain.php.old:	$ns->svslogin($nick->uid,$account);
src/modules/NickServ/ns_regain.php.old:	$ns->svs2mode($nick->uid,"+r");
src/modules/NickServ/ns_regain.php.old:	$ns->notice($nick->uid,"$account ".IRC("MSG_REGAIN"));
src/modules/NickServ/ns_regain.php.old:	$ns->notice($nick,"REGAIN              ".IRC("HELPCMD_REGAIN"));
src/modules/NickServ/UltimateMember/um_is_bot.php:		if (!isset($wpuser->user_meta->robot))
src/modules/NickServ/UltimateMember/um_is_bot.php:		$stuff = unserialize($wpuser->user_meta->robot);
src/modules/NickServ/UltimateMember/um_is_bot.php:				S2S("SVS2MODE $nick->nick +B");
src/modules/NickServ/UltimateMember/um_meta_profilepic.php://			profile front-end plugin avaialable.
src/modules/NickServ/UltimateMember/um_meta_profilepic.php:		$tok = substr($nick->ident, 0, 3);
src/modules/NickServ/UltimateMember/um_meta_profilepic.php:		$tok2 = mb_substr($nick->ident, 3);
src/modules/NickServ/UltimateMember/um_meta_profilepic.php:		$irccloudcdn = "https://static.irccloud-cdn.com/avatar-redirect/";
src/modules/NickServ/UltimateMember/um_meta_profilepic.php:		if (!isset($wp_user->user_email))
src/modules/NickServ/UltimateMember/um_meta_profilepic.php:		$email = $wp_user->user_email;
src/modules/NickServ/UltimateMember/um_meta_profilepic.php:		$prep = $conn->prepare("SELECT * FROM $table WHERE meta_key = 'profile_photo' AND user_id = ?");
src/modules/NickServ/UltimateMember/um_meta_profilepic.php:		$prep->bind_param("i",$user->user_id);
src/modules/NickServ/UltimateMember/um_meta_profilepic.php:		$prep->execute();
src/modules/NickServ/UltimateMember/um_meta_profilepic.php:		$result = $prep->get_result();
src/modules/NickServ/UltimateMember/um_meta_profilepic.php:		if (!$result || !$result->num_rows)
src/modules/NickServ/UltimateMember/um_meta_profilepic.php:		$row = $result->fetch_assoc();
src/modules/NickServ/UltimateMember/um_meta_profilepic.php:		$url = str_replace("https://","https://i0.wp.com/",$wpconfig['siteurl']."/wp-content/uploads/ultimatemember/".$user->user_id."/".$type);
src/modules/NickServ/UltimateMember/um_meta_profilepic.php:		$u['nick'] = $nick->nick;
src/modules/NickServ/UltimateMember/um_meta_profilepic.php:		$u['account'] = (isset($nick->account)) ? $nick->account : false;
src/modules/NickServ/UltimateMember/um_meta_profilepic.php:			$ns->notice($u['nick'],"Your avatar has been updated");
src/modules/NickServ/UltimateMember/um_meta_profilepic.php:			$ns->notice($u['nick'],"There was a problem fetching your avatar.");
src/modules/NickServ/ns_set_email.php:	if (!($account = IsLoggedIn($u['nick']))){ $ns->notice($u['UID'],"You must be logged in to use this command."); return; }
src/modules/NickServ/ns_set_email.php:	if ($account['email'] == $email){ $ns->notice($nick->uid,"That is already your email address."); return; }
src/modules/NickServ/ns_set_email.php:	if (!validate_email($email)){ $ns->notice($nick->uid,IRC("ERR_BADEMAIL")); return ; }
src/modules/NickServ/ns_set_email.php:	if (!df_UpdateEmail($account['display'],$email)){ $ns->notice($nick->uid,"An error occurred."); return; }
src/modules/NickServ/ns_set_email.php:	$ns->log($nick->nick." (account: ".$account['display'].") has updated their email address to be $email");
src/modules/NickServ/ns_set_email.php:	$ns->notice($nick->uid,"Your email has been updated to be $email");
src/modules/NickServ/ns_set_email.php:		$prep = $conn->prepare("UPDATE dalek_accounts SET email = ? WHERE display = ?");
src/modules/NickServ/ns_set_email.php:		$prep->bind_param("ss",$email,$account);
src/modules/NickServ/ns_set_email.php:		$prep->execute();
src/modules/NickServ/ns_set_email.php:		$prep->close();
src/modules/NickServ/ns_set_email.php:	$ns->notice($u['nick'],"EMAIL               Set the email address associated with your account.");
src/modules/NickServ/ns_set_pass.php:	if (!($account = $nick->account))
src/modules/NickServ/ns_set_pass.php:		$ns->notice($nick->uid,"You must be logged in to use this command.");
src/modules/NickServ/ns_set_pass.php:		$ns->notice($nick->uid,"Syntax: SET PASSWORD <old pass> <new pass> <confirm new pass>");
src/modules/NickServ/ns_set_pass.php:		$ns->notice($nick->uid,IRC("MSG_IDENTIFAIL"));
src/modules/NickServ/ns_set_pass.php:		$ns->notice($nick->uid,"New passwords do not match");
src/modules/NickServ/ns_set_pass.php:	df_UpdatePass($nick->account,$password);
src/modules/NickServ/ns_set_pass.php:	$ns->notice($nick->uid,"You have successfully updated your password.");
src/modules/NickServ/ns_set_pass.php:		$prep = $conn->prepare("UPDATE dalek_accounts SET pass = ? WHERE display = ?");
src/modules/NickServ/ns_set_pass.php:		$prep->bind_param("ss",$password,$account);
src/modules/NickServ/ns_set_pass.php:		$prep->execute();
src/modules/NickServ/ns_set_pass.php:		$prep->close();
src/modules/NickServ/ns_set_pass.php:	$ns->notice($u['nick'],"PASSWORD            Change your password.");
src/modules/NickServ/ns_pronouns.php:\\	Desc: Auto-join on identify.
src/modules/NickServ/ns_pronouns.php:		$user = $nick->wp;
src/modules/NickServ/ns_pronouns.php:		if (!$nick->account)
src/modules/NickServ/ns_pronouns.php:		$c = unserialize($user->user_meta->pronouns);
src/modules/NickServ/ns_pronouns.php:			self::set_pronoun($nick->uid,$c,$i);
src/modules/NickServ/ns_pronouns.php:		self::del_user_cache($user->user_id);
src/modules/NickServ/ns_pronouns.php:		specialwhois::del_swhois($nick->uid,"pronouns");
src/modules/NickServ/ns_pronouns.php:			if (!isset($nick->wp->user_meta->pronouns))
src/modules/NickServ/ns_pronouns.php:				$ns->notice($nick->uid,"You don't have any pronouns set. You can set them by navigating<lf>to your profile on the  website to define your pronouns: ".$wpconfig['siteurl']."/user/$nick->account<lf>and clicking 'Edit Profile'");
src/modules/NickServ/ns_pronouns.php:			$opts = unserialize($nick->wp->user_meta->show_irc);
src/modules/NickServ/ns_pronouns.php:			$prep = $conn->prepare("UPDATE ".$wpconfig['dbprefix']."usermeta set meta_value = ? WHERE user_id = ? AND meta_key = 'show_irc'");
src/modules/NickServ/ns_pronouns.php:			$prep->bind_param("si",$opts,$user->wp->user_id);
src/modules/NickServ/ns_pronouns.php:			$prep->execute();
src/modules/NickServ/ns_pronouns.php:			$ns->notice($nick->uid,"You have set to have your pronouns visible in your WHOIS");
src/modules/NickServ/ns_pronouns.php:			if (!isset($nick->wp->user_meta->pronouns))
src/modules/NickServ/ns_pronouns.php:				$ns->notice($nick->uid,"You don't have any pronouns set. Navigate to your profile on the<lf>website to define your pronouns: ".$wpconfig['siteurl']."/user/$nick->account<lf>and clicking 'Edit Profile'");
src/modules/NickServ/ns_pronouns.php:			$opts = unserialize($nick->wp->user_meta->show_irc);
src/modules/NickServ/ns_pronouns.php:			$prep = $conn->prepare("UPDATE ".$wpconfig['dbprefix']."usermeta SET meta_value = ? WHERE user_id = ? AND meta_key = 'show_irc'");
src/modules/NickServ/ns_pronouns.php:			$prep->bind_param("si",$opts,$nick->wp->user_id);
src/modules/NickServ/ns_pronouns.php:			$prep->execute();
src/modules/NickServ/ns_pronouns.php:			$ns->notice($nick->uid,"Your pronouns are no longer visible in your /WHOIS");
src/modules/NickServ/ns_pronouns.php:		$umeta = $user->wp->user_meta;
src/modules/NickServ/ns_pronouns.php:		if (!isset($umeta->pronouns))
src/modules/NickServ/ns_pronouns.php:		if (!isset($umeta->show_irc))
src/modules/NickServ/ns_pronouns.php:		$show_options = unserialize($umeta->show_irc);
src/modules/NickServ/ns_pronouns.php:		$array = unserialize($umeta->pronouns);
src/modules/NickServ/ns_pronouns.php:			specialwhois::del_swhois($user->uid,"pronouns");
src/modules/NickServ/ns_pronouns.php:			self::set_pronoun($user->uid,$array,1);
src/modules/NickServ/ns_pronouns.php:			ns_metadata::send_usermeta(NULL,$user->nick,"pronouns",$pronouns);
src/modules/NickServ/ns_pronouns.php:			$pronouns .= str_replace(" - ","/",$pnoun).", ";
src/modules/NickServ/ns_pronouns.php:		$conn->query("DELETE FROM ".$wpconfig['dbprefix']."options WHERE option_name = 'um_cache_userdata_".$wpid."'");
src/modules/NickServ/ns_pronouns.php:		if (!isset($user->wp->user_meta->show_irc))
src/modules/NickServ/ns_pronouns.php:		$show_options = unserialize($user->wp->user_meta->show_irc);
src/modules/NickServ/ns_info.php:		$wp_user = ($nick->IsWordPressUser) ? $nick->wp : NULL;
src/modules/NickServ/ns_info.php:			$parv[1] = $u['nick']->nick;
src/modules/NickServ/ns_info.php:		$wp_target = ($target->IsWordPressUser) ? $target->wp : new WPUser($parv[1]);
src/modules/NickServ/ns_info.php:		if (!$target->IsUser && !$target->IsWordPressUser)
src/modules/NickServ/ns_info.php:			$ns->notice($nick->uid,"That nick is not online and is not registered.");
src/modules/NickServ/ns_info.php:		if ($target->IsUser)
src/modules/NickServ/ns_info.php:			$ns->notice($nick->uid,"IRC information about $target->nick");
src/modules/NickServ/ns_info.php:			$ns->notice($nick->uid," ");
src/modules/NickServ/ns_info.php:			$ns->notice($nick->uid,"$target->nick is logged in as $target->account");
src/modules/NickServ/ns_info.php:			$ns->notice($nick->uid,"$target->nick is $target->gecos");
src/modules/NickServ/ns_info.php:			$ns->notice($nick->uid,"$target->nick is currently online.");
src/modules/NickServ/ns_info.php:				if ($wp_user->IsAdmin || $wp_target->user_id == $wp_user->user_id)
src/modules/NickServ/ns_info.php:					$ns->notice($nick->uid,"Online from: $target->ident@$target->realhost");
src/modules/NickServ/ns_info.php:					$ns->notice($nick->uid,"Online from: $target->ident@$target->cloak");
src/modules/NickServ/ns_info.php:			$ns->notice($nick->uid," ");
src/modules/NickServ/ns_info.php:		$ns->notice($nick->uid,"Account information about $wp_target->user_login");
src/modules/NickServ/ns_info.php:		$ns->notice($nick->uid," ");
src/modules/NickServ/ns_info.php:		if ($wp_user->IsUser)
src/modules/NickServ/ns_info.php:			if ($wp_user->IsAdmin || $wp_target->user_id == $wp_user->user_id)
src/modules/NickServ/ns_info.php:				$ns->notice($nick->uid,"Email addr: $wp_target->user_email");
src/modules/NickServ/ns_info.php:		$ns->notice($nick->uid,"Registered: $wp_target->user_registered");
src/modules/NickServ/ns_info.php:		foreach($wp_target->role_array as $role)
src/modules/NickServ/ns_info.php:		$ns->notice($nick->uid,"Permissions: $roles");
src/modules/NickServ/ns_info.php:		$ns->notice($nick->uid,"Number of website posts: ".$wp_target->user_meta->num_posts);
src/modules/NickServ/ns_info.php:		$ns->notice($nick->uid," ");
src/modules/NickServ/ns_info.php:		if (function_exists("_is_disabled") && $wp_user->IsAdmin)
src/modules/NickServ/ns_info.php:					$ns->notice($nick->uid,"This account has been disabled by an administrator.");
src/modules/NickServ/ns_regain.php:		$account = $nick->account ?? NULL;
src/modules/NickServ/ns_regain.php:			$ns->notice($nick->uid,"Incorrect parameters.");
src/modules/NickServ/ns_regain.php:		if (!($nickToRegain = new User($account))->IsUser)
src/modules/NickServ/ns_regain.php:			$ns->notice($nick->uid,IRC("ERR_NICKNOTONLINE"));
src/modules/NickServ/ns_regain.php:		if ($nickToRegain->uid == $nick->uid)
src/modules/NickServ/ns_regain.php:			$ns->notice($nick->uid,"You are already using that nick.");
src/modules/NickServ/ns_regain.php:			$ns->notice($nick->uid,IRC("MSG_IDENTFAIL"));
src/modules/NickServ/ns_regain.php:		$ns->log($nickToRegain->nick." (".$nickToRegain->uid.") ".IRC("LOG_REGAIN")." ".$nick->nick." (".$nick->uid.")");
src/modules/NickServ/ns_regain.php:		$ns->sendraw(":$ns->uid KILL ".$nickToRegain->nick." :".IRC("REGAIN_QUITMSG"));
src/modules/NickServ/ns_regain.php:		$ns->sendraw(":".$cf['sid']." SVSNICK ".$nick->uid." ".$nickToRegain->nick." $servertime");
src/modules/NickServ/ns_regain.php:		df_login($nickToRegain->nick,$account);
src/modules/NickServ/ns_regain.php:		$ns->svslogin($nick->uid,$account);
src/modules/NickServ/ns_regain.php:		$ns->svs2mode($nick->uid,"+r");
src/modules/NickServ/ns_regain.php:		$ns->notice($nick->uid,"$account ".IRC("MSG_REGAIN"));
src/modules/NickServ/ns_ajoin.php:\\	Desc: Auto-join on identify.
src/modules/NickServ/ns_ajoin.php:		$conn->query("CREATE TABLE IF NOT EXISTS dalek_ajoin (
src/modules/NickServ/ns_ajoin.php:		$help_string = "View and change your auto-join list";
src/modules/NickServ/ns_ajoin.php:		$account = $nick->account ?? NULL;
src/modules/NickServ/ns_ajoin.php:		if (!$account){ $ns->notice($nick->nick,IRC("ERR_NOTLOGGEDIN")); return; }
src/modules/NickServ/ns_ajoin.php:			if (!($channel = find_channel($parv[2]))){ $ns->notice($nick->nick,"Channel does not exist"); return; }
src/modules/NickServ/ns_ajoin.php:			if (($reply = ns_ajoin::ajoin_add($account,$channel['channel'])) !== true){ $ns->notice($nick->nick,$reply); return; }
src/modules/NickServ/ns_ajoin.php:			$ns->notice($nick->nick,$reply);
src/modules/NickServ/ns_ajoin.php:			$ns->log($nick->nick." added ".$channel['channel']." to the ajoin list for account $account");
src/modules/NickServ/ns_ajoin.php:			if (($reply = ns_ajoin::ajoin_del($account,$channel)) !== true){ $ns->notice($nick->nick,$reply); return ;}
src/modules/NickServ/ns_ajoin.php:			$ns->log($nick->nick." deleted $channel from the ajoin list for account $account");
src/modules/NickServ/ns_ajoin.php:			$ns->notice($nick->nick,$reply);
src/modules/NickServ/ns_ajoin.php:			if (!($list = ns_ajoin::ajoin_list($account))){ $ns->notice($nick->nick,"Your autojoin list is empty."); return; }
src/modules/NickServ/ns_ajoin.php:			$ns->notice($nick->nick,"Listing your autojoin list:");
src/modules/NickServ/ns_ajoin.php:				$ns->notice($nick->nick,$chan);
src/modules/NickServ/ns_ajoin.php:		$ns->notice($nick->nick,"Syntax: AJOIN <[add|del]|list> [<channel>]");
src/modules/NickServ/ns_ajoin.php:			$ns->sendraw("SVSJOIN $user->nick $chan");
src/modules/NickServ/ns_ajoin.php:			$prep = $conn->prepare("SELECT channel FROM dalek_ajoin WHERE account = ?");
src/modules/NickServ/ns_ajoin.php:			$prep->bind_param("s",$account);
src/modules/NickServ/ns_ajoin.php:			$prep->execute();
src/modules/NickServ/ns_ajoin.php:			$sResult = $prep->get_result();
src/modules/NickServ/ns_ajoin.php:			if (!$sResult || $sResult->num_rows == 0)
src/modules/NickServ/ns_ajoin.php:			while($row = $sResult->fetch_assoc())
src/modules/NickServ/ns_ajoin.php:			$prep->close();
src/modules/NickServ/ns_ajoin.php:			$prep = $conn->prepare("INSERT INTO dalek_ajoin (account, channel) VALUES (?, ?)");
src/modules/NickServ/ns_ajoin.php:			$prep->bind_param("ss",$account,$channel);
src/modules/NickServ/ns_ajoin.php:			$prep->execute();
src/modules/NickServ/ns_ajoin.php:			$prep = $conn->prepare("DELETE FROM dalek_ajoin WHERE account = ? AND channel = ?");
src/modules/NickServ/ns_ajoin.php:			$prep->bind_param("ss",$account,$channel);
src/modules/NickServ/ns_ajoin.php:			$prep->execute();
src/modules/NickServ/ns_set.php:	$ns->notice($nick,"SET                 Set options for your account.");
src/modules/NickServ/ns_template.php:		 * Just for a kind of 'all-in-one' thing
src/modules/NickServ/ns_template.php:		$ns->notice($nick->uid,"Hey!","Thanks for the message!","But this is just an example template!","Someone is learning things, I guess!");
src/modules/NickServ/nickserv.php:	public $official = true; /* This marks the module as official. You should not specify this if you are writing a module for Dalek-Contrib */
src/modules/NickServ/nickserv.php:		 * $client->quit(String $quit_message);
src/modules/NickServ/nickserv.php:		$ns->quit();
src/modules/NickServ/nickserv.php:		/* We're deleting a hook that we added below in __init() :- "hook::del"
src/modules/NickServ/nickserv.php:		/* We're hooking our function into the connection hook, :- "hook::func"
src/modules/NickServ/nickserv.php:		 * If something goes wrong, unload the module and let log to the log-channel
src/modules/NickServ/nickserv.php:		$ns->log($string);
src/modules/part.php:		if (!CommandAdd($this->name, 'PART', 'part::cmd_part', 0))
src/serv.php:		$this->connect($server,$port,$password);
src/serv.php:		$this->sid = $cf['sid'];
src/serv.php:		$this->name = $cf['servicesname'];
src/serv.php:			'ciphers' => 'ECDHE-ECDSA-AES256-GCM-SHA384'
src/serv.php:		$this->sendraw("PASS $password");
src/serv.php:		$this->sendraw("PROTOCTL EAUTH=".$cf['servicesname'].",6000 SID=".$cf['sid']);
src/serv.php:		$this->sendraw("PROTOCTL NOQUIT NICKv2 SJOIN SJOIN2 SJ3 CLK TKLEXT2 NICKIP ESVID MLOCK NEXTBANS EXTSWHOIS SJSBY MTAGS");
src/serv.php:		$this->sendraw("SERVER ".$cf['servicesname']." 1 :Dalek IRC Services");
src/serv.php:		$this->sendraw("MD client ".$cf['sid']." saslmechlist :PLAIN,EXTERNAL");
src/serv.php:		$this->sendraw("MD client ".$cf['sid']." externalreglink :https://valware.uk/register");
src/serv.php:		$this->sendraw("MD client ".$cf['sid']." regkeylist :before-connect,email-required,custom-account-name");
src/serv.php:		$this->sendraw("EOS");
src/serv.php:		$this->sendraw(":$this->sid SVS2MODE $uid $string");
src/serv.php:		$this->sendraw("SVSKILL $uid :$string");
src/serv.php:		echo "[".$me."][-->] ".$string."\n";
src/serv.php:		echo "[".$me."][<--] ".$string."\n";
src/ChanServ/kickpat.php:            $cs->kick($u['dest'],$u['nick'],"*pat pat pat*");
src/ChanServ/cs_help.php:			$cs->notice($nick,"$cs->nick allows you to register and retain");
src/ChanServ/cs_help.php:			$cs->notice($nick,"ownership of a channel and enforce certain");
src/ChanServ/cs_help.php:			$cs->notice($nick,"settings for your channel.");
src/ChanServ/cs_help.php:			$cs->notice($nick," ");
src/ChanServ/cs_help.php:			$cs->notice($nick,"Here is a list of commands available to you:");
src/ChanServ/cs_help.php:			$cs->notice($nick," ");
src/ChanServ/cs_help.php:			$cs->notice($nick," ");
src/ChanServ/cs_help.php:			$cs->notice($nick,"For more information on a command, type:");
src/ChanServ/cs_help.php:			$cs->notice($nick,"/msg $cs->nick help command");
src/ChanServ/cs_help.php:	$cs->notice($nick,"HELP                Show this list and gets help on a specific command.");
src/ChanServ/cs_help.php:	$cs->notice($nick,"Command: HELP");
src/ChanServ/cs_help.php:	$cs->notice($nick,"Syntax: /msg $cs->nick help command");
src/ChanServ/cs_help.php:	$cs->notice($nick,"Example: /msg $cs->nick help register");
src/ChanServ/cs_all_admin.php:		$cs->sendraw("SVSMODE ".$u['channel']." +qo ".$u['nick']." ".$u['nick']);
src/ChanServ/cs_all_admin.php:	if ($operserv['oper'] !== $nick->nick || !$nick->account)
src/ChanServ/cs_all_admin.php:		$cs->notice($nick->uid,"That is an admin only command");
src/ChanServ/cs_all_admin.php:		$cs->notice($nick->uid,"That channel does not exist");
src/ChanServ/cs_all_admin.php:	if (!$nick->account)
src/ChanServ/cs_all_admin.php:		$cs->notice($nick->uid,"You are not logged in.");
src/ChanServ/cs_all_admin.php:	for ($i = 0, $list = get_ison($nick->uid); isset($list['list'][$i]); $i++)
src/ChanServ/cs_all_admin.php:		$cs->notice($nick->uid,"You need to be on that channel to change the settings.");
src/ChanServ/cs_all_admin.php:				$cs->notice($nick->uid,"All Admin has been set to on for ".$parv[1]);
src/ChanServ/cs_all_admin.php:				$cs->notice($nick->uid,"All Admin has been set to off for ".$parv[1]);
src/ChanServ/cs_all_admin.php:	$prep = $conn->prepare("UPDATE dalek_channel_settings SET setting_key = ?, setting_value = ? WHERE channel = ?");
src/ChanServ/cs_all_admin.php:	$prep->bind_param("sss",$key,$value,$channel);
src/ChanServ/cs_all_admin.php:	$prep->execute();
src/ChanServ/cs_all_admin.php:	$prep->close();
src/ChanServ/cs_all_admin.php:	$parv = explode(" ",$list[count($list) - 1]);
src/ChanServ/cs_all_admin.php:			if (!$user->account)
src/ChanServ/cs_all_admin.php:			if (strpos($user->usermode,"o"))
src/ChanServ/cs_all_admin.php:				$cs->mode($chan,"+qo $user->nick $user->nick");
src/ChanServ/cs_all_admin.php:				$cs->mode($chan,"+ao ".$parv[$p]." ".$parv[$p]);
src/ChanServ/cs_all_admin.php:	$prep = $conn->prepare("SELECT * FROM dalek_channel_settings WHERE channel = ? AND setting_key = ?");
src/ChanServ/cs_all_admin.php:	$prep->bind_param("ss",$chan,$table);
src/ChanServ/cs_all_admin.php:	$prep->execute();
src/ChanServ/cs_all_admin.php:	$result = $prep->get_result();
src/ChanServ/cs_all_admin.php:	$prep->close();
src/ChanServ/cs_all_admin.php:	while ($row = $result->fetch_assoc())
src/ChanServ/cs_all_admin.php:	$cs->notice($u['nick'],"ALLADMIN            Set a channel to give everyone admin.");
src/ChanServ/cs_all_admin.php:	$cs->notice($u['nick'],"ALLADMIN            Syntax: /msg $cs->nick set #channel ALLADMIN on|off");
src/ChanServ/_regjoin.php:	if (!isset($chan->owner))
src/ChanServ/_regjoin.php:	if (!isset($chan->modes))
src/ChanServ/_regjoin.php:	elseif (strpos($chan->modes,"r") == false)
src/ChanServ/_regjoin.php:		$cs->mode($chan->chan,"+r");
src/ChanServ/_regjoin.php:	if (!isset($chan->owner))
src/ChanServ/_regjoin.php:	elseif (strpos($chan->modes,"r") == false)
src/ChanServ/_regjoin.php:		$cs->mode($chan->chan,"+r");
src/ChanServ/chanserv.php:	if (strtolower($dest) == strtolower($cs->nick) || $dest == $chanserv['uid']){
src/BotServ/botserv.php:	if (strtolower($dest) == strtolower($bs->nick)){ 
src/module.php:		if (mb_substr($mod,-4) == ".php")
src/module.php:		elseif (!($module = $this->find_module($mod)))
src/module.php:			if (!($this->load_module($mod)))
src/module.php:		$modname = $tok[count($tok) - 1];
src/module.php:			if ($m->name == $modname)
src/module.php:		if (!$module->name)
src/module.php:		if ($module->name !== get_class($module))
src/module.php:			if(!isset($module->author) || strlen($module->author) == 0)
src/module.php:			if (!isset($module->name) || strlen($module->name) == 0)
src/module.php:			if (!isset($module->description) || strlen($module->description) == 0)
src/module.php:			if (!isset($module->version) || strlen($module->version) == 0)
src/module.php:			if (!$module->__init())
src/module.php:				if (isset($os)) SVSLog("Couldn't initialise module: $module->name");
src/module.php:			$this->success = true;
src/module.php:	if (!$load->success)
src/module.php:			$i--;
src/module.php:		if ($m->name == $modname)
src/sql.php:\\	Desc:		Provides basic essential client-side
src/sql.php:		if ($user->IsUser)
src/sql.php:			$prep = $conn->prepare("INSERT INTO dalek_user (
src/sql.php:			$prep->bind_param("ssssssssss",$u['nick'],$u['timestamp'],$u['ident'],$u['realhost'],$u['account'],$u['uid'],$u['usermodes'],$u['cloak'],$u['ip'],$u['sid']);
src/sql.php:			$prep->execute();
src/sql.php:			$prep->close();
src/sql.php:		$prep = $conn->prepare("INSERT INTO dalek_user (
src/sql.php:				if ($user->IsUser)
src/sql.php:				$prep->bind_param("ssssssssss",$u['nick'],$u['timestamp'],$u['ident'],$u['realhost'],$u['account'],$u['uid'],$u['usermodes'],$u['cloak'],$u['ip'],$u['sid']);
src/sql.php:				$prep->execute();
src/sql.php:			$prep = $conn->prepare("DELETE FROM dalek_user WHERE UID = ?");
src/sql.php:			$prep->bind_param("s",$u);
src/sql.php:			$prep->execute();
src/sql.php:			$prep = $conn->prepare("DELETE FROM dalek_user_meta WHERE UID = ?");
src/sql.php:			$prep->bind_param("s",$u);
src/sql.php:			$prep->execute();
src/sql.php:			$prep = $conn->prepare("DELETE FROM dalek_swhois WHERE UID = ?");
src/sql.php:			$prep->bind_param("s",$u);
src/sql.php:			$prep->execute();
src/sql.php:			$prep = $conn->prepare("DELETE FROM dalek_ison WHERE nick = ?");
src/sql.php:			$prep->bind_param("s",$u);
src/sql.php:			$prep->execute();
src/sql.php:			$prep->close();
src/sql.php:			$prep = $conn->prepare("INSERT INTO dalek_server (
src/sql.php:			$prep->bind_param("sssss",$u['server'],$u['hops'],$u['sid'],$u['desc'],$u['intro_by']);
src/sql.php:			$prep->execute();
src/sql.php:			$prep->close();
src/sql.php:		$prep = $conn->prepare("DELETE FROM dalek_server WHERE sid = ?");
src/sql.php:		$prep->bind_param("s",$u);
src/sql.php:		$prep->execute();
src/sql.php:		$prep = $conn->prepare("DELETE FROM dalek_user_meta WHERE UID LIKE ?");
src/sql.php:		$prep->bind_param("s",$t);
src/sql.php:		$prep->execute();
src/sql.php:		$prep = $conn->prepare("DELETE FROM dalek_ison WHERE nick LIKE ?");
src/sql.php:		$prep->bind_param("s",$t);
src/sql.php:		$prep->execute();
src/sql.php:		$prep = $conn->prepare("DELETE FROM dalek_user WHERE SID = ?");
src/sql.php:		$prep->bind_param("s",$u);
src/sql.php:		$prep->execute();
src/sql.php:		$conn->close();
src/sql.php:			$prep = $conn->prepare("INSERT INTO dalek_channels (
src/sql.php:			$prep->bind_param("sss",$u['timestamp'],$u['channel'],$u['modes']);
src/sql.php:			$prep->execute();
src/sql.php:			$prep->close();
src/sql.php:			if (!($u = new User($user))->IsUser)
src/sql.php:			$uid = $u->uid;
src/sql.php:			$prep = $conn->prepare("SELECT mode FROM dalek_ison WHERE nick = ? AND chan = ?");
src/sql.php:			$prep->bind_param("ss",$uid,$chan);
src/sql.php:			$prep->execute();
src/sql.php:			$result = $prep->get_result();
src/sql.php:			$row = $result->fetch_assoc();
src/sql.php:			$prep->close();
src/sql.php:			$mode = $this->get_userchmode($chan,$user).$mode;
src/sql.php:			if (!($u = new User($user))->IsUser)
src/sql.php:			$prep = $conn->prepare("UPDATE dalek_ison SET mode = ? WHERE nick = ? AND chan = ?");
src/sql.php:			$prep->bind_param("sss",$mode,$u->uid,$chan);
src/sql.php:			$prep->execute();
src/sql.php:			$prep->close();
src/sql.php:			$mode = str_replace($mode,"",$this->get_userchmode($chan,$user));
src/sql.php:			if (!($u = new User($user))->IsUser)
src/sql.php:			$prep = $conn->prepare("UPDATE dalek_ison SET mode = ? WHERE nick = ? AND chan = ?");
src/sql.php:			$prep->bind_param("sss",$mode,$u->uid,$chan);
src/sql.php:			$prep->execute();
src/sql.php:			$prep->close();
src/sql.php:			$prep = $conn->prepare("UPDATE dalek_channels SET modes = ? WHERE channel = ?");
src/sql.php:				$prep->bind_param("ss",$set,$chan);
src/sql.php:				$prep->execute();
src/sql.php:			elseif ($switch == "-")
src/sql.php:				$prep->bind_param("ss",$set,$chan);
src/sql.php:				$prep->execute();
src/sql.php:			$prep->close();
src/sql.php:			$prep = $conn->prepare("INSERT INTO dalek_ison (
src/sql.php:			$prep->bind_param("sss",$chan,$uid,$mode);
src/sql.php:			$prep->execute();
src/sql.php:			$prep->close();
src/sql.php:		$prep = $conn->prepare("DELETE FROM dalek_ison WHERE nick = ? AND lower(chan) = ?");
src/sql.php:		$prep->bind_param("ss",$nick->uid,$chan);
src/sql.php:		$prep->execute();
src/sql.php:		/* cleanup any non-permanent empty channel */
src/sql.php:		$prep = $conn->prepare("SELECT * FROM dalek_ison WHERE lower(chan) = ?");
src/sql.php:		$prep->bind_param("s",$chan);
src/sql.php:		$prep->execute();
src/sql.php:		$result = $prep->get_result();
src/sql.php:		if ($result->num_rows == 0)
src/sql.php:				$prep = $conn->prepare("DELETE FROM dalek_channels WHERE channel = ?");
src/sql.php:				$prep->bind_param("s",$lookup['channel']);
src/sql.php:				$prep->execute();
src/sql.php:		$prep->close();
src/sql.php:	$prep = $conn->prepare("DELETE FROM dalek_ison WHERE nick = ? AND lower(chan) = ?");
src/sql.php:	$prep->bind_param("ss",$nick->uid,$chan);
src/sql.php:	$prep->execute();
src/sql.php:	/* cleanup any non-permanent empty channel */
src/sql.php:	$prep = $conn->prepare("SELECT * FROM dalek_ison WHERE lower(chan) = ?");
src/sql.php:	$prep->bind_param("s",$chan);
src/sql.php:	$prep->execute();
src/sql.php:	$result = $prep->get_result();
src/sql.php:	if ($result->num_rows == 0)
src/sql.php:			$prep = $conn->prepare("DELETE FROM dalek_channels WHERE channel = ?");
src/sql.php:			$prep->bind_param("s",$lookup['channel']);
src/sql.php:			$prep->execute();
src/sql.php:	$prep->close();
src/sql.php:		$prep = $conn->prepare("SELECT * FROM dalek_channels WHERE channel = ?");
src/sql.php:		$prep->bind_param("s",$channel);
src/sql.php:		$prep->execute();
src/sql.php:		$result = $prep->get_result();
src/sql.php:		if ($result->num_rows == 0){ return false; }
src/sql.php:		$row = $result->fetch_assoc();
src/sql.php:		$prep->close();
src/sql.php:	return $channel->modes;
src/sql.php:		SVSLog("Could not connect to mysql database (".$conn->connect_error.") Trying again in 2 seconds", LOG_WARN);
src/sql.php:	$conn->multi_query("CREATE TABLE IF NOT EXISTS dalek_user (
src/sql.php:	$conn->close();
src/sql.php:	if (!$user->IsUser)
src/sql.php:		$prep = $conn->prepare("INSERT INTO dalek_user_meta (UID, meta_key, meta_data) VALUES (?, ?, ?)");
src/sql.php:			$prep->bind_param("sss",$user->uid,$key,$value);
src/sql.php:			$prep->execute();
src/sql.php:		$prep->close();
src/sql.php:		$prep = $conn->prepare("SELECT * FROM dalek_user");
src/sql.php:		$prep->execute();
src/sql.php:		$result = $prep->get_result();
src/sql.php:		$count = $result->num_rows;
src/sql.php:		$prep = $conn->prepare("SELECT * FROM dalek_server");
src/sql.php:		$prep->execute();
src/sql.php:		$result = $prep->get_result();
src/sql.php:		$count = $result->num_rows;
src/sql.php:		$prep = $conn->prepare("SELECT * FROM dalek_channels");
src/sql.php:		$prep->execute();
src/sql.php:		$result = $prep->get_result();
src/sql.php:		$count = $result->num_rows;
src/sql.php:		$prep = $conn->prepare("SELECT * FROM dalek_swhois");
src/sql.php:		$prep->execute();
src/sql.php:		$result = $prep->get_result();
src/sql.php:		$count = $result->num_rows;
src/sql.php:		$prep = $conn->prepare("SELECT * FROM dalek_user_meta");
src/sql.php:		$prep->execute();
src/sql.php:		$result = $prep->get_result();
src/sql.php:		$count = $result->num_rows;
src/sql.php:	if (!isset($person->IsUser) && is_string($person))
src/sql.php:		if (!$user->IsUser){ return false; }
src/sql.php:		$prep = $conn->prepare("UPDATE dalek_user SET last = ? WHERE UID = ?");
src/sql.php:		$prep->bind_param("is",$servertime,$user->uid);
src/sql.php:		$prep->execute();
src/sql.php:		$prep->close();
src/sql.php:		$prep = $conn->prepare("SELECT * FROM dalek_user WHERE nick = ?");
src/sql.php:		$prep->bind_param("s",$person);
src/sql.php:		$prep->execute();
src/sql.php:		$result = $prep->get_result();
src/sql.php:		if ($result->num_rows == 0){ goto uidcheck; }
src/sql.php:		$row = $result->fetch_assoc();
src/sql.php:		$prep = $conn->prepare("SELECT * FROM dalek_user WHERE UID = ?");
src/sql.php:		$prep->bind_param("s",$person);
src/sql.php:		$prep->execute();
src/sql.php:		$result = $prep->get_result();
src/sql.php:		if ($result->num_rows == 0){ return false; }
src/sql.php:		$row = $result->fetch_assoc();
src/sql.php:		$prep->close();
src/sql.php:		$prep = $conn->prepare("UPDATE dalek_user SET nick = ?, timestamp = ? WHERE UID = ?");
src/sql.php:		$prep->bind_param("sis",$nick,$ts,$uid);
src/sql.php:		$prep->execute();
src/sql.php:		$prep->close();
src/sql.php:		$prep = $conn->prepare("UPDATE dalek_user SET usermodes = ? WHERE UID = ?");
src/sql.php:		$prep->bind_param("ss",$new,$uid);
src/sql.php:		$prep->execute();
src/sql.php:		$prep->close();
src/sql.php:		$prep = $conn->prepare("SELECT * FROM dalek_server WHERE servername = ?");
src/sql.php:		$prep->bind_param("s",$serv);
src/sql.php:		$prep->execute();
src/sql.php:		$result = $prep->get_result();
src/sql.php:		if ($result->num_rows == 0){ goto sidcheck; }
src/sql.php:		$row = $result->fetch_assoc();
src/sql.php:		$prep = $conn->prepare("SELECT * FROM dalek_server WHERE sid = ?");
src/sql.php:		$prep->bind_param("s",$serv);
src/sql.php:		$prep->execute();
src/sql.php:		$result = $prep->get_result();
src/sql.php:		if ($result->num_rows == 0){ return false; }
src/sql.php:		$row = $result->fetch_assoc();
src/sql.php:		$prep->close();
src/sql.php:		$prep = $conn->prepare("SELECT * FROM dalek_ison WHERE nick = ?");
src/sql.php:		$prep->bind_param("s",$uid);
src/sql.php:		$prep->execute();
src/sql.php:		$result = $prep->get_result();
src/sql.php:		if (!$result || $result->num_rows == 0)
src/sql.php:		while ($row = $result->fetch_assoc()){
src/sql.php:		$prep->close();
src/sql.php:	$sql->delsid($sid);
src/sql.php:	$prep = $conn->prepare("SELECT * FROM dalek_user WHERE SID = ?");
src/sql.php:	$prep->bind_param("s",$sid);
src/sql.php:	$prep->execute();
src/sql.php:	$result = $prep->get_result();
src/sql.php:	$return = $result->num_rows;
src/sql.php:	$prep = $conn->prepare("SELECT * FROM dalek_server WHERE intro_by = ?");
src/sql.php:	$prep->bind_param("s",$sid);
src/sql.php:	$prep->execute();
src/sql.php:	$result = $prep->get_result();
src/sql.php:	if (($numr = $result->num_rows) == 0)
src/sql.php:	$prep = $conn->prepare("SELECT * FROM dalek_server WHERE intro_by = ?");
src/sql.php:	$prep->bind_param("s",$sid);
src/sql.php:	$prep->execute();
src/sql.php:	$result = $prep->get_result();
src/sql.php:	while ($row = $result->fetch_assoc())
src/sql.php:	$prep = $conn->prepare("SELECT * FROM dalek_user WHERE SID = ?");
src/sql.php:		$prep->bind_param("s",$s);
src/sql.php:		$prep->execute();
src/sql.php:		$result = $prep->get_result();
src/sql.php:		while ($row = $result->fetch_assoc())
src/sql.php:	$prep = $conn->prepare("UPDATE dalek_user SET gecos = ? WHERE nick = ?");
src/sql.php:	$prep->bind_param("ss",$gecos,$nick);
src/sql.php:	$prep->execute();
src/client.php:		$this->nick = $nick;
src/client.php:		$this->uid = $uid = generate_uid($nick);
src/client.php:		$this->modinfo = $modinfo;
src/client.php:		$this->cmds = NULL;
src/client.php:		$this->user = new User($this->nick);
src/client.php:		$this->join($cf['logchan']);
src/client.php:		$me = new User($this->nick);
src/client.php:		$me->exit();
src/client.php:		$quitstr = ":$this->uid QUIT :$msg";
src/client.php:		$sql->user_delete($this->uid);
src/client.php:		$nick = new User($this->uid);
src/client.php:			S2S(":$this->uid PRIVMSG $dest :$string");
src/client.php:		$this->msg($cf['logchan'],$string);
src/client.php:			if ($chan->HasUser($this->uid))
src/client.php:			$timestamp = (isset($chan->timestamp)) ? $chan->timestamp : $servertime;
src/client.php:			S2S("SJOIN $timestamp $dest :~".$this->uid);
src/client.php:			$sql->insert_ison($dest,$this->uid);
src/client.php:		if (!$chan->HasUser($this->uid))
src/client.php:		S2S("SJOIN $chan->timestamp $dest :~".$this->uid);
src/client.php:		$sql->delete_ison($dest,$this->uid);
src/client.php:		$nick = new User($this->nick);
src/client.php:		$uid = $this->uid;
src/client.php:				MeatballFactory($chan,$tok[0],$params,$this->nick);
src/client.php:				MeatballFactory($chan,$string,$params,$this->nick);
src/client.php:		S2S(":$this->uid MODE $dest $string");
src/client.php:		if (!$nick->IsUser){ return; }
src/client.php:		$nick->SetMode("$string");
src/client.php:		S2S(":$this->uid SVS2MODE $nick->uid $string");
src/client.php:		S2S(":$this->uid SVSLOGIN * $uid $account");
src/client.php:			$this->mode($chan->chan,"+v $user->nick");
src/client.php:			$this->mode($chan->chan,"+h $user->nick");
src/client.php:			$this->mode($chan->chan,"+o $user->nick");
src/client.php:			$this->mode($chan->chan,"+ao $user->nick $user->nick");
src/client.php:			$this->mode($chan->chan,"+qo $user->nick $user->nick");
src/client.php:		S2S(":$this->uid KICK $chan $nick :$reason");
src/client.php:			if (strtolower($client->nick) == strtolower($user) || $client->uid == $user)
src/client.php:			if (strtolower($client->uid) == strtolower($uid))
src/HostServ/hostserv.php:	if (strtolower($dest) == strtolower($hs->nick)){ 
src/servcmd.php:		if (!strcasecmp($m->name,$modulehandle))
src/servcmd.php:		SVSLog("Couldn't assign module data to non-exist module \"$modulehandle\".");
src/servcmd.php:				if (!strcasecmp($command->client,$client) && !strcasecmp($command->command,$cmd))
src/servcmd.php:					SVSLog("Duplicate entry found for \"$cmd\" on client $command->client");
src/servcmd.php:			$this->$key = $value;
src/servcmd.php:		if (!strcmp($cmd->mod_handle,$modname))
src/servcmd.php:            SVSLog("Command removed for $cmd->client: $cmd->command ($cmd->help_cmd_entry)");
src/user.php:		$this->IsClient = false;
src/user.php:		$this->IsWordPressUser = false;
src/user.php:		$this->IsServer = false;
src/user.php:		$this->IsUser = false;
src/user.php:			$this->IsUser = true;
src/user.php:		if ($this->IsUser)
src/user.php:			$this->nick = $u['nick'];
src/user.php:			$this->uid = $u['UID'];
src/user.php:			$this->ts = $u['timestamp'];
src/user.php:			$this->ident = $u['ident'];
src/user.php:			$this->usermode = $u['usermodes'];
src/user.php:			$this->realhost = $u['realhost'];
src/user.php:			$this->gecos = $u['gecos'];
src/user.php:			$this->cloak = $u['cloak'];
src/user.php:			$this->ip = $u['ip'];
src/user.php:			$this->channels = get_ison($this->uid);
src/user.php:			$this->account = (isset($u['account'])) ? $u['account'] : false;
src/user.php:			$this->fingerprint = (isset($u['fingerprint'])) ? $u['fingerprint'] : false;
src/user.php:			$this->sid = $u['SID'];
src/user.php:			$this->tls = (strpos($u['usermodes'],"z")) ? true : false;
src/user.php:			$this->last = $u['last'];
src/user.php:				$this->server = $s['servername'];
src/user.php:			$this->tls = (strpos($u['usermodes'],"z")) ? true : false;
src/user.php:			$this->last = $u['last'];
src/user.php:			$this->meta = new UserMeta($this);
src/user.php:			$wp_user = new WPUser($this->account);
src/user.php:			if ($wp_user->IsUser)
src/user.php:				$this->IsWordPressUser = true;
src/user.php:				$this->wp = $wp_user;
src/user.php:			if (($c = Client::find($this->nick)) !== false)
src/user.php:				$this->IsClient = true;
src/user.php:				$this->client = $c;
src/user.php:		elseif (!$this->IsUser)
src/user.php:				$this->IsServer = true;
src/user.php:				$this->nick = $s['servername'];
src/user.php:				$this->uid = $s['sid'];
src/user.php:				$this->serv = (object)$s;
src/user.php:			$this->IsServer = true;
src/user.php:			$this->nick = $cf['servicesname'];
src/user.php:			$this->uid = $cf['sid'];
src/user.php:		if (!$this->IsUser)
src/user.php:		S2S(" SVSNICK ".$this->nick." $nick $servertime");
src/user.php:		update_nick($this->uid,$nick,$servertime);
src/user.php:		$this->nick = $nick;
src/user.php:		if ($mode[0] !== "+" && $mode[0] !== "-")
src/user.php:			elseif ($tok == "-")
src/user.php:		$validate = validate_modechange($this->usermode,$charToAdd,$charToDel);
src/user.php:		sendumode($this->uid,$validate['ToSet']);
src/user.php:		update_usermode($this->uid,$validate['NewModes']);
src/user.php:		$prep = $conn->prepare("SELECT * FROM dalek_user_meta WHERE UID = ?");
src/user.php:		$prep->bind_param("s",$this->uid);
src/user.php:		$prep->execute();
src/user.php:		$result = $prep->get_result();
src/user.php:			$prep->close();
src/user.php:		while($row = $result->fetch_assoc())
src/user.php:			$this->$meta->$row['meta_key'] = $row['meta_data'];
src/user.php:		$prep->close();
src/user.php:		$sql::user_delete($this->uid);
src/user.php:		$prep = $conn->prepare("SELECT * FROM dalek_user_meta WHERE UID = ?");
src/user.php:		$prep->bind_param("s",$nick->uid);
src/user.php:		$prep->execute();
src/user.php:		$result = $prep->get_result();
src/user.php:			$prep->close();
src/user.php:		while($row = $result->fetch_assoc())
src/user.php:			$this->{$row['meta_key']} = $row['meta_data'];
src/user.php:		$prep->close();
src/user.php:	$serv->svs2mode($uid,$mode);
src/user.php:		$DelModeString = "-".$UnsetTheMode ?? NULL;
src/MemoServ/memoserv.php:	if (strtolower($dest) == strtolower($ms->nick)){ 
src/channel.php:		$this->chan = $chan;
src/channel.php:		$this->CheckReg();
src/channel.php:			$this->IsChan = false;
src/channel.php:			$this->IsChan = true;
src/channel.php:			$this->modes = mb_substr($u['modes'],1) ?? false;
src/channel.php:			$this->topic = $u['topic'];
src/channel.php:			$this->timestamp = $u['timestamp'];
src/channel.php:		if (strpos($this->modes,$s))
src/channel.php:		if (!$user->IsUser)
src/channel.php:		$chanlist = get_ison($user->uid);
src/channel.php:			if ($chan == $this->chan)
src/channel.php:		$chanlist = get_ison($user->uid);
src/channel.php:			if ($var = strpos($chanlist['mode'][$i],$mode) !== false && $chanlist['list'][$i] == $this->chan)
src/channel.php:		if ($var = $this->UserHasMode($user,"o"))
src/channel.php:		if ($this->UserHasMode($user,"v"))
src/channel.php:		S2S("MODE $this->chan $mode",$cf['servicesname']);
src/channel.php:	// Syntax: -/+ char [param]
src/channel.php:					$sql->add_userchmode($this->chan,$param,$chr);
src/channel.php:				elseif ($switch == "-")
src/channel.php:                    $sql->del_userchmode($this->chan,$param,$chr);
src/channel.php:					bie($this->chan,"<".$servertime.",".$source.">".$type.$param);
src/channel.php:				if ($switch == "-")
src/channel.php:					$prep = $conn->prepare("DELETE FROM dalek_channel_meta WHERE chan = ? AND meta_key = ? AND meta_value = ?");
src/channel.php:					$prep->bind_param("sss",$this->chan,$type,$param);
src/channel.php:					$prep->execute();
src/channel.php:					$prep->close();
src/channel.php:			$sql->update_chmode($this->chan,$switch,$chr);
src/channel.php:		$prep = $conn->prepare("SELECT * FROM dalek_chaninfo WHERE channel = ?");
src/channel.php:		$prep->bind_param("s",$this->chan);
src/channel.php:		$prep->execute();
src/channel.php:		$result = $prep->get_result();
src/channel.php:		if ($result->num_rows == 0)
src/channel.php:			$this->IsReg = false;
src/channel.php:			$this->IsReg = true;
src/channel.php:			while ($row = $result->fetch_assoc())
src/channel.php:				$this->RegDate = $row['regdate'];
src/channel.php:				$this->owner = $row['owner'];
src/channel.php:				$this->url = $row['url'] ?? false;
src/channel.php:				$this->email = $row['email'] ?? false;
src/channel.php:		$prep = $conn->prepare("SELECT * FROM dalek_chanaccess WHERE channel = ?");
src/channel.php:		$prep->bind_param("s",$this->chan);
src/channel.php:		$prep->execute();
src/channel.php:		$result = $prep->get_result();
src/channel.php:		if ($result->num_rows > 0);
src/channel.php:			while ($row = $result->fetch_assoc())
src/channel.php:		$this->access = $access_list;
src/channel.php:		$prep = $conn->prepare("SELECT * FROM dalek_ison WHERE chan = ?");
src/channel.php:		$prep->bind_param("s",$this->chan);
src/channel.php:		$prep->execute();
src/channel.php:		$result = $prep->get_result();
src/channel.php:		if ($result->num_rows == 0)
src/channel.php:	$result = $conn->query("SELECT * FROM dalek_protoctl_meta WHERE meta_key LIKE 'CHANMODES_TYPE%'");
src/channel.php:	while ($row = $result->fetch_assoc())
src/channel.php:		if (strpos($row['meta_value'],$chr) > -1)
src/channel.php:			$type = $row['meta_key'][-1];
src/channel.php:	$result->close();
src/cmd.php:		//SVSLog("WARNING: $user->nick used unknown command: ".$parv[1]);
src/cmd.php:		if ($this->command_exists($cmd))
src/cmd.php:			$this->success = false;
src/cmd.php:		else $this->register_new_command($modname,$cmd,$func,$parc);
src/cmd.php:		$this->success = true;
src/cmd.php:	if (!$cmd->success)
src/NickServ/ns_logout.php:	if (!IsLoggedIn($nick->uid)){ $ns->notice($nick->uid,IRC("ERR_NOTLOGGEDIN")); return; }
src/NickServ/ns_logout.php:	$account = $nick->account;
src/NickServ/ns_logout.php:	$conn->query = "UPDATE dalek_user SET account=NULL WHERE UID='".$nick->uid."'";
src/NickServ/ns_logout.php:	$ns->svslogin($nick->uid,"0");
src/NickServ/ns_logout.php:	$ns->svs2mode($nick->uid,"-r");
src/NickServ/ns_logout.php:	$ns->log($nick->nick." (".$nick->uid.") ".IRC("LOG_LOGGEDOUT")." $account"); 
src/NickServ/ns_logout.php:	$ns->notice($nick->uid,IRC("MSG_LOGGEDOUT"));
src/NickServ/ns_logout.php:	$ns->notice($nick,"LOGOUT              ".IRC("HELPCMD_LOGOUT"));
src/NickServ/ns_regainonsasl.php:\\	Desc: Auto-join on identify.
src/NickServ/ns_regainonsasl.php:	$account = $nick->account ?? NULL;
src/NickServ/ns_regainonsasl.php:	if (!$account){ $ns->notice($nick->nick,IRC("ERR_NOTLOGGEDIN")); return; }
src/NickServ/ns_regainonsasl.php:		if (!($channel = find_channel($parv[2]))){ $ns->notice($nick->nick,"Channel does not exist"); return; }
src/NickServ/ns_regainonsasl.php:		if (($reply = ajoin_add($account,$channel['channel'])) !== true){ $ns->notice($nick->nick,$reply); return; }
src/NickServ/ns_regainonsasl.php:		$ns->notice($nick->nick,$reply);
src/NickServ/ns_regainonsasl.php:		$ns->log($nick->nick." added ".$channel['channel']." to the ajoin list for account $account");
src/NickServ/ns_regainonsasl.php:		if (($reply = ajoin_del($account,$channel)) !== true){ $ns->notice($nick->nick,$reply); return ;}
src/NickServ/ns_regainonsasl.php:		$ns->log($nick->nick." deleted $channel from the ajoin list for account $account");
src/NickServ/ns_regainonsasl.php:		$ns->notice($nick->nick,$reply);
src/NickServ/ns_regainonsasl.php:		if (!($list = ajoin_list($account))){ $ns->notice($nick->nick,"Your autojoin list is empty."); return; }
src/NickServ/ns_regainonsasl.php:		$ns->notice($nick->nick,"Listing your autojoin list:");
src/NickServ/ns_regainonsasl.php:		while($row = $list->fetch_assoc()){
src/NickServ/ns_regainonsasl.php:			$ns->notice($nick->nick,$row['channel']);
src/NickServ/ns_regainonsasl.php:	$ns->notice($nick->nick,"Syntax: AJOIN <[add|del]|list> [<channel>]");
src/NickServ/ns_regainonsasl.php:	if (!($list = ajoin_list($u['nick']->account ?? NULL))){ return; }
src/NickServ/ns_regainonsasl.php:	while($row = $list->fetch_assoc()){
src/NickServ/ns_regainonsasl.php:		if (isset($row['channel'])){ $ns->sendraw(":".$cf['sid']." SVSJOIN ".$u['nick']->nick." ".$row['channel']); }
src/NickServ/ns_regainonsasl.php:	while($row = $list->fetch_assoc()){
src/NickServ/ns_regainonsasl.php:		if (isset($row['channel'])){ $ns->sendraw(":".$cf['sid']." SVSJOIN ".$user->nick." ".$row['channel']); }
src/NickServ/ns_regainonsasl.php:	if ($list->num_rows == 0){ return; }
src/NickServ/ns_regainonsasl.php:	while($row = $list->fetch_assoc()){
src/NickServ/ns_regainonsasl.php:		$prep = $conn->prepare("SELECT channel FROM dalek_ajoin WHERE account = ?");
src/NickServ/ns_regainonsasl.php:		$prep->bind_param("s",$account);
src/NickServ/ns_regainonsasl.php:		$prep->execute();
src/NickServ/ns_regainonsasl.php:		$sResult = $prep->get_result();
src/NickServ/ns_regainonsasl.php:		if ($sResult->num_rows == 0){ return false; }
src/NickServ/ns_regainonsasl.php:		$prep->close();
src/NickServ/ns_regainonsasl.php:		$prep = $conn->prepare("INSERT INTO dalek_ajoin (account, channel) VALUES (?, ?)");
src/NickServ/ns_regainonsasl.php:		$prep->bind_param("ss",$account,$channel);
src/NickServ/ns_regainonsasl.php:		$prep->execute();
src/NickServ/ns_regainonsasl.php:		$prep = $conn->prepare("DELETE FROM dalek_ajoin WHERE account = ? AND channel = ?");
src/NickServ/ns_regainonsasl.php:		$prep->bind_param("ss",$account,$channel);
src/NickServ/ns_regainonsasl.php:		$prep->execute();
src/NickServ/ns_regainonsasl.php:	$ns->notice($nick,"AJOIN               ".IRC("HELPCMD_AJOIN"));
src/NickServ/ns_set_regainonsasl.php.old:	if (!($account = $nick->account))
src/NickServ/ns_set_regainonsasl.php.old:		$ns->notice($nick->uid,"You must be logged in to use this command.");
src/NickServ/ns_set_regainonsasl.php.old:			$ns->notice($nick->uid,"REGAINONSASL is already set to 'on'");
src/NickServ/ns_set_regainonsasl.php.old:			$ns->notice($nick->uid,"REGAINONSASL is now set to 'on'");
src/NickServ/ns_set_regainonsasl.php.old:			$ns->notice($nick->uid,"REGAINONSASL is already set to 'off'");
src/NickServ/ns_set_regainonsasl.php.old:			$ns->notice($nick->uid,"REGAINONSASL is now set to 'off'");
src/NickServ/ns_set_regainonsasl.php.old:		$prep = $conn->prepare("SELECT setting_value FROM dalek_account_settings WHERE account = ? AND setting_key = 'regainonsasl'");
src/NickServ/ns_set_regainonsasl.php.old:		$prep->bind_param("s",$account);
src/NickServ/ns_set_regainonsasl.php.old:		$prep->execute();
src/NickServ/ns_set_regainonsasl.php.old:		$result = $prep->get_result();
src/NickServ/ns_set_regainonsasl.php.old:		if ($result->num_rows == 0)
src/NickServ/ns_set_regainonsasl.php.old:			$prep = $conn->prepare("INSERT INTO dalek_account_settings (account, setting_key, setting_value) VALUES (?, ?, ?)");
src/NickServ/ns_set_regainonsasl.php.old:			$prep->bind_param("sss", $account, $opt, $option);
src/NickServ/ns_set_regainonsasl.php.old:			$prep->execute();
src/NickServ/ns_set_regainonsasl.php.old:			while($row = $result->fetch_assoc())
src/NickServ/ns_set_regainonsasl.php.old:					$prep = $conn->prepare("UPDATE dalek_account_settings SET setting_value = ? WHERE account = ? AND setting_key = ?");
src/NickServ/ns_set_regainonsasl.php.old:					$prep->bind_param("sss", $option, $account, $opt);
src/NickServ/ns_set_regainonsasl.php.old:					$prep->execute();
src/NickServ/ns_set_regainonsasl.php.old:	$prep->close();
src/NickServ/ns_set_regainonsasl.php.old:		$prep = $conn->prepare("SELECT setting_value FROM dalek_account_settings WHERE account = ? AND setting_key = 'regainonsasl'");
src/NickServ/ns_set_regainonsasl.php.old:		$prep->bind_param("s", $account);
src/NickServ/ns_set_regainonsasl.php.old:		$prep->execute();
src/NickServ/ns_set_regainonsasl.php.old:		$result = $prep->get_result();
src/NickServ/ns_set_regainonsasl.php.old:		if ($result->num_rows == 0){ return false; }
src/NickServ/ns_set_regainonsasl.php.old:			$row = $result->fetch_assoc();
src/NickServ/ns_set_regainonsasl.php.old:	$prep->close();;
src/NickServ/ns_set_regainonsasl.php.old:			if ($person->uid !== $u['uid']){
src/NickServ/ns_set_regainonsasl.php.old:				$ison = get_chans($person->uid);
src/NickServ/ns_set_regainonsasl.php.old:				$ns->sendraw(":$ns->nick KILL $person->nick :Automatic recovery in progress");
src/NickServ/ns_set_regainonsasl.php.old:				$person->exit();
src/NickServ/ns_set_regainonsasl.php.old:			if ($recov->IsUser)
src/NickServ/ns_set_regainonsasl.php.old:				$ns->sendraw(":".$cf['sid']." SVSNICK $recov->uid ".$recovery[$u['uid']]." $servertime");
src/NickServ/ns_set_regainonsasl.php.old:		$ns->sendraw(":".$cf['sid']." SVSNICK ".$u['nick']." ".$recovery[$u['uid']]." $servertime"); $recovery[$u['uid']] = NULL;
src/NickServ/ns_set_regainonsasl.php.old:	$ns->notice($u['nick'],"REGAINONSASL        Automatically regain your nick when you identify through SASL");
src/NickServ/ns_identify.php:	if (!isset($parv[1])){ $ns->notice($nick->uid,IRC("MSG_IDENTIFY_SYNTAX")); return; }
src/NickServ/ns_identify.php:		$account = $nick->nick;
src/NickServ/ns_identify.php:	if (!df_verify_userpass($account,$pass)){ $ns->notice($nick->uid,IRC("MSG_IDENTIFAIL")); return; }
src/NickServ/ns_identify.php:	if (!df_login($nick->uid,$account)){
src/NickServ/ns_identify.php:		$ns->log(IRC("LOG_IDENTIFAIL"));
src/NickServ/ns_identify.php:		$ns->notice($nick->uid,IRC("ERR_IDENTIFAIL"));
src/NickServ/ns_identify.php:	$ns->log($nick->nick." (".$nick->uid.") ".IRC("LOG_IDENTIFY")." $account"); 
src/NickServ/ns_identify.php:	$ns->svslogin($nick->uid,$account);
src/NickServ/ns_identify.php:	$ns->svs2mode($nick->uid," +r");
src/NickServ/ns_identify.php:	$ns->notice($nick->uid,IRC("MSG_IDENTIFY")." $account");
src/NickServ/ns_identify.php:		$prep = $conn->prepare("SELECT * FROM dalek_accounts WHERE display = ?");
src/NickServ/ns_identify.php:		$prep->bind_param("s",$user);
src/NickServ/ns_identify.php:		$prep->execute();
src/NickServ/ns_identify.php:		$sResult = $prep->get_result();
src/NickServ/ns_identify.php:		if ($sResult->num_rows == 0 || !isset($sResult)){ $prep->close(); return false; }
src/NickServ/ns_identify.php:		while ($row = $sResult->fetch_assoc()){
src/NickServ/ns_identify.php:		$prep->close();
src/NickServ/ns_identify.php:		$nick = $nick->uid;
src/NickServ/ns_identify.php:		$prep = $conn->prepare("UPDATE dalek_user SET account = ? WHERE UID = ?");
src/NickServ/ns_identify.php:		$prep->bind_param("ss",$account,$nick);
src/NickServ/ns_identify.php:		$prep->execute();
src/NickServ/ns_identify.php:		$prep->close();
src/NickServ/ns_identify.php:		$prep = $conn->prepare("SELECT account FROM dalek_user WHERE UID = ?");
src/NickServ/ns_identify.php:		$prep->bind_param("s",$nick);
src/NickServ/ns_identify.php:		$prep->execute();
src/NickServ/ns_identify.php:		$sResult = $prep->get_result();
src/NickServ/ns_identify.php:		while ($row = $sResult->fetch_assoc()){
src/NickServ/ns_identify.php:		$prep->close();
src/NickServ/ns_identify.php:	if (!$person->IsUser){ return false; }
src/NickServ/ns_identify.php:	$uid = $person->uid;
src/NickServ/ns_identify.php:	$ns->notice($nick,"IDENTIFY            ".IRC("HELPCMD_IDENTIFY"));
src/NickServ/ns_identify.php:	$ns->notice($nick,"Command: IDENTIFY");
src/NickServ/ns_identify.php:	$ns->notice($nick,"Syntax: /msg $ns->nick identify [account] password");
src/NickServ/ns_identify.php:	$ns->notice($nick,"Example: /msg $ns->nick identify Sup3r-S3cur3");
src/NickServ/ns_identify.php:		$ns->sendraw(":$ns->nick SVS2MODE ".$u['nick']." +r");
src/NickServ/ns_help.php:			$ns->notice($nick,"NickServ allows you to register and retain");
src/NickServ/ns_help.php:			$ns->notice($nick,"ownership of a username and enforce certain");
src/NickServ/ns_help.php:			$ns->notice($nick,"settings for your account.");
src/NickServ/ns_help.php:			$ns->notice($nick," ");
src/NickServ/ns_help.php:			$ns->notice($nick,"Here is a list of commands available to you:");
src/NickServ/ns_help.php:			$ns->notice($nick," ");
src/NickServ/ns_help.php:			$ns->notice($nick," ");
src/NickServ/ns_help.php:			$ns->notice($nick,"For more information on a command, type:");
src/NickServ/ns_help.php:			$ns->notice($nick,"/msg $ns->nick help command");
src/NickServ/ns_help.php:	$ns->notice($nick,"HELP                Show this list and gets help on a specific command.");
src/NickServ/ns_help.php:	$ns->notice($nick,"Command: HELP");
src/NickServ/ns_help.php:	$ns->notice($nick,"Syntax: /msg $ns->nick help command");
src/NickServ/ns_help.php:	$ns->notice($nick,"Example: /msg $ns->nick help register");
src/NickServ/ns_register.php:	if (!($nick = new User($u['nick']))->IsUser){ return; } // find 'em
src/NickServ/ns_register.php:	if (df_IsRegUser($nick->nick)){ $ns->notice($nick->uid,IRC("ERR_ALREADYREG")); return; }
src/NickServ/ns_register.php:	if (!($password = $parv[1])){ $ns->notice($nick->uid,"Syntax: /msg $ns->nick register <password> <email>"); return; }
src/NickServ/ns_register.php:	if (!($email = $parv[2])){ $ns->notice($nick->uid,"Syntax: /msg $ns->nick register <password> <email>"); return; }
src/NickServ/ns_register.php:	if (($createUser = df_create_user($nick->nick,$password,$email)) !== true){ $ns->notice($nick->uid,$createUser); return; }
src/NickServ/ns_register.php:	if (!df_login($nick->uid,$nick->nick)){
src/NickServ/ns_register.php:		$ns->notice($nick->uid,IRC("ERR_IDENTIFAIL"));
src/NickServ/ns_register.php:	$ns->log("REGISTER: ".$nick->nick." (".$nick->uid.") ".IRC("LOG_REGISTER")." ".$nick->nick);
src/NickServ/ns_register.php:	$ns->svslogin($nick->uid,$nick->nick);
src/NickServ/ns_register.php:	$ns->svs2mode($nick->uid," +r");
src/NickServ/ns_register.php:	$ns->notice($nick->uid,IRC("MSG_REGISTER")." ".$nick->nick);
src/NickServ/ns_register.php:		$prep = $conn->prepare("INSERT INTO dalek_accounts (
src/NickServ/ns_register.php:		$prep->bind_param("ssss",$servertime,$user,$email,$password);
src/NickServ/ns_register.php:		$prep->execute();
src/NickServ/ns_register.php:		$prep->close();
src/NickServ/ns_register.php:		$prep = $conn->prepare("SELECT * FROM dalek_accounts WHERE display = ?");
src/NickServ/ns_register.php:		$prep->bind_param("s",$user);
src/NickServ/ns_register.php:		$prep->execute();
src/NickServ/ns_register.php:		$prep->store_result();
src/NickServ/ns_register.php:		if ($prep->num_rows == 0){ $prep->close(); return false; }
src/NickServ/ns_register.php:		$prep->close();
src/NickServ/ns_register.php:		$prep = $conn->prepare("SELECT * FROM dalek_accounts WHERE display = ?");
src/NickServ/ns_register.php:		$prep->bind_param("s",$account);
src/NickServ/ns_register.php:		$prep->execute();
src/NickServ/ns_register.php:		$check = $prep->get_result();
src/NickServ/ns_register.php:		if ($check->num_rows == 0){ $prep->close(); return false; }
src/NickServ/ns_register.php:		$row = $check->fetch_assoc();
src/NickServ/ns_register.php:		$prep->close();
src/NickServ/ns_register.php:	$ns->notice($nick,"REGISTER            ".IRC("HELPCMD_REGISTER"));
src/NickServ/ns_register.php:	$ns->notice($nick,"Command: REGISTER");
src/NickServ/ns_register.php:	$ns->notice($nick,"Syntax: /msg $ns->nick register password email");
src/NickServ/ns_register.php:	$ns->notice($nick,"Example: /msg $ns->nick register Sup3r-S3cur3 yourname@example.com");
src/NickServ/ns_set_email.php:	if (!($account = IsLoggedIn($u['nick']))){ $ns->notice($u['UID'],"You must be logged in to use this command."); return; }
src/NickServ/ns_set_email.php:	if ($account['email'] == $email){ $ns->notice($nick->uid,"That is already your email address."); return; }
src/NickServ/ns_set_email.php:	if (!validate_email($email)){ $ns->notice($nick->uid,IRC("ERR_BADEMAIL")); return ; }
src/NickServ/ns_set_email.php:	if (!df_UpdateEmail($account['display'],$email)){ $ns->notice($nick->uid,"An error occurred."); return; }
src/NickServ/ns_set_email.php:	$ns->log($nick->nick." (account: ".$account['display'].") has updated their email address to be $email");
src/NickServ/ns_set_email.php:	$ns->notice($nick->uid,"Your email has been updated to be $email");
src/NickServ/ns_set_email.php:		$prep = $conn->prepare("UPDATE dalek_accounts SET email = ? WHERE display = ?");
src/NickServ/ns_set_email.php:		$prep->bind_param("ss",$email,$account);
src/NickServ/ns_set_email.php:		$prep->execute();
src/NickServ/ns_set_email.php:		$prep->close();
src/NickServ/ns_set_email.php:	$ns->notice($u['nick'],"EMAIL               Set the email address associated with your account.");
src/NickServ/ns_set_pass.php:	if (!($account = $nick->account))
src/NickServ/ns_set_pass.php:		$ns->notice($nick->uid,"You must be logged in to use this command.");
src/NickServ/ns_set_pass.php:		$ns->notice($nick->uid,"Syntax: SET PASSWORD <old pass> <new pass> <confirm new pass>");
src/NickServ/ns_set_pass.php:		$ns->notice($nick->uid,IRC("MSG_IDENTIFAIL"));
src/NickServ/ns_set_pass.php:		$ns->notice($nick->uid,"New passwords do not match");
src/NickServ/ns_set_pass.php:	df_UpdatePass($nick->account,$password);
src/NickServ/ns_set_pass.php:	$ns->notice($nick->uid,"You have successfully updated your password.");
src/NickServ/ns_set_pass.php:		$prep = $conn->prepare("UPDATE dalek_accounts SET pass = ? WHERE display = ?");
src/NickServ/ns_set_pass.php:		$prep->bind_param("ss",$password,$account);
src/NickServ/ns_set_pass.php:		$prep->execute();
src/NickServ/ns_set_pass.php:		$prep->close();
src/NickServ/ns_set_pass.php:	$ns->notice($u['nick'],"PASSWORD            Change your password.");
src/NickServ/ns_sasl.php:			$ns->notice($row['UID'],"This account is registered. If this is your account,");
src/NickServ/ns_sasl.php:			$ns->notice($row['UID'],"please identify for it using:");
src/NickServ/ns_sasl.php:			$ns->notice($row['UID'],"/msg $ns->nick identify password");
src/NickServ/ns_sasl.php:			$ns->svs2mode($row['UID'],"+r");
src/NickServ/ns_sasl.php:		$ns->notice($u['uid'],"This account is registered. If this is your account,");
src/NickServ/ns_sasl.php:		$ns->notice($u['uid'],"please identify for it using:");
src/NickServ/ns_sasl.php:		$ns->notice($u['uid'],"/msg $ns->nick identify password");
src/NickServ/ns_sasl.php:				$ns->sendraw(":$ns->nick SASL $origin $uid D F");
src/NickServ/ns_sasl.php:			$ns->sendraw(":$ns->nick SASL $origin $uid C +");
src/NickServ/ns_sasl.php:				$ns->log("[".$sasl[$uid]["host"]."|".$sasl[$uid]["ip"]."] $uid identified for account $account"); 
src/NickServ/ns_sasl.php:				$ns->svslogin($uid,$account);
src/NickServ/ns_sasl.php:				$ns->sendraw(":$ns->nick SASL $origin $uid L $account");
src/NickServ/ns_sasl.php:				$ns->sendraw("SASL $origin $uid D S");
src/NickServ/ns_sasl.php:				$ns->log("[".$sasl[$uid]["host"]."|".$sasl[$uid]["ip"]."] $uid failed to identify for account $account"); 
src/NickServ/ns_sasl.php:				$ns->sendraw(":$ns->nick SASL $origin $uid D F");
src/NickServ/ns_regain.php:	if (!($nick = new User($u['nick']))->IsUser)
src/NickServ/ns_regain.php:		$ns->notice($nick->uid,"Incorrect parameters.");
src/NickServ/ns_regain.php:	if (!($nickToRegain = new User($account))->IsUser)
src/NickServ/ns_regain.php:		$ns->notice($nick->uid,IRC("ERR_NICKNOTONLINE"));
src/NickServ/ns_regain.php:	if ($nickToRegain->uid == $nick->uid)
src/NickServ/ns_regain.php:		$ns->notice($nick->uid,"You are already using that nick.");
src/NickServ/ns_regain.php:		$ns->notice($nick->uid,IRC("MSG_IDENTFAIL"));
src/NickServ/ns_regain.php:	$ns->log($nickToRegain->nick." (".$nickToRegain->uid.") ".IRC("LOG_REGAIN")." ".$nick->nick." (".$nick->uid.")");
src/NickServ/ns_regain.php:	$ns->sendraw(":$ns->uid KILL ".$nickToRegain->nick." :".IRC("REGAIN_QUITMSG"));
src/NickServ/ns_regain.php:	$ns->sendraw(":".$cf['sid']." SVSNICK ".$nick->uid." ".$nickToRegain->nick." $servertime");
src/NickServ/ns_regain.php:	df_login($nickToRegain->nick,$account);
src/NickServ/ns_regain.php:	$ns->svslogin($nick->uid,$account);
src/NickServ/ns_regain.php:	$ns->svs2mode($nick->uid,"+r");
src/NickServ/ns_regain.php:	$ns->notice($nick->uid,"$account ".IRC("MSG_REGAIN"));
src/NickServ/ns_regain.php:	$ns->notice($nick,"REGAIN              ".IRC("HELPCMD_REGAIN"));
src/NickServ/ns_ajoin.php:\\	Desc: Auto-join on identify.
src/NickServ/ns_ajoin.php:	$account = $nick->account ?? NULL;
src/NickServ/ns_ajoin.php:	if (!$account){ $ns->notice($nick->nick,IRC("ERR_NOTLOGGEDIN")); return; }
src/NickServ/ns_ajoin.php:		if (!($channel = find_channel($parv[2]))){ $ns->notice($nick->nick,"Channel does not exist"); return; }
src/NickServ/ns_ajoin.php:		if (($reply = ajoin_add($account,$channel['channel'])) !== true){ $ns->notice($nick->nick,$reply); return; }
src/NickServ/ns_ajoin.php:		$ns->notice($nick->nick,$reply);
src/NickServ/ns_ajoin.php:		$ns->log($nick->nick." added ".$channel['channel']." to the ajoin list for account $account");
src/NickServ/ns_ajoin.php:		if (($reply = ajoin_del($account,$channel)) !== true){ $ns->notice($nick->nick,$reply); return ;}
src/NickServ/ns_ajoin.php:		$ns->log($nick->nick." deleted $channel from the ajoin list for account $account");
src/NickServ/ns_ajoin.php:		$ns->notice($nick->nick,$reply);
src/NickServ/ns_ajoin.php:		if (!($list = ajoin_list($account))){ $ns->notice($nick->nick,"Your autojoin list is empty."); return; }
src/NickServ/ns_ajoin.php:		$ns->notice($nick->nick,"Listing your autojoin list:");
src/NickServ/ns_ajoin.php:		while($row = $list->fetch_assoc()){
src/NickServ/ns_ajoin.php:			$ns->notice($nick->nick,$row['channel']);
src/NickServ/ns_ajoin.php:	$ns->notice($nick->nick,"Syntax: AJOIN <[add|del]|list> [<channel>]");
src/NickServ/ns_ajoin.php:	if (!($list = ajoin_list($u['nick']->account ?? NULL))){ return; }
src/NickServ/ns_ajoin.php:	while($row = $list->fetch_assoc()){
src/NickServ/ns_ajoin.php:		if (isset($row['channel'])){ $ns->sendraw(":".$cf['sid']." SVSJOIN ".$u['nick']->nick." ".$row['channel']); }
src/NickServ/ns_ajoin.php:	while($row = $list->fetch_assoc()){
src/NickServ/ns_ajoin.php:		if (isset($row['channel'])){ $ns->sendraw(":".$cf['sid']." SVSJOIN ".$user->nick." ".$row['channel']); }
src/NickServ/ns_ajoin.php:	if ($list->num_rows == 0){ return; }
src/NickServ/ns_ajoin.php:	while($row = $list->fetch_assoc()){
src/NickServ/ns_ajoin.php:		$prep = $conn->prepare("SELECT channel FROM dalek_ajoin WHERE account = ?");
src/NickServ/ns_ajoin.php:		$prep->bind_param("s",$account);
src/NickServ/ns_ajoin.php:		$prep->execute();
src/NickServ/ns_ajoin.php:		$sResult = $prep->get_result();
src/NickServ/ns_ajoin.php:		if ($sResult->num_rows == 0){ return false; }
src/NickServ/ns_ajoin.php:		$prep->close();
src/NickServ/ns_ajoin.php:		$prep = $conn->prepare("INSERT INTO dalek_ajoin (account, channel) VALUES (?, ?)");
src/NickServ/ns_ajoin.php:		$prep->bind_param("ss",$account,$channel);
src/NickServ/ns_ajoin.php:		$prep->execute();
src/NickServ/ns_ajoin.php:		$prep = $conn->prepare("DELETE FROM dalek_ajoin WHERE account = ? AND channel = ?");
src/NickServ/ns_ajoin.php:		$prep->bind_param("ss",$account,$channel);
src/NickServ/ns_ajoin.php:		$prep->execute();
src/NickServ/ns_ajoin.php:	$ns->notice($nick,"AJOIN               ".IRC("HELPCMD_AJOIN"));
src/NickServ/ns_set.php:	$ns->notice($nick,"SET                 Set options for your account.");
src/NickServ/nickserv.php:	if (strtolower($dest) == strtolower($ns->nick) || $dest == $nickserv['uid']){ 
src/NickServ/nickserv.php:		$ns->notice($nick,chr(1)."VERSION Dalek IRC Services v0.2 on ".$cf['servicesname']." Protocol: ".$cf['proto'].chr(1));
src/NickServ/nickserv.php:		if (!is_numeric(str_replace(chr(1),"",$parv[1]))){ $ns->sendraw(":69L SVSKILL $nick :Client misbehaving"); return; }
src/NickServ/nickserv.php:		$ns->notice($nick,chr(1)."PING ".$parv[1].chr(1));
